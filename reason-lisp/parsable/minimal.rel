
; ocaml, lisp style
(def words ["Hello world"])

(print_endline (String.concat " " (List.map String.uppercase words)))

{| Ok here's the "deal" |}

(defn get5 () 5)

(def five (Js.log (+ 3 (get5))))
(def five (Js.log (+ 2 (get5 ()))))

(module Dogs
    (type dog {:name string :age float})
    (def fluff {:name "Fluff" :age 0.4})
    (defn humanAge [{:age}]
      (int_of_float (*. age 7.0)))
    )

(type person {:name string :age int})

(external log (=> [int] unit) "console.log")

(def sayHello (=> [~name:string] (^ "Hello " name)))
(sayHello ~name="Folks")

(def me {:name "Jared" :age 10})
(def olderMe {...me :age 40})
(def age 20)
(def you {:name "You" :age}) ; punning is fun

(def yourName (:name you)) ; this is simple attribute access `you.name`

; buut you can also use attributes as functions!
; :age in an expression context is transformed to `x => x.age`
(def ages (List.map :age [me olderMe you]))
(def ages [(Dogs.humanAge Dogs.fluff) ...ages])

(def aref (ref "10"))
(<- :contents aref "30")

; of course we need the threading operators
(->> ages
  (List.map string_of_int)
  (String.concat ", ")
  print_endline)

(as-> ages v
  (Belt.List.map v string_of_int)
  (String.concat ", " v)
  (switch v
    "Something" "other thing"
    _ v)
  (print_endline v))

(print_endline ([0] [|"Hello"|]))
(print_endline ("name" (Obj.magic Array.get)))

(def res (switch 3
  4 2
  x (- x 2)))

(def-rec
  isOdd (=> n (if (<= 1 n) (= n 1) (isEven (- n 1))))
  isEven (=> n (if (<= 1 n) (= n 0) (isOdd (- n 1))))
)
2