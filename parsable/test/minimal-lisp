
; ocaml, lisp style

(def words ["Hello world"])

(->> words
  (print_endline (String.concat " " (List.map String.uppercase))))

(type person {:name string :age int})

(def me {:name "Jared" :age 10})
(def olderMe {...me :age 40})
(def age 20)
(def you {:name "You" :age}) ; punning is fun

(def yourName (:name you)) ; this is simple attribute access `you.name`

; buut you can also use attributes as functions!
; :age in an expression context is transformed to `x => x.age`
(def ages (List.map :age [me olderMe you]))

; of course we need the threading operators
(->> ages
  (List.map string_of_int)
  (String.concat ", ")
  print_endline)