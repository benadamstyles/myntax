/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("// Generated by BUCKLESCRIPT VERSION 1.0.1 , PLEASE EDIT WITH CARE\n'use strict';\n\nvar GrammarGrammar   = __webpack_require__(29);\nvar Block            = __webpack_require__(1);\nvar Curry            = __webpack_require__(2);\nvar PrettyPrint      = __webpack_require__(30);\nvar Runtime          = __webpack_require__(31);\nvar GrammarOfGrammar = __webpack_require__(48);\n\n\nvar setupComm = function(fn) {\n  onmessage = evt => fn(evt.data);\n  return data => postMessage(data);\n};\n\n;\n\nvar grammarText = [\"\"];\n\nvar inputText = [\"\"];\n\nvar grammar = [/* None */0];\n\nvar sendMessage = [function () {\n    return /* () */0;\n  }];\n\nvar inputResult = [/* None */0];\n\nfunction parseGrammar(text, sendMessage) {\n  var start = performance.now();\n  var match = Runtime.parse(GrammarGrammar.grammar, \"Start\", text);\n  if (match.tag) {\n    Curry._1(sendMessage, /* GrammarBad */Block.__(1, [match[1]]));\n    return /* None */0;\n  }\n  else {\n    var mid = performance.now();\n    var newGrammar = GrammarOfGrammar.convert(match[0]);\n    Curry._1(sendMessage, /* GrammarGood */Block.__(0, [\n            mid - start,\n            performance.now() - mid\n          ]));\n    return /* Some */[newGrammar];\n  }\n}\n\nfunction parseInput(_, text, grammar, sendMessage) {\n  var start = performance.now();\n  var match = Runtime.parse(grammar, \"Start\", text);\n  if (match.tag) {\n    inputResult[0] = /* None */0;\n    return Curry._1(sendMessage, /* InputBad */Block.__(4, [match[1]]));\n  }\n  else {\n    var result = match[0];\n    Curry._1(sendMessage, /* InputGood */Block.__(2, [\n            result,\n            performance.now() - start\n          ]));\n    inputResult[0] = /* Some */[result];\n    return /* () */0;\n  }\n}\n\nfunction onMessage(message) {\n  if (message) {\n    var match = message[0];\n    var newInput = match[1];\n    var newGrammar = match[0];\n    if (newGrammar !== grammarText[0]) {\n      grammarText[0] = newGrammar;\n      var match$1 = parseGrammar(newGrammar, sendMessage[0]);\n      if (match$1) {\n        var made = match$1[0];\n        grammar[0] = /* Some */[made];\n        var match$2 = inputResult[0];\n        if (match$2) {\n          var match$3 = PrettyPrint.toString(/* None */0, made, match$2[0]);\n          if (match$3) {\n            return Curry._1(sendMessage[0], /* InputPretty */Block.__(3, [\n                          match$3[0],\n                          0.0\n                        ]));\n          }\n          else {\n            return /* () */0;\n          }\n        }\n        else {\n          return parseInput(/* true */1, newInput, made, sendMessage[0]);\n        }\n      }\n      else {\n        return /* () */0;\n      }\n    }\n    else if (newInput !== inputText[0]) {\n      inputText[0] = newInput;\n      var match$4 = grammar[0];\n      if (match$4) {\n        parseInput(/* false */0, newInput, match$4[0], sendMessage[0]);\n        return /* () */0;\n      }\n      else {\n        return /* () */0;\n      }\n    }\n    else {\n      return 0;\n    }\n  }\n  else {\n    var match$5 = grammar[0];\n    var match$6 = inputResult[0];\n    if (match$5) {\n      if (match$6) {\n        var match$7 = PrettyPrint.toString(/* None */0, match$5[0], match$6[0]);\n        if (match$7) {\n          return Curry._1(sendMessage[0], /* InputPretty */Block.__(3, [\n                        match$7[0],\n                        0.0\n                      ]));\n        }\n        else {\n          return /* () */0;\n        }\n      }\n      else {\n        return /* () */0;\n      }\n    }\n    else {\n      return /* () */0;\n    }\n  }\n}\n\nsendMessage[0] = setupComm(onMessage);\n\nexports.grammarText  = grammarText;\nexports.inputText    = inputText;\nexports.grammar      = grammar;\nexports.sendMessage  = sendMessage;\nexports.inputResult  = inputResult;\nexports.parseGrammar = parseGrammar;\nexports.parseInput   = parseInput;\nexports.onMessage    = onMessage;\n/*  Not a pure module */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./bs_build/worker.js\n ** module id = 0\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./bs_build/worker.js?");

/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("'use strict';\n\n\nfunction __(tag, block) {\n  block.tag = tag;\n  return block;\n}\n\nexports.__ = __;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/block.js\n ** module id = 1\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/block.js?");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_oo    = __webpack_require__(3);\nvar Caml_array = __webpack_require__(5);\n\nfunction app(_f, _args) {\n  while(true) {\n    var args = _args;\n    var f = _f;\n    var arity = f.length;\n    var arity$1 = arity ? arity : 1;\n    var len = args.length;\n    var d = arity$1 - len | 0;\n    if (d) {\n      if (d < 0) {\n        _args = Caml_array.caml_array_sub(args, arity$1, -d);\n        _f = f.apply(null, Caml_array.caml_array_sub(args, 0, arity$1));\n        continue ;\n        \n      }\n      else {\n        return (function(f,args){\n        return function (x) {\n          return app(f, args.concat(/* array */[x]));\n        }\n        }(f,args));\n      }\n    }\n    else {\n      return f.apply(null, args);\n    }\n  };\n}\n\nfunction js(label, cacheid, obj, args) {\n  var meth = Caml_oo.caml_get_public_method(obj, label, cacheid);\n  return app(meth, args);\n}\n\nfunction curry_1(o, a0, arity) {\n  if (arity > 7 || arity < 0) {\n    return app(o, /* array */[a0]);\n  }\n  else {\n    switch (arity) {\n      case 0 : \n      case 1 : \n          return o(a0);\n      case 2 : \n          return function (param) {\n            return o(a0, param);\n          };\n      case 3 : \n          return function (param, param$1) {\n            return o(a0, param, param$1);\n          };\n      case 4 : \n          return function (param, param$1, param$2) {\n            return o(a0, param, param$1, param$2);\n          };\n      case 5 : \n          return function (param, param$1, param$2, param$3) {\n            return o(a0, param, param$1, param$2, param$3);\n          };\n      case 6 : \n          return function (param, param$1, param$2, param$3, param$4) {\n            return o(a0, param, param$1, param$2, param$3, param$4);\n          };\n      case 7 : \n          return function (param, param$1, param$2, param$3, param$4, param$5) {\n            return o(a0, param, param$1, param$2, param$3, param$4, param$5);\n          };\n      \n    }\n  }\n}\n\nfunction _1(o, a0) {\n  var arity = o.length;\n  if (arity === 1) {\n    return o(a0);\n  }\n  else {\n    return curry_1(o, a0, arity);\n  }\n}\n\nfunction js1(label, cacheid, a0) {\n  return _1(Caml_oo.caml_get_public_method(a0, label, cacheid), a0);\n}\n\nfunction __1(o) {\n  var arity = o.length;\n  if (arity === 1) {\n    return o;\n  }\n  else {\n    return function (a0) {\n      return _1(o, a0);\n    };\n  }\n}\n\nfunction curry_2(o, a0, a1, arity) {\n  if (arity > 7 || arity < 0) {\n    return app(o, /* array */[\n                a0,\n                a1\n              ]);\n  }\n  else {\n    switch (arity) {\n      case 0 : \n      case 1 : \n          return app(o(a0), /* array */[a1]);\n      case 2 : \n          return o(a0, a1);\n      case 3 : \n          return function (param) {\n            return o(a0, a1, param);\n          };\n      case 4 : \n          return function (param, param$1) {\n            return o(a0, a1, param, param$1);\n          };\n      case 5 : \n          return function (param, param$1, param$2) {\n            return o(a0, a1, param, param$1, param$2);\n          };\n      case 6 : \n          return function (param, param$1, param$2, param$3) {\n            return o(a0, a1, param, param$1, param$2, param$3);\n          };\n      case 7 : \n          return function (param, param$1, param$2, param$3, param$4) {\n            return o(a0, a1, param, param$1, param$2, param$3, param$4);\n          };\n      \n    }\n  }\n}\n\nfunction _2(o, a0, a1) {\n  var arity = o.length;\n  if (arity === 2) {\n    return o(a0, a1);\n  }\n  else {\n    return curry_2(o, a0, a1, arity);\n  }\n}\n\nfunction js2(label, cacheid, a0, a1) {\n  return _2(Caml_oo.caml_get_public_method(a0, label, cacheid), a0, a1);\n}\n\nfunction __2(o) {\n  var arity = o.length;\n  if (arity === 2) {\n    return o;\n  }\n  else {\n    return function (a0, a1) {\n      return _2(o, a0, a1);\n    };\n  }\n}\n\nfunction curry_3(o, a0, a1, a2, arity) {\n  if (arity > 7 || arity < 0) {\n    return app(o, /* array */[\n                a0,\n                a1,\n                a2\n              ]);\n  }\n  else {\n    switch (arity) {\n      case 0 : \n      case 1 : \n          return app(o(a0), /* array */[\n                      a1,\n                      a2\n                    ]);\n      case 2 : \n          return app(o(a0, a1), /* array */[a2]);\n      case 3 : \n          return o(a0, a1, a2);\n      case 4 : \n          return function (param) {\n            return o(a0, a1, a2, param);\n          };\n      case 5 : \n          return function (param, param$1) {\n            return o(a0, a1, a2, param, param$1);\n          };\n      case 6 : \n          return function (param, param$1, param$2) {\n            return o(a0, a1, a2, param, param$1, param$2);\n          };\n      case 7 : \n          return function (param, param$1, param$2, param$3) {\n            return o(a0, a1, a2, param, param$1, param$2, param$3);\n          };\n      \n    }\n  }\n}\n\nfunction _3(o, a0, a1, a2) {\n  var arity = o.length;\n  if (arity === 3) {\n    return o(a0, a1, a2);\n  }\n  else {\n    return curry_3(o, a0, a1, a2, arity);\n  }\n}\n\nfunction js3(label, cacheid, a0, a1, a2) {\n  return _3(Caml_oo.caml_get_public_method(a0, label, cacheid), a0, a1, a2);\n}\n\nfunction __3(o) {\n  var arity = o.length;\n  if (arity === 3) {\n    return o;\n  }\n  else {\n    return function (a0, a1, a2) {\n      return _3(o, a0, a1, a2);\n    };\n  }\n}\n\nfunction curry_4(o, a0, a1, a2, a3, arity) {\n  if (arity > 7 || arity < 0) {\n    return app(o, /* array */[\n                a0,\n                a1,\n                a2,\n                a3\n              ]);\n  }\n  else {\n    switch (arity) {\n      case 0 : \n      case 1 : \n          return app(o(a0), /* array */[\n                      a1,\n                      a2,\n                      a3\n                    ]);\n      case 2 : \n          return app(o(a0, a1), /* array */[\n                      a2,\n                      a3\n                    ]);\n      case 3 : \n          return app(o(a0, a1, a2), /* array */[a3]);\n      case 4 : \n          return o(a0, a1, a2, a3);\n      case 5 : \n          return function (param) {\n            return o(a0, a1, a2, a3, param);\n          };\n      case 6 : \n          return function (param, param$1) {\n            return o(a0, a1, a2, a3, param, param$1);\n          };\n      case 7 : \n          return function (param, param$1, param$2) {\n            return o(a0, a1, a2, a3, param, param$1, param$2);\n          };\n      \n    }\n  }\n}\n\nfunction _4(o, a0, a1, a2, a3) {\n  var arity = o.length;\n  if (arity === 4) {\n    return o(a0, a1, a2, a3);\n  }\n  else {\n    return curry_4(o, a0, a1, a2, a3, arity);\n  }\n}\n\nfunction js4(label, cacheid, a0, a1, a2, a3) {\n  return _4(Caml_oo.caml_get_public_method(a0, label, cacheid), a0, a1, a2, a3);\n}\n\nfunction __4(o) {\n  var arity = o.length;\n  if (arity === 4) {\n    return o;\n  }\n  else {\n    return function (a0, a1, a2, a3) {\n      return _4(o, a0, a1, a2, a3);\n    };\n  }\n}\n\nfunction curry_5(o, a0, a1, a2, a3, a4, arity) {\n  if (arity > 7 || arity < 0) {\n    return app(o, /* array */[\n                a0,\n                a1,\n                a2,\n                a3,\n                a4\n              ]);\n  }\n  else {\n    switch (arity) {\n      case 0 : \n      case 1 : \n          return app(o(a0), /* array */[\n                      a1,\n                      a2,\n                      a3,\n                      a4\n                    ]);\n      case 2 : \n          return app(o(a0, a1), /* array */[\n                      a2,\n                      a3,\n                      a4\n                    ]);\n      case 3 : \n          return app(o(a0, a1, a2), /* array */[\n                      a3,\n                      a4\n                    ]);\n      case 4 : \n          return app(o(a0, a1, a2, a3), /* array */[a4]);\n      case 5 : \n          return o(a0, a1, a2, a3, a4);\n      case 6 : \n          return function (param) {\n            return o(a0, a1, a2, a3, a4, param);\n          };\n      case 7 : \n          return function (param, param$1) {\n            return o(a0, a1, a2, a3, a4, param, param$1);\n          };\n      \n    }\n  }\n}\n\nfunction _5(o, a0, a1, a2, a3, a4) {\n  var arity = o.length;\n  if (arity === 5) {\n    return o(a0, a1, a2, a3, a4);\n  }\n  else {\n    return curry_5(o, a0, a1, a2, a3, a4, arity);\n  }\n}\n\nfunction js5(label, cacheid, a0, a1, a2, a3, a4) {\n  return _5(Caml_oo.caml_get_public_method(a0, label, cacheid), a0, a1, a2, a3, a4);\n}\n\nfunction __5(o) {\n  var arity = o.length;\n  if (arity === 5) {\n    return o;\n  }\n  else {\n    return function (a0, a1, a2, a3, a4) {\n      return _5(o, a0, a1, a2, a3, a4);\n    };\n  }\n}\n\nfunction curry_6(o, a0, a1, a2, a3, a4, a5, arity) {\n  if (arity > 7 || arity < 0) {\n    return app(o, /* array */[\n                a0,\n                a1,\n                a2,\n                a3,\n                a4,\n                a5\n              ]);\n  }\n  else {\n    switch (arity) {\n      case 0 : \n      case 1 : \n          return app(o(a0), /* array */[\n                      a1,\n                      a2,\n                      a3,\n                      a4,\n                      a5\n                    ]);\n      case 2 : \n          return app(o(a0, a1), /* array */[\n                      a2,\n                      a3,\n                      a4,\n                      a5\n                    ]);\n      case 3 : \n          return app(o(a0, a1, a2), /* array */[\n                      a3,\n                      a4,\n                      a5\n                    ]);\n      case 4 : \n          return app(o(a0, a1, a2, a3), /* array */[\n                      a4,\n                      a5\n                    ]);\n      case 5 : \n          return app(o(a0, a1, a2, a3, a4), /* array */[a5]);\n      case 6 : \n          return o(a0, a1, a2, a3, a4, a5);\n      case 7 : \n          return function (param) {\n            return o(a0, a1, a2, a3, a4, a5, param);\n          };\n      \n    }\n  }\n}\n\nfunction _6(o, a0, a1, a2, a3, a4, a5) {\n  var arity = o.length;\n  if (arity === 6) {\n    return o(a0, a1, a2, a3, a4, a5);\n  }\n  else {\n    return curry_6(o, a0, a1, a2, a3, a4, a5, arity);\n  }\n}\n\nfunction js6(label, cacheid, a0, a1, a2, a3, a4, a5) {\n  return _6(Caml_oo.caml_get_public_method(a0, label, cacheid), a0, a1, a2, a3, a4, a5);\n}\n\nfunction __6(o) {\n  var arity = o.length;\n  if (arity === 6) {\n    return o;\n  }\n  else {\n    return function (a0, a1, a2, a3, a4, a5) {\n      return _6(o, a0, a1, a2, a3, a4, a5);\n    };\n  }\n}\n\nfunction curry_7(o, a0, a1, a2, a3, a4, a5, a6, arity) {\n  if (arity > 7 || arity < 0) {\n    return app(o, /* array */[\n                a0,\n                a1,\n                a2,\n                a3,\n                a4,\n                a5,\n                a6\n              ]);\n  }\n  else {\n    switch (arity) {\n      case 0 : \n      case 1 : \n          return app(o(a0), /* array */[\n                      a1,\n                      a2,\n                      a3,\n                      a4,\n                      a5,\n                      a6\n                    ]);\n      case 2 : \n          return app(o(a0, a1), /* array */[\n                      a2,\n                      a3,\n                      a4,\n                      a5,\n                      a6\n                    ]);\n      case 3 : \n          return app(o(a0, a1, a2), /* array */[\n                      a3,\n                      a4,\n                      a5,\n                      a6\n                    ]);\n      case 4 : \n          return app(o(a0, a1, a2, a3), /* array */[\n                      a4,\n                      a5,\n                      a6\n                    ]);\n      case 5 : \n          return app(o(a0, a1, a2, a3, a4), /* array */[\n                      a5,\n                      a6\n                    ]);\n      case 6 : \n          return app(o(a0, a1, a2, a3, a4, a5), /* array */[a6]);\n      case 7 : \n          return o(a0, a1, a2, a3, a4, a5, a6);\n      \n    }\n  }\n}\n\nfunction _7(o, a0, a1, a2, a3, a4, a5, a6) {\n  var arity = o.length;\n  if (arity === 7) {\n    return o(a0, a1, a2, a3, a4, a5, a6);\n  }\n  else {\n    return curry_7(o, a0, a1, a2, a3, a4, a5, a6, arity);\n  }\n}\n\nfunction js7(label, cacheid, a0, a1, a2, a3, a4, a5, a6) {\n  return _7(Caml_oo.caml_get_public_method(a0, label, cacheid), a0, a1, a2, a3, a4, a5, a6);\n}\n\nfunction __7(o) {\n  var arity = o.length;\n  if (arity === 7) {\n    return o;\n  }\n  else {\n    return function (a0, a1, a2, a3, a4, a5, a6) {\n      return _7(o, a0, a1, a2, a3, a4, a5, a6);\n    };\n  }\n}\n\nfunction curry_8(o, a0, a1, a2, a3, a4, a5, a6, a7, arity) {\n  if (arity > 7 || arity < 0) {\n    return app(o, /* array */[\n                a0,\n                a1,\n                a2,\n                a3,\n                a4,\n                a5,\n                a6,\n                a7\n              ]);\n  }\n  else {\n    switch (arity) {\n      case 0 : \n      case 1 : \n          return app(o(a0), /* array */[\n                      a1,\n                      a2,\n                      a3,\n                      a4,\n                      a5,\n                      a6,\n                      a7\n                    ]);\n      case 2 : \n          return app(o(a0, a1), /* array */[\n                      a2,\n                      a3,\n                      a4,\n                      a5,\n                      a6,\n                      a7\n                    ]);\n      case 3 : \n          return app(o(a0, a1, a2), /* array */[\n                      a3,\n                      a4,\n                      a5,\n                      a6,\n                      a7\n                    ]);\n      case 4 : \n          return app(o(a0, a1, a2, a3), /* array */[\n                      a4,\n                      a5,\n                      a6,\n                      a7\n                    ]);\n      case 5 : \n          return app(o(a0, a1, a2, a3, a4), /* array */[\n                      a5,\n                      a6,\n                      a7\n                    ]);\n      case 6 : \n          return app(o(a0, a1, a2, a3, a4, a5), /* array */[\n                      a6,\n                      a7\n                    ]);\n      case 7 : \n          return app(o(a0, a1, a2, a3, a4, a5, a6), /* array */[a7]);\n      \n    }\n  }\n}\n\nfunction _8(o, a0, a1, a2, a3, a4, a5, a6, a7) {\n  var arity = o.length;\n  if (arity === 8) {\n    return o(a0, a1, a2, a3, a4, a5, a6, a7);\n  }\n  else {\n    return curry_8(o, a0, a1, a2, a3, a4, a5, a6, a7, arity);\n  }\n}\n\nfunction js8(label, cacheid, a0, a1, a2, a3, a4, a5, a6, a7) {\n  return _8(Caml_oo.caml_get_public_method(a0, label, cacheid), a0, a1, a2, a3, a4, a5, a6, a7);\n}\n\nfunction __8(o) {\n  var arity = o.length;\n  if (arity === 8) {\n    return o;\n  }\n  else {\n    return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n      return _8(o, a0, a1, a2, a3, a4, a5, a6, a7);\n    };\n  }\n}\n\nexports.app     = app;\nexports.js      = js;\nexports.curry_1 = curry_1;\nexports._1      = _1;\nexports.js1     = js1;\nexports.__1     = __1;\nexports.curry_2 = curry_2;\nexports._2      = _2;\nexports.js2     = js2;\nexports.__2     = __2;\nexports.curry_3 = curry_3;\nexports._3      = _3;\nexports.js3     = js3;\nexports.__3     = __3;\nexports.curry_4 = curry_4;\nexports._4      = _4;\nexports.js4     = js4;\nexports.__4     = __4;\nexports.curry_5 = curry_5;\nexports._5      = _5;\nexports.js5     = js5;\nexports.__5     = __5;\nexports.curry_6 = curry_6;\nexports._6      = _6;\nexports.js6     = js6;\nexports.__6     = __6;\nexports.curry_7 = curry_7;\nexports._7      = _7;\nexports.js7     = js7;\nexports.__7     = __7;\nexports.curry_8 = curry_8;\nexports._8      = _8;\nexports.js8     = js8;\nexports.__8     = __8;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/curry.js\n ** module id = 2\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/curry.js?");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Caml_array              = __webpack_require__(5);\n\nvar caml_methods_cache = Caml_array.caml_make_vect(1000, 0);\n\nfunction caml_get_public_method(obj, tag, cacheid) {\n  var meths = obj[0];\n  var offs = caml_methods_cache[cacheid];\n  if (meths[offs] === tag) {\n    return meths[offs - 1 | 0];\n  }\n  else {\n    var aux = function (_i) {\n      while(true) {\n        var i = _i;\n        if (i < 3) {\n          throw [\n                Caml_builtin_exceptions.assert_failure,\n                [\n                  \"caml_oo.ml\",\n                  54,\n                  20\n                ]\n              ];\n        }\n        else if (meths[i] === tag) {\n          caml_methods_cache[cacheid] = i;\n          return i;\n        }\n        else {\n          _i = i - 2 | 0;\n          continue ;\n          \n        }\n      };\n    };\n    return meths[aux((meths[0] << 1) + 1 | 0) - 1 | 0];\n  }\n}\n\nexports.caml_get_public_method = caml_get_public_method;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/caml_oo.js\n ** module id = 3\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/caml_oo.js?");

/***/ },
/* 4 */
/***/ function(module, exports) {

	eval("'use strict';\n\n\nvar out_of_memory = /* tuple */[\n  \"Out_of_memory\",\n  0\n];\n\nvar sys_error = /* tuple */[\n  \"Sys_error\",\n  -1\n];\n\nvar failure = /* tuple */[\n  \"Failure\",\n  -2\n];\n\nvar invalid_argument = /* tuple */[\n  \"Invalid_argument\",\n  -3\n];\n\nvar end_of_file = /* tuple */[\n  \"End_of_file\",\n  -4\n];\n\nvar division_by_zero = /* tuple */[\n  \"Division_by_zero\",\n  -5\n];\n\nvar not_found = /* tuple */[\n  \"Not_found\",\n  -6\n];\n\nvar match_failure = /* tuple */[\n  \"Match_failure\",\n  -7\n];\n\nvar stack_overflow = /* tuple */[\n  \"Stack_overflow\",\n  -8\n];\n\nvar sys_blocked_io = /* tuple */[\n  \"Sys_blocked_io\",\n  -9\n];\n\nvar assert_failure = /* tuple */[\n  \"Assert_failure\",\n  -10\n];\n\nvar undefined_recursive_module = /* tuple */[\n  \"Undefined_recursive_module\",\n  -11\n];\n\nexports.out_of_memory              = out_of_memory;\nexports.sys_error                  = sys_error;\nexports.failure                    = failure;\nexports.invalid_argument           = invalid_argument;\nexports.end_of_file                = end_of_file;\nexports.division_by_zero           = division_by_zero;\nexports.not_found                  = not_found;\nexports.match_failure              = match_failure;\nexports.stack_overflow             = stack_overflow;\nexports.sys_blocked_io             = sys_blocked_io;\nexports.assert_failure             = assert_failure;\nexports.undefined_recursive_module = undefined_recursive_module;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/caml_builtin_exceptions.js\n ** module id = 4\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/caml_builtin_exceptions.js?");

/***/ },
/* 5 */
/***/ function(module, exports) {

	eval("'use strict';\n\n\nfunction caml_array_sub(x, offset, len) {\n  var result = new Array(len);\n  var j = 0;\n  var i = offset;\n  while(j < len) {\n    result[j] = x[i];\n    j = j + 1 | 0;\n    i = i + 1 | 0;\n  };\n  return result;\n}\n\nfunction len(_acc, _l) {\n  while(true) {\n    var l = _l;\n    var acc = _acc;\n    if (l) {\n      _l = l[1];\n      _acc = l[0].length + acc | 0;\n      continue ;\n      \n    }\n    else {\n      return acc;\n    }\n  };\n}\n\nfunction fill(arr, _i, _l) {\n  while(true) {\n    var l = _l;\n    var i = _i;\n    if (l) {\n      var x = l[0];\n      var l$1 = x.length;\n      var k = i;\n      var j = 0;\n      while(j < l$1) {\n        arr[k] = x[j];\n        k = k + 1 | 0;\n        j = j + 1 | 0;\n      };\n      _l = l[1];\n      _i = k;\n      continue ;\n      \n    }\n    else {\n      return /* () */0;\n    }\n  };\n}\n\nfunction caml_array_concat(l) {\n  var v = len(0, l);\n  var result = new Array(v);\n  fill(result, 0, l);\n  return result;\n}\n\nfunction caml_make_vect(len, init) {\n  var b = new Array(len);\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    b[i] = init;\n  }\n  return b;\n}\n\nfunction caml_array_blit(a1, i1, a2, i2, len) {\n  if (i2 <= i1) {\n    for(var j = 0 ,j_finish = len - 1 | 0; j <= j_finish; ++j){\n      a2[j + i2 | 0] = a1[j + i1 | 0];\n    }\n    return /* () */0;\n  }\n  else {\n    for(var j$1 = len - 1 | 0; j$1 >= 0; --j$1){\n      a2[j$1 + i2 | 0] = a1[j$1 + i1 | 0];\n    }\n    return /* () */0;\n  }\n}\n\nexports.caml_array_sub    = caml_array_sub;\nexports.caml_array_concat = caml_array_concat;\nexports.caml_make_vect    = caml_make_vect;\nexports.caml_array_blit   = caml_array_blit;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/caml_array.js\n ** module id = 5\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/caml_array.js?");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Pervasives         = __webpack_require__(7);\nvar Curry              = __webpack_require__(2);\nvar Buffer             = __webpack_require__(18);\nvar CamlinternalFormat = __webpack_require__(24);\n\nfunction kfprintf(k, o, param) {\n  return CamlinternalFormat.make_printf(function (o, acc) {\n              CamlinternalFormat.output_acc(o, acc);\n              return Curry._1(k, o);\n            }, o, /* End_of_acc */0, param[0]);\n}\n\nfunction kbprintf(k, b, param) {\n  return CamlinternalFormat.make_printf(function (b, acc) {\n              CamlinternalFormat.bufput_acc(b, acc);\n              return Curry._1(k, b);\n            }, b, /* End_of_acc */0, param[0]);\n}\n\nfunction ikfprintf(k, oc, param) {\n  return CamlinternalFormat.make_printf(function (oc, _) {\n              return Curry._1(k, oc);\n            }, oc, /* End_of_acc */0, param[0]);\n}\n\nfunction fprintf(oc, fmt) {\n  return kfprintf(function () {\n              return /* () */0;\n            }, oc, fmt);\n}\n\nfunction bprintf(b, fmt) {\n  return kbprintf(function () {\n              return /* () */0;\n            }, b, fmt);\n}\n\nfunction ifprintf(oc, fmt) {\n  return ikfprintf(function () {\n              return /* () */0;\n            }, oc, fmt);\n}\n\nfunction printf(fmt) {\n  return fprintf(Pervasives.stdout, fmt);\n}\n\nfunction eprintf(fmt) {\n  return fprintf(Pervasives.stderr, fmt);\n}\n\nfunction ksprintf(k, param) {\n  var k$prime = function (_, acc) {\n    var buf = Buffer.create(64);\n    CamlinternalFormat.strput_acc(buf, acc);\n    return Curry._1(k, Buffer.contents(buf));\n  };\n  return CamlinternalFormat.make_printf(k$prime, /* () */0, /* End_of_acc */0, param[0]);\n}\n\nfunction sprintf(fmt) {\n  return ksprintf(function (s) {\n              return s;\n            }, fmt);\n}\n\nvar kprintf = ksprintf;\n\nexports.fprintf   = fprintf;\nexports.printf    = printf;\nexports.eprintf   = eprintf;\nexports.sprintf   = sprintf;\nexports.bprintf   = bprintf;\nexports.ifprintf  = ifprintf;\nexports.kfprintf  = kfprintf;\nexports.ikfprintf = ikfprintf;\nexports.ksprintf  = ksprintf;\nexports.kbprintf  = kbprintf;\nexports.kprintf   = kprintf;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/printf.js\n ** module id = 6\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/printf.js?");

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_builtin_exceptions  = __webpack_require__(4);\nvar Caml_obj                 = __webpack_require__(8);\nvar Caml_io                  = __webpack_require__(9);\nvar Caml_exceptions          = __webpack_require__(11);\nvar Caml_format              = __webpack_require__(12);\nvar Curry                    = __webpack_require__(2);\nvar CamlinternalFormatBasics = __webpack_require__(17);\nvar Caml_string              = __webpack_require__(16);\n\nfunction failwith(s) {\n  throw [\n        Caml_builtin_exceptions.failure,\n        s\n      ];\n}\n\nfunction invalid_arg(s) {\n  throw [\n        Caml_builtin_exceptions.invalid_argument,\n        s\n      ];\n}\n\nvar Exit = Caml_exceptions.create(\"Pervasives.Exit\");\n\nfunction min(x, y) {\n  if (Caml_obj.caml_lessequal(x, y)) {\n    return x;\n  }\n  else {\n    return y;\n  }\n}\n\nfunction max(x, y) {\n  if (Caml_obj.caml_greaterequal(x, y)) {\n    return x;\n  }\n  else {\n    return y;\n  }\n}\n\nfunction abs(x) {\n  if (x >= 0) {\n    return x;\n  }\n  else {\n    return -x;\n  }\n}\n\nfunction lnot(x) {\n  return x ^ -1;\n}\n\nvar min_int = -2147483648;\n\nfunction $caret(a, b) {\n  return a + b;\n}\n\nfunction char_of_int(n) {\n  if (n < 0 || n > 255) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"char_of_int\"\n        ];\n  }\n  else {\n    return n;\n  }\n}\n\nfunction string_of_bool(b) {\n  if (b) {\n    return \"true\";\n  }\n  else {\n    return \"false\";\n  }\n}\n\nfunction bool_of_string(param) {\n  switch (param) {\n    case \"false\" : \n        return /* false */0;\n    case \"true\" : \n        return /* true */1;\n    default:\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"bool_of_string\"\n          ];\n  }\n}\n\nfunction string_of_int(param) {\n  return \"\" + param;\n}\n\nfunction valid_float_lexem(s) {\n  var l = s.length;\n  var _i = 0;\n  while(true) {\n    var i = _i;\n    if (i >= l) {\n      return $caret(s, \".\");\n    }\n    else {\n      var match = Caml_string.get(s, i);\n      if (match >= 48) {\n        if (match >= 58) {\n          return s;\n        }\n        else {\n          _i = i + 1 | 0;\n          continue ;\n          \n        }\n      }\n      else if (match !== 45) {\n        return s;\n      }\n      else {\n        _i = i + 1 | 0;\n        continue ;\n        \n      }\n    }\n  };\n}\n\nfunction string_of_float(f) {\n  return valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f));\n}\n\nfunction $at(l1, l2) {\n  if (l1) {\n    return /* :: */[\n            l1[0],\n            $at(l1[1], l2)\n          ];\n  }\n  else {\n    return l2;\n  }\n}\n\nvar stdin = Caml_io.stdin;\n\nvar stdout = Caml_io.stdout;\n\nvar stderr = Caml_io.stderr;\n\nfunction open_out_gen(_, _$1, _$2) {\n  return Caml_io.caml_ml_open_descriptor_out(function () {\n                throw \"caml_sys_open not implemented by bucklescript yet\\n\";\n              }());\n}\n\nfunction open_out(name) {\n  return open_out_gen(/* :: */[\n              /* Open_wronly */1,\n              /* :: */[\n                /* Open_creat */3,\n                /* :: */[\n                  /* Open_trunc */4,\n                  /* :: */[\n                    /* Open_text */7,\n                    /* [] */0\n                  ]\n                ]\n              ]\n            ], 438, name);\n}\n\nfunction open_out_bin(name) {\n  return open_out_gen(/* :: */[\n              /* Open_wronly */1,\n              /* :: */[\n                /* Open_creat */3,\n                /* :: */[\n                  /* Open_trunc */4,\n                  /* :: */[\n                    /* Open_binary */6,\n                    /* [] */0\n                  ]\n                ]\n              ]\n            ], 438, name);\n}\n\nfunction flush_all() {\n  var _param = Caml_io.caml_ml_out_channels_list(/* () */0);\n  while(true) {\n    var param = _param;\n    if (param) {\n      try {\n        Caml_io.caml_ml_flush(param[0]);\n      }\n      catch (exn){\n        \n      }\n      _param = param[1];\n      continue ;\n      \n    }\n    else {\n      return /* () */0;\n    }\n  };\n}\n\nfunction output_bytes(oc, s) {\n  return Caml_io.caml_ml_output(oc, s, 0, s.length);\n}\n\nfunction output_string(oc, s) {\n  return Caml_io.caml_ml_output(oc, s, 0, s.length);\n}\n\nfunction output(oc, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"output\"\n        ];\n  }\n  else {\n    return Caml_io.caml_ml_output(oc, s, ofs, len);\n  }\n}\n\nfunction output_substring(oc, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"output_substring\"\n        ];\n  }\n  else {\n    return Caml_io.caml_ml_output(oc, s, ofs, len);\n  }\n}\n\nfunction output_value(_, _$1) {\n  return function () {\n            throw \"caml_output_value not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction close_out(oc) {\n  Caml_io.caml_ml_flush(oc);\n  return function () {\n            throw \"caml_ml_close_channel not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction close_out_noerr(oc) {\n  try {\n    Caml_io.caml_ml_flush(oc);\n  }\n  catch (exn){\n    \n  }\n  try {\n    return function () {\n              throw \"caml_ml_close_channel not implemented by bucklescript yet\\n\";\n            }();\n  }\n  catch (exn$1){\n    return /* () */0;\n  }\n}\n\nfunction open_in_gen(_, _$1, _$2) {\n  return Caml_io.caml_ml_open_descriptor_in(function () {\n                throw \"caml_sys_open not implemented by bucklescript yet\\n\";\n              }());\n}\n\nfunction open_in(name) {\n  return open_in_gen(/* :: */[\n              /* Open_rdonly */0,\n              /* :: */[\n                /* Open_text */7,\n                /* [] */0\n              ]\n            ], 0, name);\n}\n\nfunction open_in_bin(name) {\n  return open_in_gen(/* :: */[\n              /* Open_rdonly */0,\n              /* :: */[\n                /* Open_binary */6,\n                /* [] */0\n              ]\n            ], 0, name);\n}\n\nfunction input(_, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"input\"\n        ];\n  }\n  else {\n    return function () {\n              throw \"caml_ml_input not implemented by bucklescript yet\\n\";\n            }();\n  }\n}\n\nfunction unsafe_really_input(_, _$1, _ofs, _len) {\n  while(true) {\n    var len = _len;\n    var ofs = _ofs;\n    if (len <= 0) {\n      return /* () */0;\n    }\n    else {\n      var r = function () {\n          throw \"caml_ml_input not implemented by bucklescript yet\\n\";\n        }();\n      if (r) {\n        _len = len - r | 0;\n        _ofs = ofs + r | 0;\n        continue ;\n        \n      }\n      else {\n        throw Caml_builtin_exceptions.end_of_file;\n      }\n    }\n  };\n}\n\nfunction really_input(ic, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"really_input\"\n        ];\n  }\n  else {\n    return unsafe_really_input(ic, s, ofs, len);\n  }\n}\n\nfunction really_input_string(ic, len) {\n  var s = Caml_string.caml_create_string(len);\n  really_input(ic, s, 0, len);\n  return Caml_string.bytes_to_string(s);\n}\n\nfunction input_line(chan) {\n  var build_result = function (buf, _pos, _param) {\n    while(true) {\n      var param = _param;\n      var pos = _pos;\n      if (param) {\n        var hd = param[0];\n        var len = hd.length;\n        Caml_string.caml_blit_bytes(hd, 0, buf, pos - len | 0, len);\n        _param = param[1];\n        _pos = pos - len | 0;\n        continue ;\n        \n      }\n      else {\n        return buf;\n      }\n    };\n  };\n  var scan = function (_accu, _len) {\n    while(true) {\n      var len = _len;\n      var accu = _accu;\n      var n = function () {\n          throw \"caml_ml_input_scan_line not implemented by bucklescript yet\\n\";\n        }();\n      if (n) {\n        if (n > 0) {\n          var res = Caml_string.caml_create_string(n - 1 | 0);\n          (function () {\n                throw \"caml_ml_input not implemented by bucklescript yet\\n\";\n              }());\n          Caml_io.caml_ml_input_char(chan);\n          if (accu) {\n            var len$1 = (len + n | 0) - 1 | 0;\n            return build_result(Caml_string.caml_create_string(len$1), len$1, /* :: */[\n                        res,\n                        accu\n                      ]);\n          }\n          else {\n            return res;\n          }\n        }\n        else {\n          var beg = Caml_string.caml_create_string(-n);\n          (function () {\n                throw \"caml_ml_input not implemented by bucklescript yet\\n\";\n              }());\n          _len = len - n | 0;\n          _accu = /* :: */[\n            beg,\n            accu\n          ];\n          continue ;\n          \n        }\n      }\n      else if (accu) {\n        return build_result(Caml_string.caml_create_string(len), len, accu);\n      }\n      else {\n        throw Caml_builtin_exceptions.end_of_file;\n      }\n    };\n  };\n  return Caml_string.bytes_to_string(scan(/* [] */0, 0));\n}\n\nfunction close_in_noerr() {\n  try {\n    return function () {\n              throw \"caml_ml_close_channel not implemented by bucklescript yet\\n\";\n            }();\n  }\n  catch (exn){\n    return /* () */0;\n  }\n}\n\nfunction print_char(c) {\n  return Caml_io.caml_ml_output_char(stdout, c);\n}\n\nfunction print_string(s) {\n  return output_string(stdout, s);\n}\n\nfunction print_bytes(s) {\n  return output_bytes(stdout, s);\n}\n\nfunction print_int(i) {\n  return output_string(stdout, \"\" + i);\n}\n\nfunction print_float(f) {\n  return output_string(stdout, valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f)));\n}\n\nfunction print_endline(param) {\n  console.log(param);\n  return 0;\n}\n\nfunction print_newline() {\n  Caml_io.caml_ml_output_char(stdout, /* \"\\n\" */10);\n  return Caml_io.caml_ml_flush(stdout);\n}\n\nfunction prerr_char(c) {\n  return Caml_io.caml_ml_output_char(stderr, c);\n}\n\nfunction prerr_string(s) {\n  return output_string(stderr, s);\n}\n\nfunction prerr_bytes(s) {\n  return output_bytes(stderr, s);\n}\n\nfunction prerr_int(i) {\n  return output_string(stderr, \"\" + i);\n}\n\nfunction prerr_float(f) {\n  return output_string(stderr, valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f)));\n}\n\nfunction prerr_endline(param) {\n  console.error(param);\n  return 0;\n}\n\nfunction prerr_newline() {\n  Caml_io.caml_ml_output_char(stderr, /* \"\\n\" */10);\n  return Caml_io.caml_ml_flush(stderr);\n}\n\nfunction read_line() {\n  Caml_io.caml_ml_flush(stdout);\n  return input_line(stdin);\n}\n\nfunction read_int() {\n  return Caml_format.caml_int_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));\n}\n\nfunction read_float() {\n  return Caml_format.caml_float_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));\n}\n\nfunction string_of_format(param) {\n  return param[1];\n}\n\nfunction $caret$caret(param, param$1) {\n  return /* Format */[\n          CamlinternalFormatBasics.concat_fmt(param[0], param$1[0]),\n          $caret(param[1], $caret(\"%,\", param$1[1]))\n        ];\n}\n\nvar exit_function = [flush_all];\n\nfunction at_exit(f) {\n  var g = exit_function[0];\n  exit_function[0] = function () {\n    Curry._1(f, /* () */0);\n    return Curry._1(g, /* () */0);\n  };\n  return /* () */0;\n}\n\nfunction do_at_exit() {\n  return Curry._1(exit_function[0], /* () */0);\n}\n\nfunction exit() {\n  do_at_exit(/* () */0);\n  return function () {\n            throw \"caml_sys_exit not implemented by bucklescript yet\\n\";\n          }();\n}\n\nvar max_int = 2147483647;\n\nvar infinity = Infinity;\n\nvar neg_infinity = -Infinity;\n\nvar nan = NaN;\n\nvar max_float = Number.MAX_VALUE;\n\nvar min_float = Number.MIN_VALUE;\n\nvar epsilon_float = 2.220446049250313e-16;\n\nvar flush = Caml_io.caml_ml_flush\n\nvar output_char = Caml_io.caml_ml_output_char\n\nvar output_byte = Caml_io.caml_ml_output_char\n\nfunction output_binary_int(_, _$1) {\n  return function () {\n            throw \"caml_ml_output_int not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction seek_out(_, _$1) {\n  return function () {\n            throw \"caml_ml_seek_out not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction pos_out() {\n  return function () {\n            throw \"caml_ml_pos_out not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction out_channel_length() {\n  return function () {\n            throw \"caml_ml_channel_size not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction set_binary_mode_out(_, _$1) {\n  return function () {\n            throw \"caml_ml_set_binary_mode not implemented by bucklescript yet\\n\";\n          }();\n}\n\nvar input_char = Caml_io.caml_ml_input_char\n\nvar input_byte = Caml_io.caml_ml_input_char\n\nfunction input_binary_int() {\n  return function () {\n            throw \"caml_ml_input_int not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction input_value() {\n  return function () {\n            throw \"caml_input_value not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction seek_in(_, _$1) {\n  return function () {\n            throw \"caml_ml_seek_in not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction pos_in() {\n  return function () {\n            throw \"caml_ml_pos_in not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction in_channel_length() {\n  return function () {\n            throw \"caml_ml_channel_size not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction close_in() {\n  return function () {\n            throw \"caml_ml_close_channel not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction set_binary_mode_in(_, _$1) {\n  return function () {\n            throw \"caml_ml_set_binary_mode not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction LargeFile_000(_, _$1) {\n  return function () {\n            throw \"caml_ml_seek_out_64 not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction LargeFile_001() {\n  return function () {\n            throw \"caml_ml_pos_out_64 not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction LargeFile_002() {\n  return function () {\n            throw \"caml_ml_channel_size_64 not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction LargeFile_003(_, _$1) {\n  return function () {\n            throw \"caml_ml_seek_in_64 not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction LargeFile_004() {\n  return function () {\n            throw \"caml_ml_pos_in_64 not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction LargeFile_005() {\n  return function () {\n            throw \"caml_ml_channel_size_64 not implemented by bucklescript yet\\n\";\n          }();\n}\n\nvar LargeFile = [\n  LargeFile_000,\n  LargeFile_001,\n  LargeFile_002,\n  LargeFile_003,\n  LargeFile_004,\n  LargeFile_005\n];\n\nexports.invalid_arg         = invalid_arg;\nexports.failwith            = failwith;\nexports.Exit                = Exit;\nexports.min                 = min;\nexports.max                 = max;\nexports.abs                 = abs;\nexports.max_int             = max_int;\nexports.min_int             = min_int;\nexports.lnot                = lnot;\nexports.infinity            = infinity;\nexports.neg_infinity        = neg_infinity;\nexports.nan                 = nan;\nexports.max_float           = max_float;\nexports.min_float           = min_float;\nexports.epsilon_float       = epsilon_float;\nexports.$caret              = $caret;\nexports.char_of_int         = char_of_int;\nexports.string_of_bool      = string_of_bool;\nexports.bool_of_string      = bool_of_string;\nexports.string_of_int       = string_of_int;\nexports.string_of_float     = string_of_float;\nexports.$at                 = $at;\nexports.stdin               = stdin;\nexports.stdout              = stdout;\nexports.stderr              = stderr;\nexports.print_char          = print_char;\nexports.print_string        = print_string;\nexports.print_bytes         = print_bytes;\nexports.print_int           = print_int;\nexports.print_float         = print_float;\nexports.print_endline       = print_endline;\nexports.print_newline       = print_newline;\nexports.prerr_char          = prerr_char;\nexports.prerr_string        = prerr_string;\nexports.prerr_bytes         = prerr_bytes;\nexports.prerr_int           = prerr_int;\nexports.prerr_float         = prerr_float;\nexports.prerr_endline       = prerr_endline;\nexports.prerr_newline       = prerr_newline;\nexports.read_line           = read_line;\nexports.read_int            = read_int;\nexports.read_float          = read_float;\nexports.open_out            = open_out;\nexports.open_out_bin        = open_out_bin;\nexports.open_out_gen        = open_out_gen;\nexports.flush               = flush;\nexports.flush_all           = flush_all;\nexports.output_char         = output_char;\nexports.output_string       = output_string;\nexports.output_bytes        = output_bytes;\nexports.output              = output;\nexports.output_substring    = output_substring;\nexports.output_byte         = output_byte;\nexports.output_binary_int   = output_binary_int;\nexports.output_value        = output_value;\nexports.seek_out            = seek_out;\nexports.pos_out             = pos_out;\nexports.out_channel_length  = out_channel_length;\nexports.close_out           = close_out;\nexports.close_out_noerr     = close_out_noerr;\nexports.set_binary_mode_out = set_binary_mode_out;\nexports.open_in             = open_in;\nexports.open_in_bin         = open_in_bin;\nexports.open_in_gen         = open_in_gen;\nexports.input_char          = input_char;\nexports.input_line          = input_line;\nexports.input               = input;\nexports.really_input        = really_input;\nexports.really_input_string = really_input_string;\nexports.input_byte          = input_byte;\nexports.input_binary_int    = input_binary_int;\nexports.input_value         = input_value;\nexports.seek_in             = seek_in;\nexports.pos_in              = pos_in;\nexports.in_channel_length   = in_channel_length;\nexports.close_in            = close_in;\nexports.close_in_noerr      = close_in_noerr;\nexports.set_binary_mode_in  = set_binary_mode_in;\nexports.LargeFile           = LargeFile;\nexports.string_of_format    = string_of_format;\nexports.$caret$caret        = $caret$caret;\nexports.exit                = exit;\nexports.at_exit             = at_exit;\nexports.valid_float_lexem   = valid_float_lexem;\nexports.unsafe_really_input = unsafe_really_input;\nexports.do_at_exit          = do_at_exit;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/pervasives.js\n ** module id = 7\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/pervasives.js?");

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Block                   = __webpack_require__(1);\n\nfunction caml_obj_dup(x) {\n  var len = x.length;\n  var v = {\n    length: len,\n    tag: x.tag | 0\n  };\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    v[i] = x[i];\n  }\n  return v;\n}\n\nfunction caml_obj_truncate(x, new_size) {\n  var len = x.length;\n  if (new_size <= 0 || new_size > len) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Obj.truncate\"\n        ];\n  }\n  else if (len !== new_size) {\n    for(var i = new_size ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n      x[i] = 0;\n    }\n    x.length = new_size;\n    return /* () */0;\n  }\n  else {\n    return 0;\n  }\n}\n\nfunction caml_lazy_make_forward(x) {\n  return Block.__(250, [x]);\n}\n\nfunction caml_update_dummy(x, y) {\n  var len = y.length;\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    x[i] = y[i];\n  }\n  x.tag = y.tag | 0;\n  x.length = y.length;\n  return /* () */0;\n}\n\nfunction caml_int_compare(x, y) {\n  if (x < y) {\n    return -1;\n  }\n  else if (x === y) {\n    return 0;\n  }\n  else {\n    return 1;\n  }\n}\n\nfunction caml_compare(_a, _b) {\n  while(true) {\n    var b = _b;\n    var a = _a;\n    if (typeof a === \"string\") {\n      var x = a;\n      var y = b;\n      if (x < y) {\n        return -1;\n      }\n      else if (x === y) {\n        return 0;\n      }\n      else {\n        return 1;\n      }\n    }\n    else if (typeof a === \"number\") {\n      return caml_int_compare(a, b);\n    }\n    else if (typeof a === \"boolean\" || typeof a === \"null\" || typeof a === \"undefined\") {\n      var x$1 = a;\n      var y$1 = b;\n      if (x$1 === y$1) {\n        return 0;\n      }\n      else if (x$1 < y$1) {\n        return -1;\n      }\n      else {\n        return 1;\n      }\n    }\n    else {\n      var tag_a = a.tag | 0;\n      var tag_b = b.tag | 0;\n      if (tag_a === 250) {\n        _a = a[0];\n        continue ;\n        \n      }\n      else if (tag_b === 250) {\n        _b = b[0];\n        continue ;\n        \n      }\n      else if (tag_a === 248) {\n        return caml_int_compare(a[1], b[1]);\n      }\n      else if (tag_a === 251) {\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              \"equal: abstract value\"\n            ];\n      }\n      else if (tag_a !== tag_b) {\n        if (tag_a < tag_b) {\n          return -1;\n        }\n        else {\n          return 1;\n        }\n      }\n      else {\n        var len_a = a.length;\n        var len_b = b.length;\n        if (len_a === len_b) {\n          var a$1 = a;\n          var b$1 = b;\n          var _i = 0;\n          var same_length = len_a;\n          while(true) {\n            var i = _i;\n            if (i === same_length) {\n              return 0;\n            }\n            else {\n              var res = caml_compare(a$1[i], b$1[i]);\n              if (res !== 0) {\n                return res;\n              }\n              else {\n                _i = i + 1 | 0;\n                continue ;\n                \n              }\n            }\n          };\n        }\n        else if (len_a < len_b) {\n          var a$2 = a;\n          var b$2 = b;\n          var _i$1 = 0;\n          var short_length = len_a;\n          while(true) {\n            var i$1 = _i$1;\n            if (i$1 === short_length) {\n              return -1;\n            }\n            else {\n              var res$1 = caml_compare(a$2[i$1], b$2[i$1]);\n              if (res$1 !== 0) {\n                return res$1;\n              }\n              else {\n                _i$1 = i$1 + 1 | 0;\n                continue ;\n                \n              }\n            }\n          };\n        }\n        else {\n          var a$3 = a;\n          var b$3 = b;\n          var _i$2 = 0;\n          var short_length$1 = len_b;\n          while(true) {\n            var i$2 = _i$2;\n            if (i$2 === short_length$1) {\n              return 1;\n            }\n            else {\n              var res$2 = caml_compare(a$3[i$2], b$3[i$2]);\n              if (res$2 !== 0) {\n                return res$2;\n              }\n              else {\n                _i$2 = i$2 + 1 | 0;\n                continue ;\n                \n              }\n            }\n          };\n        }\n      }\n    }\n  };\n}\n\nfunction caml_equal(_a, _b) {\n  while(true) {\n    var b = _b;\n    var a = _a;\n    if (typeof a === \"string\" || typeof a === \"number\" || typeof a === \"boolean\" || typeof a === \"undefined\" || typeof a === \"null\") {\n      return +(a === b);\n    }\n    else {\n      var tag_a = a.tag | 0;\n      var tag_b = b.tag | 0;\n      if (tag_a === 250) {\n        _a = a[0];\n        continue ;\n        \n      }\n      else if (tag_b === 250) {\n        _b = b[0];\n        continue ;\n        \n      }\n      else if (tag_a === 248) {\n        return +(a[1] === b[1]);\n      }\n      else if (tag_a === 251) {\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              \"equal: abstract value\"\n            ];\n      }\n      else if (tag_a !== tag_b) {\n        return /* false */0;\n      }\n      else {\n        var len_a = a.length;\n        var len_b = b.length;\n        if (len_a === len_b) {\n          var a$1 = a;\n          var b$1 = b;\n          var _i = 0;\n          var same_length = len_a;\n          while(true) {\n            var i = _i;\n            if (i === same_length) {\n              return /* true */1;\n            }\n            else if (caml_equal(a$1[i], b$1[i])) {\n              _i = i + 1 | 0;\n              continue ;\n              \n            }\n            else {\n              return /* false */0;\n            }\n          };\n        }\n        else {\n          return /* false */0;\n        }\n      }\n    }\n  };\n}\n\nfunction caml_notequal(a, b) {\n  return !caml_equal(a, b);\n}\n\nfunction caml_greaterequal(a, b) {\n  return +(caml_compare(a, b) >= 0);\n}\n\nfunction caml_greaterthan(a, b) {\n  return +(caml_compare(a, b) > 0);\n}\n\nfunction caml_lessequal(a, b) {\n  return +(caml_compare(a, b) <= 0);\n}\n\nfunction caml_lessthan(a, b) {\n  return +(caml_compare(a, b) < 0);\n}\n\nvar caml_int32_compare = caml_int_compare;\n\nvar caml_nativeint_compare = caml_int_compare;\n\nexports.caml_obj_dup           = caml_obj_dup;\nexports.caml_obj_truncate      = caml_obj_truncate;\nexports.caml_lazy_make_forward = caml_lazy_make_forward;\nexports.caml_update_dummy      = caml_update_dummy;\nexports.caml_int_compare       = caml_int_compare;\nexports.caml_int32_compare     = caml_int32_compare;\nexports.caml_nativeint_compare = caml_nativeint_compare;\nexports.caml_compare           = caml_compare;\nexports.caml_equal             = caml_equal;\nexports.caml_notequal          = caml_notequal;\nexports.caml_greaterequal      = caml_greaterequal;\nexports.caml_greaterthan       = caml_greaterthan;\nexports.caml_lessthan          = caml_lessthan;\nexports.caml_lessequal         = caml_lessequal;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/caml_obj.js\n ** module id = 8\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/caml_obj.js?");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(process) {'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Curry                   = __webpack_require__(2);\n\nfunction $caret(prim, prim$1) {\n  return prim + prim$1;\n}\n\nvar stdin = undefined;\n\nvar stdout = /* record */[\n  /* buffer */\"\",\n  /* output */function (_, s) {\n    var v = s.length - 1 | 0;\n    if (( (typeof process !== \"undefined\") && process.stdout && process.stdout.write)) {\n      return ( process.stdout.write )(s);\n    }\n    else if (s[v] === \"\\n\") {\n      console.log(s.slice(0, v));\n      return /* () */0;\n    }\n    else {\n      console.log(s);\n      return /* () */0;\n    }\n  }\n];\n\nvar stderr = /* record */[\n  /* buffer */\"\",\n  /* output */function (_, s) {\n    var v = s.length - 1 | 0;\n    if (s[v] === \"\\n\") {\n      console.log(s.slice(0, v));\n      return /* () */0;\n    }\n    else {\n      console.log(s);\n      return /* () */0;\n    }\n  }\n];\n\nfunction caml_ml_open_descriptor_in() {\n  throw [\n        Caml_builtin_exceptions.failure,\n        \"caml_ml_open_descriptor_in not implemented\"\n      ];\n}\n\nfunction caml_ml_open_descriptor_out() {\n  throw [\n        Caml_builtin_exceptions.failure,\n        \"caml_ml_open_descriptor_out not implemented\"\n      ];\n}\n\nfunction caml_ml_flush(oc) {\n  if (oc[/* buffer */0] !== \"\") {\n    Curry._2(oc[/* output */1], oc, oc[/* buffer */0]);\n    oc[/* buffer */0] = \"\";\n    return /* () */0;\n  }\n  else {\n    return 0;\n  }\n}\n\nvar node_std_output = (function (s){\n   return (typeof process !== \"undefined\") && process.stdout && (process.stdout.write(s), true);\n   }\n);\n\nfunction caml_ml_output(oc, str, offset, len) {\n  var str$1 = offset === 0 && len === str.length ? str : str.slice(offset, len);\n  if (( (typeof process !== \"undefined\") && process.stdout && process.stdout.write ) && oc === stdout) {\n    return ( process.stdout.write )(str$1);\n  }\n  else {\n    var id = str$1.lastIndexOf(\"\\n\");\n    if (id < 0) {\n      oc[/* buffer */0] = oc[/* buffer */0] + str$1;\n      return /* () */0;\n    }\n    else {\n      oc[/* buffer */0] = oc[/* buffer */0] + str$1.slice(0, id + 1 | 0);\n      caml_ml_flush(oc);\n      oc[/* buffer */0] = oc[/* buffer */0] + str$1.slice(id + 1 | 0);\n      return /* () */0;\n    }\n  }\n}\n\nfunction caml_ml_output_char(oc, $$char) {\n  return caml_ml_output(oc, String.fromCharCode($$char), 0, 1);\n}\n\nfunction caml_ml_input(_, _$1, _$2, _$3) {\n  throw [\n        Caml_builtin_exceptions.failure,\n        \"caml_ml_input ic not implemented\"\n      ];\n}\n\nfunction caml_ml_input_char() {\n  throw [\n        Caml_builtin_exceptions.failure,\n        \"caml_ml_input_char not implemnted\"\n      ];\n}\n\nfunction caml_ml_out_channels_list() {\n  return /* :: */[\n          stdout,\n          /* :: */[\n            stderr,\n            /* [] */0\n          ]\n        ];\n}\n\nexports.$caret                      = $caret;\nexports.stdin                       = stdin;\nexports.stdout                      = stdout;\nexports.stderr                      = stderr;\nexports.caml_ml_open_descriptor_in  = caml_ml_open_descriptor_in;\nexports.caml_ml_open_descriptor_out = caml_ml_open_descriptor_out;\nexports.caml_ml_flush               = caml_ml_flush;\nexports.node_std_output             = node_std_output;\nexports.caml_ml_output              = caml_ml_output;\nexports.caml_ml_output_char         = caml_ml_output_char;\nexports.caml_ml_input               = caml_ml_input;\nexports.caml_ml_input_char          = caml_ml_input_char;\nexports.caml_ml_out_channels_list   = caml_ml_out_channels_list;\n/* stdin Not a pure module */\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/caml_io.js\n ** module id = 9\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/caml_io.js?");

/***/ },
/* 10 */
/***/ function(module, exports) {

	eval("// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/process/browser.js\n ** module id = 10\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///(webpack)/~/node-libs-browser/~/process/browser.js?");

/***/ },
/* 11 */
/***/ function(module, exports) {

	eval("'use strict';\n\n\nvar id = [0];\n\nfunction caml_set_oo_id(b) {\n  b[1] = id[0];\n  id[0] += 1;\n  return b;\n}\n\nfunction get_id() {\n  id[0] += 1;\n  return id[0];\n}\n\nfunction create(str) {\n  var v_001 = get_id(/* () */0);\n  var v = /* tuple */[\n    str,\n    v_001\n  ];\n  v.tag = 248;\n  return v;\n}\n\nexports.caml_set_oo_id = caml_set_oo_id;\nexports.get_id         = get_id;\nexports.create         = create;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/caml_exceptions.js\n ** module id = 11\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/caml_exceptions.js?");

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_int64              = __webpack_require__(13);\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Caml_int32              = __webpack_require__(14);\nvar Curry                   = __webpack_require__(2);\nvar Caml_utils              = __webpack_require__(15);\nvar Caml_string             = __webpack_require__(16);\n\nfunction caml_failwith(s) {\n  throw [\n        Caml_builtin_exceptions.failure,\n        s\n      ];\n}\n\nfunction parse_digit(c) {\n  if (c >= 65) {\n    if (c >= 97) {\n      if (c >= 123) {\n        return -1;\n      }\n      else {\n        return c - 87 | 0;\n      }\n    }\n    else if (c >= 91) {\n      return -1;\n    }\n    else {\n      return c - 55 | 0;\n    }\n  }\n  else if (c > 57 || c < 48) {\n    return -1;\n  }\n  else {\n    return c - /* \"0\" */48 | 0;\n  }\n}\n\nfunction int_of_string_base(param) {\n  switch (param) {\n    case 0 : \n        return 8;\n    case 1 : \n        return 16;\n    case 2 : \n        return 10;\n    case 3 : \n        return 2;\n    \n  }\n}\n\nfunction parse_sign_and_base(s) {\n  var sign = 1;\n  var base = /* Dec */2;\n  var i = 0;\n  if (s[i] === \"-\") {\n    sign = -1;\n    i = i + 1 | 0;\n  }\n  var match = s.charCodeAt(i);\n  var match$1 = s.charCodeAt(i + 1 | 0);\n  if (match === 48) {\n    if (match$1 >= 89) {\n      if (match$1 !== 98) {\n        if (match$1 !== 111) {\n          if (match$1 === 120) {\n            base = /* Hex */1;\n            i = i + 2 | 0;\n          }\n          \n        }\n        else {\n          base = /* Oct */0;\n          i = i + 2 | 0;\n        }\n      }\n      else {\n        base = /* Bin */3;\n        i = i + 2 | 0;\n      }\n    }\n    else if (match$1 !== 66) {\n      if (match$1 !== 79) {\n        if (match$1 >= 88) {\n          base = /* Hex */1;\n          i = i + 2 | 0;\n        }\n        \n      }\n      else {\n        base = /* Oct */0;\n        i = i + 2 | 0;\n      }\n    }\n    else {\n      base = /* Bin */3;\n      i = i + 2 | 0;\n    }\n  }\n  return /* tuple */[\n          i,\n          sign,\n          base\n        ];\n}\n\nfunction caml_int_of_string(s) {\n  var match = parse_sign_and_base(s);\n  var i = match[0];\n  var base = int_of_string_base(match[2]);\n  var threshold = 4294967295;\n  var len = s.length;\n  var c = i < len ? s.charCodeAt(i) : /* \"\\000\" */0;\n  var d = parse_digit(c);\n  if (d < 0 || d >= base) {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"int_of_string\"\n        ];\n  }\n  var aux = function (_acc, _k) {\n    while(true) {\n      var k = _k;\n      var acc = _acc;\n      if (k === len) {\n        return acc;\n      }\n      else {\n        var a = s.charCodeAt(k);\n        if (a === /* \"_\" */95) {\n          _k = k + 1 | 0;\n          continue ;\n          \n        }\n        else {\n          var v = parse_digit(a);\n          if (v < 0 || v >= base) {\n            throw [\n                  Caml_builtin_exceptions.failure,\n                  \"int_of_string\"\n                ];\n          }\n          else {\n            var acc$1 = base * acc + v;\n            if (acc$1 > threshold) {\n              throw [\n                    Caml_builtin_exceptions.failure,\n                    \"int_of_string\"\n                  ];\n            }\n            else {\n              _k = k + 1 | 0;\n              _acc = acc$1;\n              continue ;\n              \n            }\n          }\n        }\n      }\n    };\n  };\n  var res = match[1] * aux(d, i + 1 | 0);\n  var or_res = res | 0;\n  if (base === 10 && res !== or_res) {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"int_of_string\"\n        ];\n  }\n  return or_res;\n}\n\nfunction caml_int64_of_string(s) {\n  var match = parse_sign_and_base(s);\n  var hbase = match[2];\n  var i = match[0];\n  var base = Caml_int64.of_int32(int_of_string_base(hbase));\n  var sign = Caml_int64.of_int32(match[1]);\n  var threshold;\n  switch (hbase) {\n    case 0 : \n        threshold = /* int64 */[\n          /* hi */536870911,\n          /* lo */4294967295\n        ];\n        break;\n    case 1 : \n        threshold = /* int64 */[\n          /* hi */268435455,\n          /* lo */4294967295\n        ];\n        break;\n    case 2 : \n        threshold = /* int64 */[\n          /* hi */429496729,\n          /* lo */2576980377\n        ];\n        break;\n    case 3 : \n        threshold = /* int64 */[\n          /* hi */2147483647,\n          /* lo */4294967295\n        ];\n        break;\n    \n  }\n  var len = s.length;\n  var c = i < len ? s.charCodeAt(i) : /* \"\\000\" */0;\n  var d = Caml_int64.of_int32(parse_digit(c));\n  if (Caml_int64.lt(d, /* int64 */[\n          /* hi */0,\n          /* lo */0\n        ]) || Caml_int64.ge(d, base)) {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"int64_of_string\"\n        ];\n  }\n  var aux = function (_acc, _k) {\n    while(true) {\n      var k = _k;\n      var acc = _acc;\n      if (k === len) {\n        return acc;\n      }\n      else {\n        var a = s.charCodeAt(k);\n        if (a === /* \"_\" */95) {\n          _k = k + 1 | 0;\n          continue ;\n          \n        }\n        else {\n          var v = Caml_int64.of_int32(parse_digit(a));\n          if (Caml_int64.lt(v, /* int64 */[\n                  /* hi */0,\n                  /* lo */0\n                ]) || Caml_int64.ge(v, base)) {\n            throw [\n                  Caml_builtin_exceptions.failure,\n                  \"int64_of_string\"\n                ];\n          }\n          else {\n            var acc$1 = Caml_int64.add(Caml_int64.mul(base, acc), v);\n            if (Caml_int64.gt(acc$1, threshold)) {\n              throw [\n                    Caml_builtin_exceptions.failure,\n                    \"int64_of_string\"\n                  ];\n            }\n            else {\n              _k = k + 1 | 0;\n              _acc = acc$1;\n              continue ;\n              \n            }\n          }\n        }\n      }\n    };\n  };\n  var res = Caml_int64.mul(sign, aux(d, i + 1 | 0));\n  var or_res_000 = /* hi */res[0] | /* hi */0;\n  var or_res_001 = /* lo */(res[1] >>> 0);\n  var or_res = /* int64 */[\n    or_res_000,\n    or_res_001\n  ];\n  if (Caml_int64.eq(base, /* int64 */[\n          /* hi */0,\n          /* lo */10\n        ]) && Caml_int64.neq(res, or_res)) {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"int64_of_string\"\n        ];\n  }\n  return or_res;\n}\n\nfunction int_of_base(param) {\n  switch (param) {\n    case 0 : \n        return 8;\n    case 1 : \n        return 16;\n    case 2 : \n        return 10;\n    \n  }\n}\n\nfunction lowercase(c) {\n  if (c >= /* \"A\" */65 && c <= /* \"Z\" */90 || c >= /* \"\\192\" */192 && c <= /* \"\\214\" */214 || c >= /* \"\\216\" */216 && c <= /* \"\\222\" */222) {\n    return c + 32 | 0;\n  }\n  else {\n    return c;\n  }\n}\n\nfunction parse_format(fmt) {\n  var len = fmt.length;\n  if (len > 31) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"format_int: format too long\"\n        ];\n  }\n  var f = /* record */[\n    /* justify */\"+\",\n    /* signstyle */\"-\",\n    /* filter */\" \",\n    /* alternate : false */0,\n    /* base : Dec */2,\n    /* signedconv : false */0,\n    /* width */0,\n    /* uppercase : false */0,\n    /* sign */1,\n    /* prec */-1,\n    /* conv */\"f\"\n  ];\n  var _i = 0;\n  while(true) {\n    var i = _i;\n    if (i >= len) {\n      return f;\n    }\n    else {\n      var c = fmt.charCodeAt(i);\n      var exit = 0;\n      if (c >= 69) {\n        if (c >= 88) {\n          if (c >= 121) {\n            exit = 1;\n          }\n          else {\n            switch (c - 88 | 0) {\n              case 0 : \n                  f[/* base */4] = /* Hex */1;\n                  f[/* uppercase */7] = /* true */1;\n                  _i = i + 1 | 0;\n                  continue ;\n                  case 13 : \n              case 14 : \n              case 15 : \n                  exit = 5;\n                  break;\n              case 12 : \n              case 17 : \n                  exit = 4;\n                  break;\n              case 23 : \n                  f[/* base */4] = /* Oct */0;\n                  _i = i + 1 | 0;\n                  continue ;\n                  case 29 : \n                  f[/* base */4] = /* Dec */2;\n                  _i = i + 1 | 0;\n                  continue ;\n                  case 1 : \n              case 2 : \n              case 3 : \n              case 4 : \n              case 5 : \n              case 6 : \n              case 7 : \n              case 8 : \n              case 9 : \n              case 10 : \n              case 11 : \n              case 16 : \n              case 18 : \n              case 19 : \n              case 20 : \n              case 21 : \n              case 22 : \n              case 24 : \n              case 25 : \n              case 26 : \n              case 27 : \n              case 28 : \n              case 30 : \n              case 31 : \n                  exit = 1;\n                  break;\n              case 32 : \n                  f[/* base */4] = /* Hex */1;\n                  _i = i + 1 | 0;\n                  continue ;\n                  \n            }\n          }\n        }\n        else if (c >= 72) {\n          exit = 1;\n        }\n        else {\n          f[/* signedconv */5] = /* true */1;\n          f[/* uppercase */7] = /* true */1;\n          f[/* conv */10] = String.fromCharCode(lowercase(c));\n          _i = i + 1 | 0;\n          continue ;\n          \n        }\n      }\n      else {\n        var switcher = c - 32 | 0;\n        if (switcher > 25 || switcher < 0) {\n          exit = 1;\n        }\n        else {\n          switch (switcher) {\n            case 3 : \n                f[/* alternate */3] = /* true */1;\n                _i = i + 1 | 0;\n                continue ;\n                case 0 : \n            case 11 : \n                exit = 2;\n                break;\n            case 13 : \n                f[/* justify */0] = \"-\";\n                _i = i + 1 | 0;\n                continue ;\n                case 14 : \n                f[/* prec */9] = 0;\n                var j = i + 1 | 0;\n                while((function(j){\n                    return function () {\n                      var w = fmt.charCodeAt(j) - /* \"0\" */48 | 0;\n                      return +(w >= 0 && w <= 9);\n                    }\n                    }(j))()) {\n                  f[/* prec */9] = (Caml_int32.imul(f[/* prec */9], 10) + fmt.charCodeAt(j) | 0) - /* \"0\" */48 | 0;\n                  j = j + 1 | 0;\n                };\n                _i = j;\n                continue ;\n                case 1 : \n            case 2 : \n            case 4 : \n            case 5 : \n            case 6 : \n            case 7 : \n            case 8 : \n            case 9 : \n            case 10 : \n            case 12 : \n            case 15 : \n                exit = 1;\n                break;\n            case 16 : \n                f[/* filter */2] = \"0\";\n                _i = i + 1 | 0;\n                continue ;\n                case 17 : \n            case 18 : \n            case 19 : \n            case 20 : \n            case 21 : \n            case 22 : \n            case 23 : \n            case 24 : \n            case 25 : \n                exit = 3;\n                break;\n            \n          }\n        }\n      }\n      switch (exit) {\n        case 1 : \n            _i = i + 1 | 0;\n            continue ;\n            case 2 : \n            f[/* signstyle */1] = String.fromCharCode(c);\n            _i = i + 1 | 0;\n            continue ;\n            case 3 : \n            f[/* width */6] = 0;\n            var j$1 = i;\n            while((function(j$1){\n                return function () {\n                  var w = fmt.charCodeAt(j$1) - /* \"0\" */48 | 0;\n                  return +(w >= 0 && w <= 9);\n                }\n                }(j$1))()) {\n              f[/* width */6] = (Caml_int32.imul(f[/* width */6], 10) + fmt.charCodeAt(j$1) | 0) - /* \"0\" */48 | 0;\n              j$1 = j$1 + 1 | 0;\n            };\n            _i = j$1;\n            continue ;\n            case 4 : \n            f[/* signedconv */5] = /* true */1;\n            f[/* base */4] = /* Dec */2;\n            _i = i + 1 | 0;\n            continue ;\n            case 5 : \n            f[/* signedconv */5] = /* true */1;\n            f[/* conv */10] = String.fromCharCode(c);\n            _i = i + 1 | 0;\n            continue ;\n            \n      }\n    }\n  };\n}\n\nfunction finish_formatting(param, rawbuffer) {\n  var justify = param[/* justify */0];\n  var signstyle = param[/* signstyle */1];\n  var filter = param[/* filter */2];\n  var alternate = param[/* alternate */3];\n  var base = param[/* base */4];\n  var signedconv = param[/* signedconv */5];\n  var width = param[/* width */6];\n  var uppercase = param[/* uppercase */7];\n  var sign = param[/* sign */8];\n  var len = rawbuffer.length;\n  if (signedconv && (sign < 0 || signstyle !== \"-\")) {\n    len = len + 1 | 0;\n  }\n  if (alternate) {\n    if (base) {\n      if (base === /* Hex */1) {\n        len = len + 2 | 0;\n      }\n      \n    }\n    else {\n      len = len + 1 | 0;\n    }\n  }\n  var buffer = \"\";\n  if (justify === \"+\" && filter === \" \") {\n    for(var i = len ,i_finish = width - 1 | 0; i <= i_finish; ++i){\n      buffer = buffer + filter;\n    }\n  }\n  if (signedconv) {\n    if (sign < 0) {\n      buffer = buffer + \"-\";\n    }\n    else if (signstyle !== \"-\") {\n      buffer = buffer + signstyle;\n    }\n    \n  }\n  if (alternate && base === /* Oct */0) {\n    buffer = buffer + \"0\";\n  }\n  if (alternate && base === /* Hex */1) {\n    buffer = buffer + \"0x\";\n  }\n  if (justify === \"+\" && filter === \"0\") {\n    for(var i$1 = len ,i_finish$1 = width - 1 | 0; i$1 <= i_finish$1; ++i$1){\n      buffer = buffer + filter;\n    }\n  }\n  buffer = uppercase ? buffer + rawbuffer.toUpperCase() : buffer + rawbuffer;\n  if (justify === \"-\") {\n    for(var i$2 = len ,i_finish$2 = width - 1 | 0; i$2 <= i_finish$2; ++i$2){\n      buffer = buffer + \" \";\n    }\n  }\n  return buffer;\n}\n\nfunction caml_format_int(fmt, i) {\n  if (fmt === \"%d\") {\n    return \"\" + i;\n  }\n  else {\n    var f = parse_format(fmt);\n    var f$1 = f;\n    var i$1 = i;\n    var i$2 = i$1 < 0 ? (\n        f$1[/* signedconv */5] ? (f$1[/* sign */8] = -1, -i$1) : (i$1 >>> 0)\n      ) : i$1;\n    var s = i$2.toString(int_of_base(f$1[/* base */4]));\n    if (f$1[/* prec */9] >= 0) {\n      f$1[/* filter */2] = \" \";\n      var n = f$1[/* prec */9] - s.length | 0;\n      if (n > 0) {\n        s = Caml_utils.repeat(n, \"0\") + s;\n      }\n      \n    }\n    return finish_formatting(f$1, s);\n  }\n}\n\nfunction caml_int64_format(fmt, x) {\n  var f = parse_format(fmt);\n  var x$1 = f[/* signedconv */5] && Caml_int64.lt(x, /* int64 */[\n        /* hi */0,\n        /* lo */0\n      ]) ? (f[/* sign */8] = -1, Caml_int64.neg(x)) : x;\n  var s = \"\";\n  var match = f[/* base */4];\n  switch (match) {\n    case 0 : \n        var wbase = /* int64 */[\n          /* hi */0,\n          /* lo */8\n        ];\n        var cvtbl = \"01234567\";\n        if (Caml_int64.lt(x$1, /* int64 */[\n                /* hi */0,\n                /* lo */0\n              ])) {\n          var y = Caml_int64.discard_sign(x$1);\n          var match$1 = Caml_int64.div_mod(y, wbase);\n          var quotient = Caml_int64.add(/* int64 */[\n                /* hi */268435456,\n                /* lo */0\n              ], match$1[0]);\n          var modulus = match$1[1];\n          s = Caml_string.js_string_of_char(cvtbl.charCodeAt(modulus[1] | 0)) + s;\n          while(Caml_int64.neq(quotient, /* int64 */[\n                  /* hi */0,\n                  /* lo */0\n                ])) {\n            var match$2 = Caml_int64.div_mod(quotient, wbase);\n            quotient = match$2[0];\n            modulus = match$2[1];\n            s = Caml_string.js_string_of_char(cvtbl.charCodeAt(modulus[1] | 0)) + s;\n          };\n        }\n        else {\n          var match$3 = Caml_int64.div_mod(x$1, wbase);\n          var quotient$1 = match$3[0];\n          var modulus$1 = match$3[1];\n          s = Caml_string.js_string_of_char(cvtbl.charCodeAt(modulus$1[1] | 0)) + s;\n          while(Caml_int64.neq(quotient$1, /* int64 */[\n                  /* hi */0,\n                  /* lo */0\n                ])) {\n            var match$4 = Caml_int64.div_mod(quotient$1, wbase);\n            quotient$1 = match$4[0];\n            modulus$1 = match$4[1];\n            s = Caml_string.js_string_of_char(cvtbl.charCodeAt(modulus$1[1] | 0)) + s;\n          };\n        }\n        break;\n    case 1 : \n        s = Caml_int64.to_hex(x$1) + s;\n        break;\n    case 2 : \n        var wbase$1 = /* int64 */[\n          /* hi */0,\n          /* lo */10\n        ];\n        var cvtbl$1 = \"0123456789\";\n        if (Caml_int64.lt(x$1, /* int64 */[\n                /* hi */0,\n                /* lo */0\n              ])) {\n          var y$1 = Caml_int64.discard_sign(x$1);\n          var match$5 = Caml_int64.div_mod(y$1, wbase$1);\n          var match$6 = Caml_int64.div_mod(Caml_int64.add(/* int64 */[\n                    /* hi */0,\n                    /* lo */8\n                  ], match$5[1]), wbase$1);\n          var quotient$2 = Caml_int64.add(Caml_int64.add(/* int64 */[\n                    /* hi */214748364,\n                    /* lo */3435973836\n                  ], match$5[0]), match$6[0]);\n          var modulus$2 = match$6[1];\n          s = Caml_string.js_string_of_char(cvtbl$1.charCodeAt(modulus$2[1] | 0)) + s;\n          while(Caml_int64.neq(quotient$2, /* int64 */[\n                  /* hi */0,\n                  /* lo */0\n                ])) {\n            var match$7 = Caml_int64.div_mod(quotient$2, wbase$1);\n            quotient$2 = match$7[0];\n            modulus$2 = match$7[1];\n            s = Caml_string.js_string_of_char(cvtbl$1.charCodeAt(modulus$2[1] | 0)) + s;\n          };\n        }\n        else {\n          var match$8 = Caml_int64.div_mod(x$1, wbase$1);\n          var quotient$3 = match$8[0];\n          var modulus$3 = match$8[1];\n          s = Caml_string.js_string_of_char(cvtbl$1.charCodeAt(modulus$3[1] | 0)) + s;\n          while(Caml_int64.neq(quotient$3, /* int64 */[\n                  /* hi */0,\n                  /* lo */0\n                ])) {\n            var match$9 = Caml_int64.div_mod(quotient$3, wbase$1);\n            quotient$3 = match$9[0];\n            modulus$3 = match$9[1];\n            s = Caml_string.js_string_of_char(cvtbl$1.charCodeAt(modulus$3[1] | 0)) + s;\n          };\n        }\n        break;\n    \n  }\n  if (f[/* prec */9] >= 0) {\n    f[/* filter */2] = \" \";\n    var n = f[/* prec */9] - s.length | 0;\n    if (n > 0) {\n      s = Caml_utils.repeat(n, \"0\") + s;\n    }\n    \n  }\n  return finish_formatting(f, s);\n}\n\nfunction caml_format_float(fmt, x) {\n  var f = parse_format(fmt);\n  var prec = f[/* prec */9] < 0 ? 6 : f[/* prec */9];\n  var x$1 = x < 0 ? (f[/* sign */8] = -1, -x) : x;\n  var s = \"\";\n  if (isNaN(x$1)) {\n    s = \"nan\";\n    f[/* filter */2] = \" \";\n  }\n  else if (isFinite(x$1)) {\n    var match = f[/* conv */10];\n    switch (match) {\n      case \"e\" : \n          s = x$1.toExponential(prec);\n          var i = s.length;\n          if (s[i - 3 | 0] === \"e\") {\n            s = s.slice(0, i - 1 | 0) + (\"0\" + s.slice(i - 1 | 0));\n          }\n          break;\n      case \"f\" : \n          s = x$1.toFixed(prec);\n          break;\n      case \"g\" : \n          var prec$1 = prec !== 0 ? prec : 1;\n          s = x$1.toExponential(prec$1 - 1 | 0);\n          var j = s.indexOf(\"e\");\n          var exp = +s.slice(j + 1 | 0);\n          if (exp < -4 || x$1 >= 1e21 || x$1.toFixed(0).length > prec$1) {\n            var i$1 = j - 1 | 0;\n            while(s[i$1] === \"0\") {\n              i$1 = i$1 - 1 | 0;\n            };\n            if (s[i$1] === \".\") {\n              i$1 = i$1 - 1 | 0;\n            }\n            s = s.slice(0, i$1 + 1 | 0) + s.slice(j);\n            var i$2 = s.length;\n            if (s[i$2 - 3 | 0] === \"e\") {\n              s = s.slice(0, i$2 - 1 | 0) + (\"0\" + s.slice(i$2 - 1 | 0));\n            }\n            \n          }\n          else {\n            var p = prec$1;\n            if (exp < 0) {\n              p = p - (exp + 1 | 0) | 0;\n              s = x$1.toFixed(p);\n            }\n            else {\n              while(function () {\n                    s = x$1.toFixed(p);\n                    return +(s.length > (prec$1 + 1 | 0));\n                  }()) {\n                p = p - 1 | 0;\n              };\n            }\n            if (p !== 0) {\n              var k = s.length - 1 | 0;\n              while(s[k] === \"0\") {\n                k = k - 1 | 0;\n              };\n              if (s[k] === \".\") {\n                k = k - 1 | 0;\n              }\n              s = s.slice(0, k + 1 | 0);\n            }\n            \n          }\n          break;\n      default:\n        \n    }\n  }\n  else {\n    s = \"inf\";\n    f[/* filter */2] = \" \";\n  }\n  return finish_formatting(f, s);\n}\n\nvar float_of_string = (\n  function (s, caml_failwith) {\n    var res = +s;\n    if ((s.length > 0) && (res === res))\n        return res;\n    s = s.replace(/_/g, \"\");\n    res = +s;\n    if (((s.length > 0) && (res === res)) || /^[+-]?nan$/i.test(s)) {\n        return res;\n    }\n    ;\n    if (/^ *0x[0-9a-f_]+p[+-]?[0-9_]+/i.test(s)) {\n        var pidx = s.indexOf('p');\n        pidx = (pidx == -1) ? s.indexOf('P') : pidx;\n        var exp = +s.substring(pidx + 1);\n        res = +s.substring(0, pidx);\n        return res * Math.pow(2, exp);\n    }\n    if (/^\\+?inf(inity)?$/i.test(s))\n        return Infinity;\n    if (/^-inf(inity)?$/i.test(s))\n        return -Infinity;\n    caml_failwith(\"float_of_string\");\n}\n\n);\n\nfunction caml_float_of_string(s) {\n  return Curry._2(float_of_string, s, caml_failwith);\n}\n\nvar caml_nativeint_format = caml_format_int;\n\nvar caml_int32_format = caml_format_int;\n\nvar caml_int32_of_string = caml_int_of_string;\n\nvar caml_nativeint_of_string = caml_int_of_string;\n\nexports.caml_format_float        = caml_format_float;\nexports.caml_format_int          = caml_format_int;\nexports.caml_nativeint_format    = caml_nativeint_format;\nexports.caml_int32_format        = caml_int32_format;\nexports.caml_float_of_string     = caml_float_of_string;\nexports.caml_int64_format        = caml_int64_format;\nexports.caml_int_of_string       = caml_int_of_string;\nexports.caml_int32_of_string     = caml_int32_of_string;\nexports.caml_int64_of_string     = caml_int64_of_string;\nexports.caml_nativeint_of_string = caml_nativeint_of_string;\n/* float_of_string Not a pure module */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/caml_format.js\n ** module id = 12\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/caml_format.js?");

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Caml_obj                = __webpack_require__(8);\nvar Caml_int32              = __webpack_require__(14);\nvar Caml_utils              = __webpack_require__(15);\n\nvar min_int = /* record */[\n  /* hi */-2147483648,\n  /* lo */0\n];\n\nvar max_int = /* record */[\n  /* hi */134217727,\n  /* lo */1\n];\n\nvar one = /* record */[\n  /* hi */0,\n  /* lo */1\n];\n\nvar zero = /* record */[\n  /* hi */0,\n  /* lo */0\n];\n\nvar neg_one = /* record */[\n  /* hi */-1,\n  /* lo */4294967295\n];\n\nfunction neg_signed(x) {\n  return +((x & 2147483648) !== 0);\n}\n\nfunction add(param, param$1) {\n  var other_low_ = param$1[/* lo */1];\n  var this_low_ = param[/* lo */1];\n  var lo = this_low_ + other_low_ & 4294967295;\n  var overflow = neg_signed(this_low_) && (neg_signed(other_low_) || !neg_signed(lo)) || neg_signed(other_low_) && !neg_signed(lo) ? 1 : 0;\n  var hi = param[/* hi */0] + param$1[/* hi */0] + overflow & 4294967295;\n  return /* record */[\n          /* hi */hi,\n          /* lo */(lo >>> 0)\n        ];\n}\n\nfunction not(param) {\n  var hi = param[/* hi */0] ^ -1;\n  var lo = param[/* lo */1] ^ -1;\n  return /* record */[\n          /* hi */hi,\n          /* lo */(lo >>> 0)\n        ];\n}\n\nfunction eq(x, y) {\n  if (x[/* hi */0] === y[/* hi */0]) {\n    return +(x[/* lo */1] === y[/* lo */1]);\n  }\n  else {\n    return /* false */0;\n  }\n}\n\nfunction neg(x) {\n  if (eq(x, min_int)) {\n    return min_int;\n  }\n  else {\n    return add(not(x), one);\n  }\n}\n\nfunction sub(x, y) {\n  return add(x, neg(y));\n}\n\nfunction lsl_(x, numBits) {\n  var lo = x[/* lo */1];\n  if (numBits) {\n    if (numBits >= 32) {\n      return /* record */[\n              /* hi */(lo << (numBits - 32 | 0)),\n              /* lo */0\n            ];\n    }\n    else {\n      var hi = (lo >>> (32 - numBits | 0)) | (x[/* hi */0] << numBits);\n      return /* record */[\n              /* hi */hi,\n              /* lo */((lo << numBits) >>> 0)\n            ];\n    }\n  }\n  else {\n    return x;\n  }\n}\n\nfunction lsr_(x, numBits) {\n  var hi = x[/* hi */0];\n  if (numBits) {\n    var offset = numBits - 32 | 0;\n    if (offset) {\n      if (offset > 0) {\n        var lo = (hi >>> offset);\n        return /* record */[\n                /* hi */0,\n                /* lo */(lo >>> 0)\n              ];\n      }\n      else {\n        var hi$1 = (hi >>> numBits);\n        var lo$1 = (hi << -offset) | (x[/* lo */1] >>> numBits);\n        return /* record */[\n                /* hi */hi$1,\n                /* lo */(lo$1 >>> 0)\n              ];\n      }\n    }\n    else {\n      return /* record */[\n              /* hi */0,\n              /* lo */(hi >>> 0)\n            ];\n    }\n  }\n  else {\n    return x;\n  }\n}\n\nfunction asr_(x, numBits) {\n  var hi = x[/* hi */0];\n  if (numBits) {\n    if (numBits < 32) {\n      var hi$1 = (hi >> numBits);\n      var lo = (hi << (32 - numBits | 0)) | (x[/* lo */1] >>> numBits);\n      return /* record */[\n              /* hi */hi$1,\n              /* lo */(lo >>> 0)\n            ];\n    }\n    else {\n      var lo$1 = (hi >> (numBits - 32 | 0));\n      return /* record */[\n              /* hi */hi >= 0 ? 0 : -1,\n              /* lo */(lo$1 >>> 0)\n            ];\n    }\n  }\n  else {\n    return x;\n  }\n}\n\nfunction is_zero(param) {\n  if (param[/* hi */0] !== 0 || param[/* lo */1] !== 0) {\n    return /* false */0;\n  }\n  else {\n    return /* true */1;\n  }\n}\n\nfunction mul(_this, _other) {\n  while(true) {\n    var other = _other;\n    var $$this = _this;\n    var exit = 0;\n    var lo;\n    var this_hi = $$this[/* hi */0];\n    var exit$1 = 0;\n    var exit$2 = 0;\n    var exit$3 = 0;\n    if (this_hi !== 0) {\n      exit$3 = 4;\n    }\n    else if ($$this[/* lo */1] !== 0) {\n      exit$3 = 4;\n    }\n    else {\n      return zero;\n    }\n    if (exit$3 === 4) {\n      if (other[/* hi */0] !== 0) {\n        exit$2 = 3;\n      }\n      else if (other[/* lo */1] !== 0) {\n        exit$2 = 3;\n      }\n      else {\n        return zero;\n      }\n    }\n    if (exit$2 === 3) {\n      if (this_hi !== -2147483648) {\n        exit$1 = 2;\n      }\n      else if ($$this[/* lo */1] !== 0) {\n        exit$1 = 2;\n      }\n      else {\n        lo = other[/* lo */1];\n        exit = 1;\n      }\n    }\n    if (exit$1 === 2) {\n      var other_hi = other[/* hi */0];\n      var lo$1 = $$this[/* lo */1];\n      var exit$4 = 0;\n      if (other_hi !== -2147483648) {\n        exit$4 = 3;\n      }\n      else if (other[/* lo */1] !== 0) {\n        exit$4 = 3;\n      }\n      else {\n        lo = lo$1;\n        exit = 1;\n      }\n      if (exit$4 === 3) {\n        var other_lo = other[/* lo */1];\n        if (this_hi < 0) {\n          if (other_hi < 0) {\n            _other = neg(other);\n            _this = neg($$this);\n            continue ;\n            \n          }\n          else {\n            return neg(mul(neg($$this), other));\n          }\n        }\n        else if (other_hi < 0) {\n          return neg(mul($$this, neg(other)));\n        }\n        else {\n          var a48 = (this_hi >>> 16);\n          var a32 = this_hi & 65535;\n          var a16 = (lo$1 >>> 16);\n          var a00 = lo$1 & 65535;\n          var b48 = (other_hi >>> 16);\n          var b32 = other_hi & 65535;\n          var b16 = (other_lo >>> 16);\n          var b00 = other_lo & 65535;\n          var c48 = 0;\n          var c32 = 0;\n          var c16 = 0;\n          var c00 = a00 * b00;\n          c16 = (c00 >>> 16) + a16 * b00;\n          c32 = (c16 >>> 16);\n          c16 = (c16 & 65535) + a00 * b16;\n          c32 = c32 + (c16 >>> 16) + a32 * b00;\n          c48 = (c32 >>> 16);\n          c32 = (c32 & 65535) + a16 * b16;\n          c48 += (c32 >>> 16);\n          c32 = (c32 & 65535) + a00 * b32;\n          c48 += (c32 >>> 16);\n          c32 = c32 & 65535;\n          c48 = c48 + (a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48) & 65535;\n          var hi = c32 | (c48 << 16);\n          var lo$2 = c00 & 65535 | ((c16 & 65535) << 16);\n          return /* record */[\n                  /* hi */hi,\n                  /* lo */(lo$2 >>> 0)\n                ];\n        }\n      }\n      \n    }\n    if (exit === 1) {\n      if ((lo & 1) === 0) {\n        return zero;\n      }\n      else {\n        return min_int;\n      }\n    }\n    \n  };\n}\n\nfunction swap(param) {\n  var hi = Caml_int32.caml_int32_bswap(param[/* lo */1]);\n  var lo = Caml_int32.caml_int32_bswap(param[/* hi */0]);\n  return /* record */[\n          /* hi */hi,\n          /* lo */(lo >>> 0)\n        ];\n}\n\nfunction ge(param, param$1) {\n  var other_hi = param$1[/* hi */0];\n  var hi = param[/* hi */0];\n  if (hi > other_hi) {\n    return /* true */1;\n  }\n  else if (hi < other_hi) {\n    return /* false */0;\n  }\n  else {\n    return +(param[/* lo */1] >= param$1[/* lo */1]);\n  }\n}\n\nfunction neq(x, y) {\n  return !eq(x, y);\n}\n\nfunction lt(x, y) {\n  return !ge(x, y);\n}\n\nfunction gt(x, y) {\n  if (x[/* hi */0] > y[/* hi */0]) {\n    return /* true */1;\n  }\n  else if (x[/* hi */0] < y[/* hi */0]) {\n    return /* false */0;\n  }\n  else {\n    return +(x[/* lo */1] > y[/* lo */1]);\n  }\n}\n\nfunction le(x, y) {\n  return !gt(x, y);\n}\n\nfunction to_float(param) {\n  return param[/* hi */0] * 4294967296 + param[/* lo */1];\n}\n\nvar two_ptr_32_dbl = Math.pow(2, 32);\n\nvar two_ptr_63_dbl = Math.pow(2, 63);\n\nvar neg_two_ptr_63 = -Math.pow(2, 63);\n\nfunction of_float(x) {\n  if (isNaN(x) || !isFinite(x)) {\n    return zero;\n  }\n  else if (x <= neg_two_ptr_63) {\n    return min_int;\n  }\n  else if (x + 1 >= two_ptr_63_dbl) {\n    return max_int;\n  }\n  else if (x < 0) {\n    return neg(of_float(-x));\n  }\n  else {\n    var hi = x / two_ptr_32_dbl | 0;\n    var lo = x % two_ptr_32_dbl | 0;\n    return /* record */[\n            /* hi */hi,\n            /* lo */(lo >>> 0)\n          ];\n  }\n}\n\nfunction div(_self, _other) {\n  while(true) {\n    var other = _other;\n    var self = _self;\n    var self_hi = self[/* hi */0];\n    var exit = 0;\n    var exit$1 = 0;\n    if (other[/* hi */0] !== 0) {\n      exit$1 = 2;\n    }\n    else if (other[/* lo */1] !== 0) {\n      exit$1 = 2;\n    }\n    else {\n      throw Caml_builtin_exceptions.division_by_zero;\n    }\n    if (exit$1 === 2) {\n      if (self_hi !== -2147483648) {\n        if (self_hi !== 0) {\n          exit = 1;\n        }\n        else if (self[/* lo */1] !== 0) {\n          exit = 1;\n        }\n        else {\n          return zero;\n        }\n      }\n      else if (self[/* lo */1] !== 0) {\n        exit = 1;\n      }\n      else if (eq(other, one) || eq(other, neg_one)) {\n        return self;\n      }\n      else if (eq(other, min_int)) {\n        return one;\n      }\n      else {\n        var other_hi = other[/* hi */0];\n        var half_this = asr_(self, 1);\n        var approx = lsl_(div(half_this, other), 1);\n        var exit$2 = 0;\n        if (approx[/* hi */0] !== 0) {\n          exit$2 = 3;\n        }\n        else if (approx[/* lo */1] !== 0) {\n          exit$2 = 3;\n        }\n        else if (other_hi < 0) {\n          return one;\n        }\n        else {\n          return neg(one);\n        }\n        if (exit$2 === 3) {\n          var y = mul(other, approx);\n          var rem = add(self, neg(y));\n          return add(approx, div(rem, other));\n        }\n        \n      }\n    }\n    if (exit === 1) {\n      var other_hi$1 = other[/* hi */0];\n      var exit$3 = 0;\n      if (other_hi$1 !== -2147483648) {\n        exit$3 = 2;\n      }\n      else if (other[/* lo */1] !== 0) {\n        exit$3 = 2;\n      }\n      else {\n        return zero;\n      }\n      if (exit$3 === 2) {\n        if (self_hi < 0) {\n          if (other_hi$1 < 0) {\n            _other = neg(other);\n            _self = neg(self);\n            continue ;\n            \n          }\n          else {\n            return neg(div(neg(self), other));\n          }\n        }\n        else if (other_hi$1 < 0) {\n          return neg(div(self, neg(other)));\n        }\n        else {\n          var res = zero;\n          var rem$1 = self;\n          while(ge(rem$1, other)) {\n            var approx$1 = Math.max(1, Math.floor(to_float(rem$1) / to_float(other)));\n            var log2 = Math.ceil(Math.log(approx$1) / Math.LN2);\n            var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n            var approxRes = of_float(approx$1);\n            var approxRem = mul(approxRes, other);\n            while(approxRem[/* hi */0] < 0 || gt(approxRem, rem$1)) {\n              approx$1 -= delta;\n              approxRes = of_float(approx$1);\n              approxRem = mul(approxRes, other);\n            };\n            if (is_zero(approxRes)) {\n              approxRes = one;\n            }\n            res = add(res, approxRes);\n            rem$1 = add(rem$1, neg(approxRem));\n          };\n          return res;\n        }\n      }\n      \n    }\n    \n  };\n}\n\nfunction mod_(self, other) {\n  var y = mul(div(self, other), other);\n  return add(self, neg(y));\n}\n\nfunction div_mod(self, other) {\n  var quotient = div(self, other);\n  var y = mul(quotient, other);\n  return /* tuple */[\n          quotient,\n          add(self, neg(y))\n        ];\n}\n\nfunction compare(self, other) {\n  var v = Caml_obj.caml_nativeint_compare(self[/* hi */0], other[/* hi */0]);\n  if (v) {\n    return v;\n  }\n  else {\n    return Caml_obj.caml_nativeint_compare(self[/* lo */1], other[/* lo */1]);\n  }\n}\n\nfunction of_int32(lo) {\n  return /* record */[\n          /* hi */lo < 0 ? -1 : 0,\n          /* lo */(lo >>> 0)\n        ];\n}\n\nfunction to_int32(x) {\n  return x[/* lo */1] | 0;\n}\n\nfunction to_hex(x) {\n  var aux = function (v) {\n    return (v >>> 0).toString(16);\n  };\n  var match = x[/* hi */0];\n  var match$1 = x[/* lo */1];\n  var exit = 0;\n  if (match !== 0) {\n    exit = 1;\n  }\n  else if (match$1 !== 0) {\n    exit = 1;\n  }\n  else {\n    return \"0\";\n  }\n  if (exit === 1) {\n    if (match$1 !== 0) {\n      if (match !== 0) {\n        var lo = aux(x[/* lo */1]);\n        var pad = 8 - lo.length | 0;\n        if (pad <= 0) {\n          return aux(x[/* hi */0]) + lo;\n        }\n        else {\n          return aux(x[/* hi */0]) + (Caml_utils.repeat(pad, \"0\") + lo);\n        }\n      }\n      else {\n        return aux(x[/* lo */1]);\n      }\n    }\n    else {\n      return aux(x[/* hi */0]) + \"00000000\";\n    }\n  }\n  \n}\n\nfunction discard_sign(x) {\n  return /* record */[\n          /* hi */2147483647 & x[/* hi */0],\n          /* lo */x[/* lo */1]\n        ];\n}\n\nfunction float_of_bits(x) {\n  var int32 = new Int32Array(/* array */[\n        x[/* lo */1],\n        x[/* hi */0]\n      ]);\n  return new Float64Array(int32.buffer)[0];\n}\n\nfunction bits_of_float(x) {\n  var to_nat = function (x) {\n    return x;\n  };\n  var u = new Float64Array(/* float array */[x]);\n  var int32 = new Int32Array(u.buffer);\n  var hi = to_nat(int32[1]);\n  var lo = to_nat(int32[0]);\n  return /* record */[\n          /* hi */hi,\n          /* lo */(lo >>> 0)\n        ];\n}\n\nfunction get64(s, i) {\n  var hi = (s.charCodeAt(i + 4 | 0) << 32) | (s.charCodeAt(i + 5 | 0) << 40) | (s.charCodeAt(i + 6 | 0) << 48) | (s.charCodeAt(i + 7 | 0) << 56);\n  var lo = s.charCodeAt(i) | (s.charCodeAt(i + 1 | 0) << 8) | (s.charCodeAt(i + 2 | 0) << 16) | (s.charCodeAt(i + 3 | 0) << 24);\n  return /* record */[\n          /* hi */hi,\n          /* lo */(lo >>> 0)\n        ];\n}\n\nexports.min_int       = min_int;\nexports.max_int       = max_int;\nexports.one           = one;\nexports.zero          = zero;\nexports.not           = not;\nexports.of_int32      = of_int32;\nexports.to_int32      = to_int32;\nexports.add           = add;\nexports.neg           = neg;\nexports.sub           = sub;\nexports.lsl_          = lsl_;\nexports.lsr_          = lsr_;\nexports.asr_          = asr_;\nexports.is_zero       = is_zero;\nexports.mul           = mul;\nexports.swap          = swap;\nexports.ge            = ge;\nexports.eq            = eq;\nexports.neq           = neq;\nexports.lt            = lt;\nexports.gt            = gt;\nexports.le            = le;\nexports.to_float      = to_float;\nexports.of_float      = of_float;\nexports.div           = div;\nexports.mod_          = mod_;\nexports.div_mod       = div_mod;\nexports.compare       = compare;\nexports.to_hex        = to_hex;\nexports.discard_sign  = discard_sign;\nexports.float_of_bits = float_of_bits;\nexports.bits_of_float = bits_of_float;\nexports.get64         = get64;\n/* two_ptr_32_dbl Not a pure module */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/caml_int64.js\n ** module id = 13\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/caml_int64.js?");

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\n\nfunction div(x, y) {\n  if (y === 0) {\n    throw Caml_builtin_exceptions.division_by_zero;\n  }\n  else {\n    return x / y | 0;\n  }\n}\n\nfunction mod_(x, y) {\n  if (y === 0) {\n    throw Caml_builtin_exceptions.division_by_zero;\n  }\n  else {\n    return x % y;\n  }\n}\n\nfunction caml_bswap16(x) {\n  return ((x & 255) << 8) | ((x & 65280) >>> 8);\n}\n\nfunction caml_int32_bswap(x) {\n  return ((x & 255) << 24) | ((x & 65280) << 8) | ((x & 16711680) >>> 8) | ((x & 4278190080) >>> 24);\n}\n\nvar imul = ( Math.imul || function (x,y) {\n  y |= 0; return ((((x >> 16) * y) << 16) + (x & 0xffff) * y)|0; \n}\n);\n\nvar caml_nativeint_bswap = caml_int32_bswap;\n\nexports.div                  = div;\nexports.mod_                 = mod_;\nexports.caml_bswap16         = caml_bswap16;\nexports.caml_int32_bswap     = caml_int32_bswap;\nexports.caml_nativeint_bswap = caml_nativeint_bswap;\nexports.imul                 = imul;\n/* imul Not a pure module */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/caml_int32.js\n ** module id = 14\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/caml_int32.js?");

/***/ },
/* 15 */
/***/ function(module, exports) {

	eval("'use strict';\n\n\nvar repeat = ( (String.prototype.repeat && function (count,self){return self.repeat(count)}) ||\n                                                  function(count , self) {\n        if (self.length == 0 || count == 0) {\n            return '';\n        }\n        // Ensuring count is a 31-bit integer allows us to heavily optimize the\n        // main part. But anyway, most current (August 2014) browsers can't handle\n        // strings 1 << 28 chars or longer, so:\n        if (self.length * count >= 1 << 28) {\n            throw new RangeError('repeat count must not overflow maximum string size');\n        }\n        var rpt = '';\n        for (;;) {\n            if ((count & 1) == 1) {\n                rpt += self;\n            }\n            count >>>= 1;\n            if (count == 0) {\n                break;\n            }\n            self += self;\n        }\n        return rpt;\n    }\n);\n\nexports.repeat = repeat;\n/* repeat Not a pure module */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/caml_utils.js\n ** module id = 15\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/caml_utils.js?");

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\n\nfunction js_string_of_char(prim) {\n  return String.fromCharCode(prim);\n}\n\nfunction caml_string_get(s, i) {\n  if (i >= s.length || i < 0) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"index out of bounds\"\n        ];\n  }\n  else {\n    return s.charCodeAt(i);\n  }\n}\n\nfunction caml_create_string(len) {\n  if (len < 0) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.create\"\n        ];\n  }\n  else {\n    return new Array(len);\n  }\n}\n\nfunction caml_string_compare(s1, s2) {\n  if (s1 === s2) {\n    return 0;\n  }\n  else if (s1 < s2) {\n    return -1;\n  }\n  else {\n    return 1;\n  }\n}\n\nfunction caml_fill_string(s, i, l, c) {\n  if (l > 0) {\n    for(var k = i ,k_finish = (l + i | 0) - 1 | 0; k <= k_finish; ++k){\n      s[k] = c;\n    }\n    return /* () */0;\n  }\n  else {\n    return 0;\n  }\n}\n\nfunction caml_blit_string(s1, i1, s2, i2, len) {\n  if (len > 0) {\n    var off1 = s1.length - i1 | 0;\n    if (len <= off1) {\n      for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n        s2[i2 + i | 0] = s1.charCodeAt(i1 + i | 0);\n      }\n      return /* () */0;\n    }\n    else {\n      for(var i$1 = 0 ,i_finish$1 = off1 - 1 | 0; i$1 <= i_finish$1; ++i$1){\n        s2[i2 + i$1 | 0] = s1.charCodeAt(i1 + i$1 | 0);\n      }\n      for(var i$2 = off1 ,i_finish$2 = len - 1 | 0; i$2 <= i_finish$2; ++i$2){\n        s2[i2 + i$2 | 0] = /* \"\\000\" */0;\n      }\n      return /* () */0;\n    }\n  }\n  else {\n    return 0;\n  }\n}\n\nfunction caml_blit_bytes(s1, i1, s2, i2, len) {\n  if (len > 0) {\n    var off1 = s1.length - i1 | 0;\n    if (len <= off1) {\n      for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n        s2[i2 + i | 0] = s1[i1 + i | 0];\n      }\n      return /* () */0;\n    }\n    else {\n      for(var i$1 = 0 ,i_finish$1 = off1 - 1 | 0; i$1 <= i_finish$1; ++i$1){\n        s2[i2 + i$1 | 0] = s1[i1 + i$1 | 0];\n      }\n      for(var i$2 = off1 ,i_finish$2 = len - 1 | 0; i$2 <= i_finish$2; ++i$2){\n        s2[i2 + i$2 | 0] = /* \"\\000\" */0;\n      }\n      return /* () */0;\n    }\n  }\n  else {\n    return 0;\n  }\n}\n\nfunction bytes_of_string(s) {\n  var len = s.length;\n  var res = new Array(len);\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    res[i] = s.charCodeAt(i);\n  }\n  return res;\n}\n\nfunction bytes_to_string(a) {\n  var bytes = a;\n  var i = 0;\n  var len = a.length;\n  var s = \"\";\n  var s_len = len;\n  if (i === 0 && len <= 4096 && len === bytes.length) {\n    return String.fromCharCode.apply(null,bytes);\n  }\n  else {\n    var offset = 0;\n    while(s_len > 0) {\n      var next = s_len < 1024 ? s_len : 1024;\n      var tmp_bytes = new Array(next);\n      caml_blit_bytes(bytes, offset, tmp_bytes, 0, next);\n      s = s + String.fromCharCode.apply(null,tmp_bytes);\n      s_len = s_len - next | 0;\n      offset = offset + next | 0;\n    };\n    return s;\n  }\n}\n\nfunction caml_string_of_char_array(chars) {\n  var len = chars.length;\n  var bytes = new Array(len);\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    bytes[i] = chars[i];\n  }\n  return bytes_to_string(bytes);\n}\n\nfunction caml_is_printable(c) {\n  if (c > 31) {\n    return +(c < 127);\n  }\n  else {\n    return /* false */0;\n  }\n}\n\nfunction caml_string_get16(s, i) {\n  return s.charCodeAt(i) + (s.charCodeAt(i + 1 | 0) << 8) | 0;\n}\n\nfunction caml_string_get32(s, i) {\n  return ((s.charCodeAt(i) + (s.charCodeAt(i + 1 | 0) << 8) | 0) + (s.charCodeAt(i + 2 | 0) << 16) | 0) + (s.charCodeAt(i + 3 | 0) << 24) | 0;\n}\n\nfunction get(s, i) {\n  if (i < 0 || i >= s.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"index out of bounds\"\n        ];\n  }\n  else {\n    return s.charCodeAt(i);\n  }\n}\n\nexports.bytes_of_string           = bytes_of_string;\nexports.bytes_to_string           = bytes_to_string;\nexports.caml_is_printable         = caml_is_printable;\nexports.caml_string_of_char_array = caml_string_of_char_array;\nexports.caml_string_get           = caml_string_get;\nexports.caml_string_compare       = caml_string_compare;\nexports.caml_create_string        = caml_create_string;\nexports.caml_fill_string          = caml_fill_string;\nexports.caml_blit_string          = caml_blit_string;\nexports.caml_blit_bytes           = caml_blit_bytes;\nexports.caml_string_get16         = caml_string_get16;\nexports.caml_string_get32         = caml_string_get32;\nexports.js_string_of_char         = js_string_of_char;\nexports.get                       = get;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/caml_string.js\n ** module id = 16\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/caml_string.js?");

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Block = __webpack_require__(1);\n\nfunction erase_rel(param) {\n  if (typeof param === \"number\") {\n    return /* End_of_fmtty */0;\n  }\n  else {\n    switch (param.tag | 0) {\n      case 0 : \n          return /* Char_ty */Block.__(0, [erase_rel(param[0])]);\n      case 1 : \n          return /* String_ty */Block.__(1, [erase_rel(param[0])]);\n      case 2 : \n          return /* Int_ty */Block.__(2, [erase_rel(param[0])]);\n      case 3 : \n          return /* Int32_ty */Block.__(3, [erase_rel(param[0])]);\n      case 4 : \n          return /* Nativeint_ty */Block.__(4, [erase_rel(param[0])]);\n      case 5 : \n          return /* Int64_ty */Block.__(5, [erase_rel(param[0])]);\n      case 6 : \n          return /* Float_ty */Block.__(6, [erase_rel(param[0])]);\n      case 7 : \n          return /* Bool_ty */Block.__(7, [erase_rel(param[0])]);\n      case 8 : \n          return /* Format_arg_ty */Block.__(8, [\n                    param[0],\n                    erase_rel(param[1])\n                  ]);\n      case 9 : \n          var ty1 = param[0];\n          return /* Format_subst_ty */Block.__(9, [\n                    ty1,\n                    ty1,\n                    erase_rel(param[2])\n                  ]);\n      case 10 : \n          return /* Alpha_ty */Block.__(10, [erase_rel(param[0])]);\n      case 11 : \n          return /* Theta_ty */Block.__(11, [erase_rel(param[0])]);\n      case 12 : \n          return /* Any_ty */Block.__(12, [erase_rel(param[0])]);\n      case 13 : \n          return /* Reader_ty */Block.__(13, [erase_rel(param[0])]);\n      case 14 : \n          return /* Ignored_reader_ty */Block.__(14, [erase_rel(param[0])]);\n      \n    }\n  }\n}\n\nfunction concat_fmtty(fmtty1, fmtty2) {\n  if (typeof fmtty1 === \"number\") {\n    return fmtty2;\n  }\n  else {\n    switch (fmtty1.tag | 0) {\n      case 0 : \n          return /* Char_ty */Block.__(0, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 1 : \n          return /* String_ty */Block.__(1, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 2 : \n          return /* Int_ty */Block.__(2, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 3 : \n          return /* Int32_ty */Block.__(3, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 4 : \n          return /* Nativeint_ty */Block.__(4, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 5 : \n          return /* Int64_ty */Block.__(5, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 6 : \n          return /* Float_ty */Block.__(6, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 7 : \n          return /* Bool_ty */Block.__(7, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 8 : \n          return /* Format_arg_ty */Block.__(8, [\n                    fmtty1[0],\n                    concat_fmtty(fmtty1[1], fmtty2)\n                  ]);\n      case 9 : \n          return /* Format_subst_ty */Block.__(9, [\n                    fmtty1[0],\n                    fmtty1[1],\n                    concat_fmtty(fmtty1[2], fmtty2)\n                  ]);\n      case 10 : \n          return /* Alpha_ty */Block.__(10, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 11 : \n          return /* Theta_ty */Block.__(11, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 12 : \n          return /* Any_ty */Block.__(12, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 13 : \n          return /* Reader_ty */Block.__(13, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 14 : \n          return /* Ignored_reader_ty */Block.__(14, [concat_fmtty(fmtty1[0], fmtty2)]);\n      \n    }\n  }\n}\n\nfunction concat_fmt(fmt1, fmt2) {\n  if (typeof fmt1 === \"number\") {\n    return fmt2;\n  }\n  else {\n    switch (fmt1.tag | 0) {\n      case 0 : \n          return /* Char */Block.__(0, [concat_fmt(fmt1[0], fmt2)]);\n      case 1 : \n          return /* Caml_char */Block.__(1, [concat_fmt(fmt1[0], fmt2)]);\n      case 2 : \n          return /* String */Block.__(2, [\n                    fmt1[0],\n                    concat_fmt(fmt1[1], fmt2)\n                  ]);\n      case 3 : \n          return /* Caml_string */Block.__(3, [\n                    fmt1[0],\n                    concat_fmt(fmt1[1], fmt2)\n                  ]);\n      case 4 : \n          return /* Int */Block.__(4, [\n                    fmt1[0],\n                    fmt1[1],\n                    fmt1[2],\n                    concat_fmt(fmt1[3], fmt2)\n                  ]);\n      case 5 : \n          return /* Int32 */Block.__(5, [\n                    fmt1[0],\n                    fmt1[1],\n                    fmt1[2],\n                    concat_fmt(fmt1[3], fmt2)\n                  ]);\n      case 6 : \n          return /* Nativeint */Block.__(6, [\n                    fmt1[0],\n                    fmt1[1],\n                    fmt1[2],\n                    concat_fmt(fmt1[3], fmt2)\n                  ]);\n      case 7 : \n          return /* Int64 */Block.__(7, [\n                    fmt1[0],\n                    fmt1[1],\n                    fmt1[2],\n                    concat_fmt(fmt1[3], fmt2)\n                  ]);\n      case 8 : \n          return /* Float */Block.__(8, [\n                    fmt1[0],\n                    fmt1[1],\n                    fmt1[2],\n                    concat_fmt(fmt1[3], fmt2)\n                  ]);\n      case 9 : \n          return /* Bool */Block.__(9, [concat_fmt(fmt1[0], fmt2)]);\n      case 10 : \n          return /* Flush */Block.__(10, [concat_fmt(fmt1[0], fmt2)]);\n      case 11 : \n          return /* String_literal */Block.__(11, [\n                    fmt1[0],\n                    concat_fmt(fmt1[1], fmt2)\n                  ]);\n      case 12 : \n          return /* Char_literal */Block.__(12, [\n                    fmt1[0],\n                    concat_fmt(fmt1[1], fmt2)\n                  ]);\n      case 13 : \n          return /* Format_arg */Block.__(13, [\n                    fmt1[0],\n                    fmt1[1],\n                    concat_fmt(fmt1[2], fmt2)\n                  ]);\n      case 14 : \n          return /* Format_subst */Block.__(14, [\n                    fmt1[0],\n                    fmt1[1],\n                    concat_fmt(fmt1[2], fmt2)\n                  ]);\n      case 15 : \n          return /* Alpha */Block.__(15, [concat_fmt(fmt1[0], fmt2)]);\n      case 16 : \n          return /* Theta */Block.__(16, [concat_fmt(fmt1[0], fmt2)]);\n      case 17 : \n          return /* Formatting_lit */Block.__(17, [\n                    fmt1[0],\n                    concat_fmt(fmt1[1], fmt2)\n                  ]);\n      case 18 : \n          return /* Formatting_gen */Block.__(18, [\n                    fmt1[0],\n                    concat_fmt(fmt1[1], fmt2)\n                  ]);\n      case 19 : \n          return /* Reader */Block.__(19, [concat_fmt(fmt1[0], fmt2)]);\n      case 20 : \n          return /* Scan_char_set */Block.__(20, [\n                    fmt1[0],\n                    fmt1[1],\n                    concat_fmt(fmt1[2], fmt2)\n                  ]);\n      case 21 : \n          return /* Scan_get_counter */Block.__(21, [\n                    fmt1[0],\n                    concat_fmt(fmt1[1], fmt2)\n                  ]);\n      case 22 : \n          return /* Scan_next_char */Block.__(22, [concat_fmt(fmt1[0], fmt2)]);\n      case 23 : \n          return /* Ignored_param */Block.__(23, [\n                    fmt1[0],\n                    concat_fmt(fmt1[1], fmt2)\n                  ]);\n      case 24 : \n          return /* Custom */Block.__(24, [\n                    fmt1[0],\n                    fmt1[1],\n                    concat_fmt(fmt1[2], fmt2)\n                  ]);\n      \n    }\n  }\n}\n\nexports.concat_fmtty = concat_fmtty;\nexports.erase_rel    = erase_rel;\nexports.concat_fmt   = concat_fmt;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/camlinternalFormatBasics.js\n ** module id = 17\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/camlinternalFormatBasics.js?");

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Bytes                   = __webpack_require__(19);\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Pervasives              = __webpack_require__(7);\nvar Sys                     = __webpack_require__(22);\nvar Curry                   = __webpack_require__(2);\nvar $$String                = __webpack_require__(23);\nvar Caml_string             = __webpack_require__(16);\n\nfunction create(n) {\n  var n$1 = n < 1 ? 1 : n;\n  var n$2 = n$1 > Sys.max_string_length ? Sys.max_string_length : n$1;\n  var s = Caml_string.caml_create_string(n$2);\n  return /* record */[\n          /* buffer */s,\n          /* position */0,\n          /* length */n$2,\n          /* initial_buffer */s\n        ];\n}\n\nfunction contents(b) {\n  return Bytes.sub_string(b[/* buffer */0], 0, b[/* position */1]);\n}\n\nfunction to_bytes(b) {\n  return Bytes.sub(b[/* buffer */0], 0, b[/* position */1]);\n}\n\nfunction sub(b, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (b[/* position */1] - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Buffer.sub\"\n        ];\n  }\n  else {\n    return Bytes.sub_string(b[/* buffer */0], ofs, len);\n  }\n}\n\nfunction blit(src, srcoff, dst, dstoff, len) {\n  if (len < 0 || srcoff < 0 || srcoff > (src[/* position */1] - len | 0) || dstoff < 0 || dstoff > (dst.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Buffer.blit\"\n        ];\n  }\n  else {\n    return Bytes.blit(src[/* buffer */0], srcoff, dst, dstoff, len);\n  }\n}\n\nfunction nth(b, ofs) {\n  if (ofs < 0 || ofs >= b[/* position */1]) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Buffer.nth\"\n        ];\n  }\n  else {\n    return b[/* buffer */0][ofs];\n  }\n}\n\nfunction length(b) {\n  return b[/* position */1];\n}\n\nfunction clear(b) {\n  b[/* position */1] = 0;\n  return /* () */0;\n}\n\nfunction reset(b) {\n  b[/* position */1] = 0;\n  b[/* buffer */0] = b[/* initial_buffer */3];\n  b[/* length */2] = b[/* buffer */0].length;\n  return /* () */0;\n}\n\nfunction resize(b, more) {\n  var len = b[/* length */2];\n  var new_len = len;\n  while((b[/* position */1] + more | 0) > new_len) {\n    new_len = (new_len << 1);\n  };\n  if (new_len > Sys.max_string_length) {\n    if ((b[/* position */1] + more | 0) <= Sys.max_string_length) {\n      new_len = Sys.max_string_length;\n    }\n    else {\n      throw [\n            Caml_builtin_exceptions.failure,\n            \"Buffer.add: cannot grow buffer\"\n          ];\n    }\n  }\n  var new_buffer = Caml_string.caml_create_string(new_len);\n  Bytes.blit(b[/* buffer */0], 0, new_buffer, 0, b[/* position */1]);\n  b[/* buffer */0] = new_buffer;\n  b[/* length */2] = new_len;\n  return /* () */0;\n}\n\nfunction add_char(b, c) {\n  var pos = b[/* position */1];\n  if (pos >= b[/* length */2]) {\n    resize(b, 1);\n  }\n  b[/* buffer */0][pos] = c;\n  b[/* position */1] = pos + 1 | 0;\n  return /* () */0;\n}\n\nfunction add_substring(b, s, offset, len) {\n  if (offset < 0 || len < 0 || (offset + len | 0) > s.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Buffer.add_substring/add_subbytes\"\n        ];\n  }\n  var new_position = b[/* position */1] + len | 0;\n  if (new_position > b[/* length */2]) {\n    resize(b, len);\n  }\n  Bytes.blit_string(s, offset, b[/* buffer */0], b[/* position */1], len);\n  b[/* position */1] = new_position;\n  return /* () */0;\n}\n\nfunction add_subbytes(b, s, offset, len) {\n  return add_substring(b, Caml_string.bytes_to_string(s), offset, len);\n}\n\nfunction add_string(b, s) {\n  var len = s.length;\n  var new_position = b[/* position */1] + len | 0;\n  if (new_position > b[/* length */2]) {\n    resize(b, len);\n  }\n  Bytes.blit_string(s, 0, b[/* buffer */0], b[/* position */1], len);\n  b[/* position */1] = new_position;\n  return /* () */0;\n}\n\nfunction add_bytes(b, s) {\n  return add_string(b, Caml_string.bytes_to_string(s));\n}\n\nfunction add_buffer(b, bs) {\n  return add_subbytes(b, bs[/* buffer */0], 0, bs[/* position */1]);\n}\n\nfunction add_channel(b, ic, len) {\n  if (len < 0 || len > Sys.max_string_length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Buffer.add_channel\"\n        ];\n  }\n  if ((b[/* position */1] + len | 0) > b[/* length */2]) {\n    resize(b, len);\n  }\n  Pervasives.really_input(ic, b[/* buffer */0], b[/* position */1], len);\n  b[/* position */1] = b[/* position */1] + len | 0;\n  return /* () */0;\n}\n\nfunction output_buffer(oc, b) {\n  return Pervasives.output(oc, b[/* buffer */0], 0, b[/* position */1]);\n}\n\nfunction closing(param) {\n  if (param !== 40) {\n    if (param !== 123) {\n      throw [\n            Caml_builtin_exceptions.assert_failure,\n            [\n              \"buffer.ml\",\n              115,\n              9\n            ]\n          ];\n    }\n    else {\n      return /* \"}\" */125;\n    }\n  }\n  else {\n    return /* \")\" */41;\n  }\n}\n\nfunction advance_to_closing(opening, closing, k, s, start) {\n  var _k = k;\n  var _i = start;\n  var lim = s.length;\n  while(true) {\n    var i = _i;\n    var k$1 = _k;\n    if (i >= lim) {\n      throw Caml_builtin_exceptions.not_found;\n    }\n    else if (Caml_string.get(s, i) === opening) {\n      _i = i + 1 | 0;\n      _k = k$1 + 1 | 0;\n      continue ;\n      \n    }\n    else if (Caml_string.get(s, i) === closing) {\n      if (k$1) {\n        _i = i + 1 | 0;\n        _k = k$1 - 1 | 0;\n        continue ;\n        \n      }\n      else {\n        return i;\n      }\n    }\n    else {\n      _i = i + 1 | 0;\n      continue ;\n      \n    }\n  };\n}\n\nfunction advance_to_non_alpha(s, start) {\n  var _i = start;\n  var lim = s.length;\n  while(true) {\n    var i = _i;\n    if (i >= lim) {\n      return lim;\n    }\n    else {\n      var match = Caml_string.get(s, i);\n      var exit = 0;\n      if (match >= 91) {\n        if (match >= 97) {\n          if (match >= 123) {\n            return i;\n          }\n          else {\n            exit = 1;\n          }\n        }\n        else if (match !== 95) {\n          return i;\n        }\n        else {\n          exit = 1;\n        }\n      }\n      else if (match >= 58) {\n        if (match >= 65) {\n          exit = 1;\n        }\n        else {\n          return i;\n        }\n      }\n      else if (match >= 48) {\n        exit = 1;\n      }\n      else {\n        return i;\n      }\n      if (exit === 1) {\n        _i = i + 1 | 0;\n        continue ;\n        \n      }\n      \n    }\n  };\n}\n\nfunction find_ident(s, start, lim) {\n  if (start >= lim) {\n    throw Caml_builtin_exceptions.not_found;\n  }\n  else {\n    var c = Caml_string.get(s, start);\n    var exit = 0;\n    if (c !== 40) {\n      if (c !== 123) {\n        var stop = advance_to_non_alpha(s, start + 1 | 0);\n        return /* tuple */[\n                $$String.sub(s, start, stop - start | 0),\n                stop\n              ];\n      }\n      else {\n        exit = 1;\n      }\n    }\n    else {\n      exit = 1;\n    }\n    if (exit === 1) {\n      var new_start = start + 1 | 0;\n      var stop$1 = advance_to_closing(c, closing(c), 0, s, new_start);\n      return /* tuple */[\n              $$String.sub(s, new_start, (stop$1 - start | 0) - 1 | 0),\n              stop$1 + 1 | 0\n            ];\n    }\n    \n  }\n}\n\nfunction add_substitute(b, f, s) {\n  var lim = s.length;\n  var _previous = /* \" \" */32;\n  var _i = 0;\n  while(true) {\n    var i = _i;\n    var previous = _previous;\n    if (i < lim) {\n      var current = Caml_string.get(s, i);\n      if (current !== 36) {\n        if (previous === /* \"\\\\\" */92) {\n          add_char(b, /* \"\\\\\" */92);\n          add_char(b, current);\n          _i = i + 1 | 0;\n          _previous = /* \" \" */32;\n          continue ;\n          \n        }\n        else if (current !== 92) {\n          add_char(b, current);\n          _i = i + 1 | 0;\n          _previous = current;\n          continue ;\n          \n        }\n        else {\n          _i = i + 1 | 0;\n          _previous = current;\n          continue ;\n          \n        }\n      }\n      else if (previous === /* \"\\\\\" */92) {\n        add_char(b, current);\n        _i = i + 1 | 0;\n        _previous = /* \" \" */32;\n        continue ;\n        \n      }\n      else {\n        var j = i + 1 | 0;\n        var match = find_ident(s, j, lim);\n        add_string(b, Curry._1(f, match[0]));\n        _i = match[1];\n        _previous = /* \" \" */32;\n        continue ;\n        \n      }\n    }\n    else if (previous === /* \"\\\\\" */92) {\n      return add_char(b, previous);\n    }\n    else {\n      return 0;\n    }\n  };\n}\n\nexports.create         = create;\nexports.contents       = contents;\nexports.to_bytes       = to_bytes;\nexports.sub            = sub;\nexports.blit           = blit;\nexports.nth            = nth;\nexports.length         = length;\nexports.clear          = clear;\nexports.reset          = reset;\nexports.add_char       = add_char;\nexports.add_string     = add_string;\nexports.add_bytes      = add_bytes;\nexports.add_substring  = add_substring;\nexports.add_subbytes   = add_subbytes;\nexports.add_substitute = add_substitute;\nexports.add_buffer     = add_buffer;\nexports.add_channel    = add_channel;\nexports.output_buffer  = output_buffer;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/buffer.js\n ** module id = 18\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/buffer.js?");

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Caml_obj                = __webpack_require__(8);\nvar Pervasives              = __webpack_require__(7);\nvar Caml_int32              = __webpack_require__(14);\nvar Char                    = __webpack_require__(20);\nvar Curry                   = __webpack_require__(2);\nvar Caml_string             = __webpack_require__(16);\nvar List                    = __webpack_require__(21);\n\nfunction make(n, c) {\n  var s = Caml_string.caml_create_string(n);\n  Caml_string.caml_fill_string(s, 0, n, c);\n  return s;\n}\n\nfunction init(n, f) {\n  var s = Caml_string.caml_create_string(n);\n  for(var i = 0 ,i_finish = n - 1 | 0; i <= i_finish; ++i){\n    s[i] = Curry._1(f, i);\n  }\n  return s;\n}\n\nvar empty = [];\n\nfunction copy(s) {\n  var len = s.length;\n  var r = Caml_string.caml_create_string(len);\n  Caml_string.caml_blit_bytes(s, 0, r, 0, len);\n  return r;\n}\n\nfunction to_string(b) {\n  return Caml_string.bytes_to_string(copy(b));\n}\n\nfunction of_string(s) {\n  return copy(Caml_string.bytes_of_string(s));\n}\n\nfunction sub(s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.sub / Bytes.sub\"\n        ];\n  }\n  else {\n    var r = Caml_string.caml_create_string(len);\n    Caml_string.caml_blit_bytes(s, ofs, r, 0, len);\n    return r;\n  }\n}\n\nfunction sub_string(b, ofs, len) {\n  return Caml_string.bytes_to_string(sub(b, ofs, len));\n}\n\nfunction extend(s, left, right) {\n  var len = (s.length + left | 0) + right | 0;\n  var r = Caml_string.caml_create_string(len);\n  var match = left < 0 ? /* tuple */[\n      -left,\n      0\n    ] : /* tuple */[\n      0,\n      left\n    ];\n  var dstoff = match[1];\n  var srcoff = match[0];\n  var cpylen = Pervasives.min(s.length - srcoff | 0, len - dstoff | 0);\n  if (cpylen > 0) {\n    Caml_string.caml_blit_bytes(s, srcoff, r, dstoff, cpylen);\n  }\n  return r;\n}\n\nfunction fill(s, ofs, len, c) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.fill / Bytes.fill\"\n        ];\n  }\n  else {\n    return Caml_string.caml_fill_string(s, ofs, len, c);\n  }\n}\n\nfunction blit(s1, ofs1, s2, ofs2, len) {\n  if (len < 0 || ofs1 < 0 || ofs1 > (s1.length - len | 0) || ofs2 < 0 || ofs2 > (s2.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Bytes.blit\"\n        ];\n  }\n  else {\n    return Caml_string.caml_blit_bytes(s1, ofs1, s2, ofs2, len);\n  }\n}\n\nfunction blit_string(s1, ofs1, s2, ofs2, len) {\n  if (len < 0 || ofs1 < 0 || ofs1 > (s1.length - len | 0) || ofs2 < 0 || ofs2 > (s2.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.blit / Bytes.blit_string\"\n        ];\n  }\n  else {\n    return Caml_string.caml_blit_string(s1, ofs1, s2, ofs2, len);\n  }\n}\n\nfunction iter(f, a) {\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    Curry._1(f, a[i]);\n  }\n  return /* () */0;\n}\n\nfunction iteri(f, a) {\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    Curry._2(f, i, a[i]);\n  }\n  return /* () */0;\n}\n\nfunction concat(sep, l) {\n  if (l) {\n    var hd = l[0];\n    var num = [0];\n    var len = [0];\n    List.iter(function (s) {\n          num[0] = num[0] + 1 | 0;\n          len[0] = len[0] + s.length | 0;\n          return /* () */0;\n        }, l);\n    var r = Caml_string.caml_create_string(len[0] + Caml_int32.imul(sep.length, num[0] - 1 | 0) | 0);\n    Caml_string.caml_blit_bytes(hd, 0, r, 0, hd.length);\n    var pos = [hd.length];\n    List.iter(function (s) {\n          Caml_string.caml_blit_bytes(sep, 0, r, pos[0], sep.length);\n          pos[0] = pos[0] + sep.length | 0;\n          Caml_string.caml_blit_bytes(s, 0, r, pos[0], s.length);\n          pos[0] = pos[0] + s.length | 0;\n          return /* () */0;\n        }, l[1]);\n    return r;\n  }\n  else {\n    return empty;\n  }\n}\n\nfunction cat(a, b) {\n  return a.concat(b);\n}\n\nfunction is_space(param) {\n  var switcher = param - 9 | 0;\n  if (switcher > 4 || switcher < 0) {\n    if (switcher !== 23) {\n      return /* false */0;\n    }\n    else {\n      return /* true */1;\n    }\n  }\n  else if (switcher !== 2) {\n    return /* true */1;\n  }\n  else {\n    return /* false */0;\n  }\n}\n\nfunction trim(s) {\n  var len = s.length;\n  var i = 0;\n  while(i < len && is_space(s[i])) {\n    i = i + 1 | 0;\n  };\n  var j = len - 1 | 0;\n  while(j >= i && is_space(s[j])) {\n    j = j - 1 | 0;\n  };\n  if (j >= i) {\n    return sub(s, i, (j - i | 0) + 1 | 0);\n  }\n  else {\n    return empty;\n  }\n}\n\nfunction escaped(s) {\n  var n = 0;\n  for(var i = 0 ,i_finish = s.length - 1 | 0; i <= i_finish; ++i){\n    var match = s[i];\n    var $js;\n    if (match >= 32) {\n      var switcher = match - 34 | 0;\n      $js = switcher > 58 || switcher < 0 ? (\n          switcher >= 93 ? 4 : 1\n        ) : (\n          switcher > 57 || switcher < 1 ? 2 : 1\n        );\n    }\n    else {\n      $js = match >= 11 ? (\n          match !== 13 ? 4 : 2\n        ) : (\n          match >= 8 ? 2 : 4\n        );\n    }\n    n = n + $js | 0;\n  }\n  if (n === s.length) {\n    return copy(s);\n  }\n  else {\n    var s$prime = Caml_string.caml_create_string(n);\n    n = 0;\n    for(var i$1 = 0 ,i_finish$1 = s.length - 1 | 0; i$1 <= i_finish$1; ++i$1){\n      var c = s[i$1];\n      var exit = 0;\n      if (c >= 35) {\n        if (c !== 92) {\n          if (c >= 127) {\n            exit = 1;\n          }\n          else {\n            s$prime[n] = c;\n          }\n        }\n        else {\n          exit = 2;\n        }\n      }\n      else if (c >= 32) {\n        if (c >= 34) {\n          exit = 2;\n        }\n        else {\n          s$prime[n] = c;\n        }\n      }\n      else if (c >= 14) {\n        exit = 1;\n      }\n      else {\n        switch (c) {\n          case 8 : \n              s$prime[n] = /* \"\\\\\" */92;\n              n = n + 1 | 0;\n              s$prime[n] = /* \"b\" */98;\n              break;\n          case 9 : \n              s$prime[n] = /* \"\\\\\" */92;\n              n = n + 1 | 0;\n              s$prime[n] = /* \"t\" */116;\n              break;\n          case 10 : \n              s$prime[n] = /* \"\\\\\" */92;\n              n = n + 1 | 0;\n              s$prime[n] = /* \"n\" */110;\n              break;\n          case 0 : \n          case 1 : \n          case 2 : \n          case 3 : \n          case 4 : \n          case 5 : \n          case 6 : \n          case 7 : \n          case 11 : \n          case 12 : \n              exit = 1;\n              break;\n          case 13 : \n              s$prime[n] = /* \"\\\\\" */92;\n              n = n + 1 | 0;\n              s$prime[n] = /* \"r\" */114;\n              break;\n          \n        }\n      }\n      switch (exit) {\n        case 1 : \n            s$prime[n] = /* \"\\\\\" */92;\n            n = n + 1 | 0;\n            s$prime[n] = 48 + (c / 100 | 0) | 0;\n            n = n + 1 | 0;\n            s$prime[n] = 48 + (c / 10 | 0) % 10 | 0;\n            n = n + 1 | 0;\n            s$prime[n] = 48 + c % 10 | 0;\n            break;\n        case 2 : \n            s$prime[n] = /* \"\\\\\" */92;\n            n = n + 1 | 0;\n            s$prime[n] = c;\n            break;\n        \n      }\n      n = n + 1 | 0;\n    }\n    return s$prime;\n  }\n}\n\nfunction map(f, s) {\n  var l = s.length;\n  if (l) {\n    var r = Caml_string.caml_create_string(l);\n    for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n      r[i] = Curry._1(f, s[i]);\n    }\n    return r;\n  }\n  else {\n    return s;\n  }\n}\n\nfunction mapi(f, s) {\n  var l = s.length;\n  if (l) {\n    var r = Caml_string.caml_create_string(l);\n    for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n      r[i] = Curry._2(f, i, s[i]);\n    }\n    return r;\n  }\n  else {\n    return s;\n  }\n}\n\nfunction uppercase(s) {\n  return map(Char.uppercase, s);\n}\n\nfunction lowercase(s) {\n  return map(Char.lowercase, s);\n}\n\nfunction apply1(f, s) {\n  if (s.length) {\n    var r = copy(s);\n    r[0] = Curry._1(f, s[0]);\n    return r;\n  }\n  else {\n    return s;\n  }\n}\n\nfunction capitalize(s) {\n  return apply1(Char.uppercase, s);\n}\n\nfunction uncapitalize(s) {\n  return apply1(Char.lowercase, s);\n}\n\nfunction index_rec(s, lim, _i, c) {\n  while(true) {\n    var i = _i;\n    if (i >= lim) {\n      throw Caml_builtin_exceptions.not_found;\n    }\n    else if (s[i] === c) {\n      return i;\n    }\n    else {\n      _i = i + 1 | 0;\n      continue ;\n      \n    }\n  };\n}\n\nfunction index(s, c) {\n  return index_rec(s, s.length, 0, c);\n}\n\nfunction index_from(s, i, c) {\n  var l = s.length;\n  if (i < 0 || i > l) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.index_from / Bytes.index_from\"\n        ];\n  }\n  else {\n    return index_rec(s, l, i, c);\n  }\n}\n\nfunction rindex_rec(s, _i, c) {\n  while(true) {\n    var i = _i;\n    if (i < 0) {\n      throw Caml_builtin_exceptions.not_found;\n    }\n    else if (s[i] === c) {\n      return i;\n    }\n    else {\n      _i = i - 1 | 0;\n      continue ;\n      \n    }\n  };\n}\n\nfunction rindex(s, c) {\n  return rindex_rec(s, s.length - 1 | 0, c);\n}\n\nfunction rindex_from(s, i, c) {\n  if (i < -1 || i >= s.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.rindex_from / Bytes.rindex_from\"\n        ];\n  }\n  else {\n    return rindex_rec(s, i, c);\n  }\n}\n\nfunction contains_from(s, i, c) {\n  var l = s.length;\n  if (i < 0 || i > l) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.contains_from / Bytes.contains_from\"\n        ];\n  }\n  else {\n    try {\n      index_rec(s, l, i, c);\n      return /* true */1;\n    }\n    catch (exn){\n      if (exn === Caml_builtin_exceptions.not_found) {\n        return /* false */0;\n      }\n      else {\n        throw exn;\n      }\n    }\n  }\n}\n\nfunction contains(s, c) {\n  return contains_from(s, 0, c);\n}\n\nfunction rcontains_from(s, i, c) {\n  if (i < 0 || i >= s.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.rcontains_from / Bytes.rcontains_from\"\n        ];\n  }\n  else {\n    try {\n      rindex_rec(s, i, c);\n      return /* true */1;\n    }\n    catch (exn){\n      if (exn === Caml_builtin_exceptions.not_found) {\n        return /* false */0;\n      }\n      else {\n        throw exn;\n      }\n    }\n  }\n}\n\nvar compare = Caml_obj.caml_compare\n\nvar unsafe_to_string = Caml_string.bytes_to_string\n\nvar unsafe_of_string = Caml_string.bytes_of_string\n\nexports.make             = make;\nexports.init             = init;\nexports.empty            = empty;\nexports.copy             = copy;\nexports.of_string        = of_string;\nexports.to_string        = to_string;\nexports.sub              = sub;\nexports.sub_string       = sub_string;\nexports.extend           = extend;\nexports.fill             = fill;\nexports.blit             = blit;\nexports.blit_string      = blit_string;\nexports.concat           = concat;\nexports.cat              = cat;\nexports.iter             = iter;\nexports.iteri            = iteri;\nexports.map              = map;\nexports.mapi             = mapi;\nexports.trim             = trim;\nexports.escaped          = escaped;\nexports.index            = index;\nexports.rindex           = rindex;\nexports.index_from       = index_from;\nexports.rindex_from      = rindex_from;\nexports.contains         = contains;\nexports.contains_from    = contains_from;\nexports.rcontains_from   = rcontains_from;\nexports.uppercase        = uppercase;\nexports.lowercase        = lowercase;\nexports.capitalize       = capitalize;\nexports.uncapitalize     = uncapitalize;\nexports.compare          = compare;\nexports.unsafe_to_string = unsafe_to_string;\nexports.unsafe_of_string = unsafe_of_string;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/bytes.js\n ** module id = 19\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/bytes.js?");

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Caml_string             = __webpack_require__(16);\n\nfunction chr(n) {\n  if (n < 0 || n > 255) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Char.chr\"\n        ];\n  }\n  else {\n    return n;\n  }\n}\n\nfunction escaped(c) {\n  var exit = 0;\n  if (c >= 40) {\n    if (c !== 92) {\n      exit = c >= 127 ? 1 : 2;\n    }\n    else {\n      return \"\\\\\\\\\";\n    }\n  }\n  else if (c >= 32) {\n    if (c >= 39) {\n      return \"\\\\'\";\n    }\n    else {\n      exit = 2;\n    }\n  }\n  else if (c >= 14) {\n    exit = 1;\n  }\n  else {\n    switch (c) {\n      case 8 : \n          return \"\\\\b\";\n      case 9 : \n          return \"\\\\t\";\n      case 10 : \n          return \"\\\\n\";\n      case 0 : \n      case 1 : \n      case 2 : \n      case 3 : \n      case 4 : \n      case 5 : \n      case 6 : \n      case 7 : \n      case 11 : \n      case 12 : \n          exit = 1;\n          break;\n      case 13 : \n          return \"\\\\r\";\n      \n    }\n  }\n  switch (exit) {\n    case 1 : \n        var s = new Array(4);\n        s[0] = /* \"\\\\\" */92;\n        s[1] = 48 + (c / 100 | 0) | 0;\n        s[2] = 48 + (c / 10 | 0) % 10 | 0;\n        s[3] = 48 + c % 10 | 0;\n        return Caml_string.bytes_to_string(s);\n    case 2 : \n        var s$1 = new Array(1);\n        s$1[0] = c;\n        return Caml_string.bytes_to_string(s$1);\n    \n  }\n}\n\nfunction lowercase(c) {\n  if (c >= /* \"A\" */65 && c <= /* \"Z\" */90 || c >= /* \"\\192\" */192 && c <= /* \"\\214\" */214 || c >= /* \"\\216\" */216 && c <= /* \"\\222\" */222) {\n    return c + 32 | 0;\n  }\n  else {\n    return c;\n  }\n}\n\nfunction uppercase(c) {\n  if (c >= /* \"a\" */97 && c <= /* \"z\" */122 || c >= /* \"\\224\" */224 && c <= /* \"\\246\" */246 || c >= /* \"\\248\" */248 && c <= /* \"\\254\" */254) {\n    return c - 32 | 0;\n  }\n  else {\n    return c;\n  }\n}\n\nfunction compare(c1, c2) {\n  return c1 - c2 | 0;\n}\n\nexports.chr       = chr;\nexports.escaped   = escaped;\nexports.lowercase = lowercase;\nexports.uppercase = uppercase;\nexports.compare   = compare;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/char.js\n ** module id = 20\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/char.js?");

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Caml_obj                = __webpack_require__(8);\nvar Pervasives              = __webpack_require__(7);\nvar Curry                   = __webpack_require__(2);\n\nfunction length(l) {\n  var _len = 0;\n  var _param = l;\n  while(true) {\n    var param = _param;\n    var len = _len;\n    if (param) {\n      _param = param[1];\n      _len = len + 1 | 0;\n      continue ;\n      \n    }\n    else {\n      return len;\n    }\n  };\n}\n\nfunction hd(param) {\n  if (param) {\n    return param[0];\n  }\n  else {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"hd\"\n        ];\n  }\n}\n\nfunction tl(param) {\n  if (param) {\n    return param[1];\n  }\n  else {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"tl\"\n        ];\n  }\n}\n\nfunction nth(l, n) {\n  if (n < 0) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.nth\"\n        ];\n  }\n  else {\n    var _l = l;\n    var _n = n;\n    while(true) {\n      var n$1 = _n;\n      var l$1 = _l;\n      if (l$1) {\n        if (n$1) {\n          _n = n$1 - 1 | 0;\n          _l = l$1[1];\n          continue ;\n          \n        }\n        else {\n          return l$1[0];\n        }\n      }\n      else {\n        throw [\n              Caml_builtin_exceptions.failure,\n              \"nth\"\n            ];\n      }\n    };\n  }\n}\n\nfunction rev_append(_l1, _l2) {\n  while(true) {\n    var l2 = _l2;\n    var l1 = _l1;\n    if (l1) {\n      _l2 = /* :: */[\n        l1[0],\n        l2\n      ];\n      _l1 = l1[1];\n      continue ;\n      \n    }\n    else {\n      return l2;\n    }\n  };\n}\n\nfunction rev(l) {\n  return rev_append(l, /* [] */0);\n}\n\nfunction flatten(param) {\n  if (param) {\n    return Pervasives.$at(param[0], flatten(param[1]));\n  }\n  else {\n    return /* [] */0;\n  }\n}\n\nfunction map(f, param) {\n  if (param) {\n    var r = Curry._1(f, param[0]);\n    return /* :: */[\n            r,\n            map(f, param[1])\n          ];\n  }\n  else {\n    return /* [] */0;\n  }\n}\n\nfunction mapi(i, f, param) {\n  if (param) {\n    var r = Curry._2(f, i, param[0]);\n    return /* :: */[\n            r,\n            mapi(i + 1 | 0, f, param[1])\n          ];\n  }\n  else {\n    return /* [] */0;\n  }\n}\n\nfunction mapi$1(f, l) {\n  return mapi(0, f, l);\n}\n\nfunction rev_map(f, l) {\n  var _accu = /* [] */0;\n  var _param = l;\n  while(true) {\n    var param = _param;\n    var accu = _accu;\n    if (param) {\n      _param = param[1];\n      _accu = /* :: */[\n        Curry._1(f, param[0]),\n        accu\n      ];\n      continue ;\n      \n    }\n    else {\n      return accu;\n    }\n  };\n}\n\nfunction iter(f, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      Curry._1(f, param[0]);\n      _param = param[1];\n      continue ;\n      \n    }\n    else {\n      return /* () */0;\n    }\n  };\n}\n\nfunction iteri(f, l) {\n  var _i = 0;\n  var f$1 = f;\n  var _param = l;\n  while(true) {\n    var param = _param;\n    var i = _i;\n    if (param) {\n      Curry._2(f$1, i, param[0]);\n      _param = param[1];\n      _i = i + 1 | 0;\n      continue ;\n      \n    }\n    else {\n      return /* () */0;\n    }\n  };\n}\n\nfunction fold_left(f, _accu, _l) {\n  while(true) {\n    var l = _l;\n    var accu = _accu;\n    if (l) {\n      _l = l[1];\n      _accu = Curry._2(f, accu, l[0]);\n      continue ;\n      \n    }\n    else {\n      return accu;\n    }\n  };\n}\n\nfunction fold_right(f, l, accu) {\n  if (l) {\n    return Curry._2(f, l[0], fold_right(f, l[1], accu));\n  }\n  else {\n    return accu;\n  }\n}\n\nfunction map2(f, l1, l2) {\n  if (l1) {\n    if (l2) {\n      var r = Curry._2(f, l1[0], l2[0]);\n      return /* :: */[\n              r,\n              map2(f, l1[1], l2[1])\n            ];\n    }\n    else {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.map2\"\n          ];\n    }\n  }\n  else if (l2) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.map2\"\n        ];\n  }\n  else {\n    return /* [] */0;\n  }\n}\n\nfunction rev_map2(f, l1, l2) {\n  var _accu = /* [] */0;\n  var _l1 = l1;\n  var _l2 = l2;\n  while(true) {\n    var l2$1 = _l2;\n    var l1$1 = _l1;\n    var accu = _accu;\n    if (l1$1) {\n      if (l2$1) {\n        _l2 = l2$1[1];\n        _l1 = l1$1[1];\n        _accu = /* :: */[\n          Curry._2(f, l1$1[0], l2$1[0]),\n          accu\n        ];\n        continue ;\n        \n      }\n      else {\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              \"List.rev_map2\"\n            ];\n      }\n    }\n    else if (l2$1) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.rev_map2\"\n          ];\n    }\n    else {\n      return accu;\n    }\n  };\n}\n\nfunction iter2(f, _l1, _l2) {\n  while(true) {\n    var l2 = _l2;\n    var l1 = _l1;\n    if (l1) {\n      if (l2) {\n        Curry._2(f, l1[0], l2[0]);\n        _l2 = l2[1];\n        _l1 = l1[1];\n        continue ;\n        \n      }\n      else {\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              \"List.iter2\"\n            ];\n      }\n    }\n    else if (l2) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.iter2\"\n          ];\n    }\n    else {\n      return /* () */0;\n    }\n  };\n}\n\nfunction fold_left2(f, _accu, _l1, _l2) {\n  while(true) {\n    var l2 = _l2;\n    var l1 = _l1;\n    var accu = _accu;\n    if (l1) {\n      if (l2) {\n        _l2 = l2[1];\n        _l1 = l1[1];\n        _accu = Curry._3(f, accu, l1[0], l2[0]);\n        continue ;\n        \n      }\n      else {\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              \"List.fold_left2\"\n            ];\n      }\n    }\n    else if (l2) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.fold_left2\"\n          ];\n    }\n    else {\n      return accu;\n    }\n  };\n}\n\nfunction fold_right2(f, l1, l2, accu) {\n  if (l1) {\n    if (l2) {\n      return Curry._3(f, l1[0], l2[0], fold_right2(f, l1[1], l2[1], accu));\n    }\n    else {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.fold_right2\"\n          ];\n    }\n  }\n  else if (l2) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.fold_right2\"\n        ];\n  }\n  else {\n    return accu;\n  }\n}\n\nfunction for_all(p, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      if (Curry._1(p, param[0])) {\n        _param = param[1];\n        continue ;\n        \n      }\n      else {\n        return /* false */0;\n      }\n    }\n    else {\n      return /* true */1;\n    }\n  };\n}\n\nfunction exists(p, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      if (Curry._1(p, param[0])) {\n        return /* true */1;\n      }\n      else {\n        _param = param[1];\n        continue ;\n        \n      }\n    }\n    else {\n      return /* false */0;\n    }\n  };\n}\n\nfunction for_all2(p, _l1, _l2) {\n  while(true) {\n    var l2 = _l2;\n    var l1 = _l1;\n    if (l1) {\n      if (l2) {\n        if (Curry._2(p, l1[0], l2[0])) {\n          _l2 = l2[1];\n          _l1 = l1[1];\n          continue ;\n          \n        }\n        else {\n          return /* false */0;\n        }\n      }\n      else {\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              \"List.for_all2\"\n            ];\n      }\n    }\n    else if (l2) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.for_all2\"\n          ];\n    }\n    else {\n      return /* true */1;\n    }\n  };\n}\n\nfunction exists2(p, _l1, _l2) {\n  while(true) {\n    var l2 = _l2;\n    var l1 = _l1;\n    if (l1) {\n      if (l2) {\n        if (Curry._2(p, l1[0], l2[0])) {\n          return /* true */1;\n        }\n        else {\n          _l2 = l2[1];\n          _l1 = l1[1];\n          continue ;\n          \n        }\n      }\n      else {\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              \"List.exists2\"\n            ];\n      }\n    }\n    else if (l2) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.exists2\"\n          ];\n    }\n    else {\n      return /* false */0;\n    }\n  };\n}\n\nfunction mem(x, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      if (Caml_obj.caml_compare(param[0], x)) {\n        _param = param[1];\n        continue ;\n        \n      }\n      else {\n        return /* true */1;\n      }\n    }\n    else {\n      return /* false */0;\n    }\n  };\n}\n\nfunction memq(x, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      if (param[0] === x) {\n        return /* true */1;\n      }\n      else {\n        _param = param[1];\n        continue ;\n        \n      }\n    }\n    else {\n      return /* false */0;\n    }\n  };\n}\n\nfunction assoc(x, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      var match = param[0];\n      if (Caml_obj.caml_compare(match[0], x)) {\n        _param = param[1];\n        continue ;\n        \n      }\n      else {\n        return match[1];\n      }\n    }\n    else {\n      throw Caml_builtin_exceptions.not_found;\n    }\n  };\n}\n\nfunction assq(x, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      var match = param[0];\n      if (match[0] === x) {\n        return match[1];\n      }\n      else {\n        _param = param[1];\n        continue ;\n        \n      }\n    }\n    else {\n      throw Caml_builtin_exceptions.not_found;\n    }\n  };\n}\n\nfunction mem_assoc(x, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      if (Caml_obj.caml_compare(param[0][0], x)) {\n        _param = param[1];\n        continue ;\n        \n      }\n      else {\n        return /* true */1;\n      }\n    }\n    else {\n      return /* false */0;\n    }\n  };\n}\n\nfunction mem_assq(x, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      if (param[0][0] === x) {\n        return /* true */1;\n      }\n      else {\n        _param = param[1];\n        continue ;\n        \n      }\n    }\n    else {\n      return /* false */0;\n    }\n  };\n}\n\nfunction remove_assoc(x, param) {\n  if (param) {\n    var l = param[1];\n    var pair = param[0];\n    if (Caml_obj.caml_compare(pair[0], x)) {\n      return /* :: */[\n              pair,\n              remove_assoc(x, l)\n            ];\n    }\n    else {\n      return l;\n    }\n  }\n  else {\n    return /* [] */0;\n  }\n}\n\nfunction remove_assq(x, param) {\n  if (param) {\n    var l = param[1];\n    var pair = param[0];\n    if (pair[0] === x) {\n      return l;\n    }\n    else {\n      return /* :: */[\n              pair,\n              remove_assq(x, l)\n            ];\n    }\n  }\n  else {\n    return /* [] */0;\n  }\n}\n\nfunction find(p, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      var x = param[0];\n      if (Curry._1(p, x)) {\n        return x;\n      }\n      else {\n        _param = param[1];\n        continue ;\n        \n      }\n    }\n    else {\n      throw Caml_builtin_exceptions.not_found;\n    }\n  };\n}\n\nfunction find_all(p) {\n  return function (param) {\n    var _accu = /* [] */0;\n    var _param = param;\n    while(true) {\n      var param$1 = _param;\n      var accu = _accu;\n      if (param$1) {\n        var l = param$1[1];\n        var x = param$1[0];\n        if (Curry._1(p, x)) {\n          _param = l;\n          _accu = /* :: */[\n            x,\n            accu\n          ];\n          continue ;\n          \n        }\n        else {\n          _param = l;\n          continue ;\n          \n        }\n      }\n      else {\n        return rev_append(accu, /* [] */0);\n      }\n    };\n  };\n}\n\nfunction partition(p, l) {\n  var _yes = /* [] */0;\n  var _no = /* [] */0;\n  var _param = l;\n  while(true) {\n    var param = _param;\n    var no = _no;\n    var yes = _yes;\n    if (param) {\n      var l$1 = param[1];\n      var x = param[0];\n      if (Curry._1(p, x)) {\n        _param = l$1;\n        _yes = /* :: */[\n          x,\n          yes\n        ];\n        continue ;\n        \n      }\n      else {\n        _param = l$1;\n        _no = /* :: */[\n          x,\n          no\n        ];\n        continue ;\n        \n      }\n    }\n    else {\n      return /* tuple */[\n              rev_append(yes, /* [] */0),\n              rev_append(no, /* [] */0)\n            ];\n    }\n  };\n}\n\nfunction split(param) {\n  if (param) {\n    var match = param[0];\n    var match$1 = split(param[1]);\n    return /* tuple */[\n            /* :: */[\n              match[0],\n              match$1[0]\n            ],\n            /* :: */[\n              match[1],\n              match$1[1]\n            ]\n          ];\n  }\n  else {\n    return /* tuple */[\n            /* [] */0,\n            /* [] */0\n          ];\n  }\n}\n\nfunction combine(l1, l2) {\n  if (l1) {\n    if (l2) {\n      return /* :: */[\n              /* tuple */[\n                l1[0],\n                l2[0]\n              ],\n              combine(l1[1], l2[1])\n            ];\n    }\n    else {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.combine\"\n          ];\n    }\n  }\n  else if (l2) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.combine\"\n        ];\n  }\n  else {\n    return /* [] */0;\n  }\n}\n\nfunction merge(cmp, l1, l2) {\n  if (l1) {\n    if (l2) {\n      var h2 = l2[0];\n      var h1 = l1[0];\n      if (Curry._2(cmp, h1, h2) <= 0) {\n        return /* :: */[\n                h1,\n                merge(cmp, l1[1], l2)\n              ];\n      }\n      else {\n        return /* :: */[\n                h2,\n                merge(cmp, l1, l2[1])\n              ];\n      }\n    }\n    else {\n      return l1;\n    }\n  }\n  else {\n    return l2;\n  }\n}\n\nfunction chop(_k, _l) {\n  while(true) {\n    var l = _l;\n    var k = _k;\n    if (k) {\n      if (l) {\n        _l = l[1];\n        _k = k - 1 | 0;\n        continue ;\n        \n      }\n      else {\n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              [\n                \"list.ml\",\n                223,\n                11\n              ]\n            ];\n      }\n    }\n    else {\n      return l;\n    }\n  };\n}\n\nfunction stable_sort(cmp, l) {\n  var sort = function (n, l) {\n    var exit = 0;\n    if (n !== 2) {\n      if (n !== 3) {\n        exit = 1;\n      }\n      else if (l) {\n        var match = l[1];\n        if (match) {\n          var match$1 = match[1];\n          if (match$1) {\n            var x3 = match$1[0];\n            var x2 = match[0];\n            var x1 = l[0];\n            if (Curry._2(cmp, x1, x2) <= 0) {\n              if (Curry._2(cmp, x2, x3) <= 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x2,\n                          /* :: */[\n                            x3,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              }\n              else if (Curry._2(cmp, x1, x3) <= 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x3,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              }\n              else {\n                return /* :: */[\n                        x3,\n                        /* :: */[\n                          x1,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              }\n            }\n            else if (Curry._2(cmp, x1, x3) <= 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x1,\n                        /* :: */[\n                          x3,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            }\n            else if (Curry._2(cmp, x2, x3) <= 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x3,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            }\n            else {\n              return /* :: */[\n                      x3,\n                      /* :: */[\n                        x2,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            }\n          }\n          else {\n            exit = 1;\n          }\n        }\n        else {\n          exit = 1;\n        }\n      }\n      else {\n        exit = 1;\n      }\n    }\n    else if (l) {\n      var match$2 = l[1];\n      if (match$2) {\n        var x2$1 = match$2[0];\n        var x1$1 = l[0];\n        if (Curry._2(cmp, x1$1, x2$1) <= 0) {\n          return /* :: */[\n                  x1$1,\n                  /* :: */[\n                    x2$1,\n                    /* [] */0\n                  ]\n                ];\n        }\n        else {\n          return /* :: */[\n                  x2$1,\n                  /* :: */[\n                    x1$1,\n                    /* [] */0\n                  ]\n                ];\n        }\n      }\n      else {\n        exit = 1;\n      }\n    }\n    else {\n      exit = 1;\n    }\n    if (exit === 1) {\n      var n1 = (n >> 1);\n      var n2 = n - n1 | 0;\n      var l2 = chop(n1, l);\n      var s1 = rev_sort(n1, l);\n      var s2 = rev_sort(n2, l2);\n      var _l1 = s1;\n      var _l2 = s2;\n      var _accu = /* [] */0;\n      while(true) {\n        var accu = _accu;\n        var l2$1 = _l2;\n        var l1 = _l1;\n        if (l1) {\n          if (l2$1) {\n            var h2 = l2$1[0];\n            var h1 = l1[0];\n            if (Curry._2(cmp, h1, h2) > 0) {\n              _accu = /* :: */[\n                h1,\n                accu\n              ];\n              _l1 = l1[1];\n              continue ;\n              \n            }\n            else {\n              _accu = /* :: */[\n                h2,\n                accu\n              ];\n              _l2 = l2$1[1];\n              continue ;\n              \n            }\n          }\n          else {\n            return rev_append(l1, accu);\n          }\n        }\n        else {\n          return rev_append(l2$1, accu);\n        }\n      };\n    }\n    \n  };\n  var rev_sort = function (n, l) {\n    var exit = 0;\n    if (n !== 2) {\n      if (n !== 3) {\n        exit = 1;\n      }\n      else if (l) {\n        var match = l[1];\n        if (match) {\n          var match$1 = match[1];\n          if (match$1) {\n            var x3 = match$1[0];\n            var x2 = match[0];\n            var x1 = l[0];\n            if (Curry._2(cmp, x1, x2) > 0) {\n              if (Curry._2(cmp, x2, x3) > 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x2,\n                          /* :: */[\n                            x3,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              }\n              else if (Curry._2(cmp, x1, x3) > 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x3,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              }\n              else {\n                return /* :: */[\n                        x3,\n                        /* :: */[\n                          x1,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              }\n            }\n            else if (Curry._2(cmp, x1, x3) > 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x1,\n                        /* :: */[\n                          x3,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            }\n            else if (Curry._2(cmp, x2, x3) > 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x3,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            }\n            else {\n              return /* :: */[\n                      x3,\n                      /* :: */[\n                        x2,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            }\n          }\n          else {\n            exit = 1;\n          }\n        }\n        else {\n          exit = 1;\n        }\n      }\n      else {\n        exit = 1;\n      }\n    }\n    else if (l) {\n      var match$2 = l[1];\n      if (match$2) {\n        var x2$1 = match$2[0];\n        var x1$1 = l[0];\n        if (Curry._2(cmp, x1$1, x2$1) > 0) {\n          return /* :: */[\n                  x1$1,\n                  /* :: */[\n                    x2$1,\n                    /* [] */0\n                  ]\n                ];\n        }\n        else {\n          return /* :: */[\n                  x2$1,\n                  /* :: */[\n                    x1$1,\n                    /* [] */0\n                  ]\n                ];\n        }\n      }\n      else {\n        exit = 1;\n      }\n    }\n    else {\n      exit = 1;\n    }\n    if (exit === 1) {\n      var n1 = (n >> 1);\n      var n2 = n - n1 | 0;\n      var l2 = chop(n1, l);\n      var s1 = sort(n1, l);\n      var s2 = sort(n2, l2);\n      var _l1 = s1;\n      var _l2 = s2;\n      var _accu = /* [] */0;\n      while(true) {\n        var accu = _accu;\n        var l2$1 = _l2;\n        var l1 = _l1;\n        if (l1) {\n          if (l2$1) {\n            var h2 = l2$1[0];\n            var h1 = l1[0];\n            if (Curry._2(cmp, h1, h2) <= 0) {\n              _accu = /* :: */[\n                h1,\n                accu\n              ];\n              _l1 = l1[1];\n              continue ;\n              \n            }\n            else {\n              _accu = /* :: */[\n                h2,\n                accu\n              ];\n              _l2 = l2$1[1];\n              continue ;\n              \n            }\n          }\n          else {\n            return rev_append(l1, accu);\n          }\n        }\n        else {\n          return rev_append(l2$1, accu);\n        }\n      };\n    }\n    \n  };\n  var len = length(l);\n  if (len < 2) {\n    return l;\n  }\n  else {\n    return sort(len, l);\n  }\n}\n\nfunction sort_uniq(cmp, l) {\n  var sort = function (n, l) {\n    var exit = 0;\n    if (n !== 2) {\n      if (n !== 3) {\n        exit = 1;\n      }\n      else if (l) {\n        var match = l[1];\n        if (match) {\n          var match$1 = match[1];\n          if (match$1) {\n            var x3 = match$1[0];\n            var x2 = match[0];\n            var x1 = l[0];\n            var c = Curry._2(cmp, x1, x2);\n            if (c) {\n              if (c < 0) {\n                var c$1 = Curry._2(cmp, x2, x3);\n                if (c$1) {\n                  if (c$1 < 0) {\n                    return /* :: */[\n                            x1,\n                            /* :: */[\n                              x2,\n                              /* :: */[\n                                x3,\n                                /* [] */0\n                              ]\n                            ]\n                          ];\n                  }\n                  else {\n                    var c$2 = Curry._2(cmp, x1, x3);\n                    if (c$2) {\n                      if (c$2 < 0) {\n                        return /* :: */[\n                                x1,\n                                /* :: */[\n                                  x3,\n                                  /* :: */[\n                                    x2,\n                                    /* [] */0\n                                  ]\n                                ]\n                              ];\n                      }\n                      else {\n                        return /* :: */[\n                                x3,\n                                /* :: */[\n                                  x1,\n                                  /* :: */[\n                                    x2,\n                                    /* [] */0\n                                  ]\n                                ]\n                              ];\n                      }\n                    }\n                    else {\n                      return /* :: */[\n                              x1,\n                              /* :: */[\n                                x2,\n                                /* [] */0\n                              ]\n                            ];\n                    }\n                  }\n                }\n                else {\n                  return /* :: */[\n                          x1,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ];\n                }\n              }\n              else {\n                var c$3 = Curry._2(cmp, x1, x3);\n                if (c$3) {\n                  if (c$3 < 0) {\n                    return /* :: */[\n                            x2,\n                            /* :: */[\n                              x1,\n                              /* :: */[\n                                x3,\n                                /* [] */0\n                              ]\n                            ]\n                          ];\n                  }\n                  else {\n                    var c$4 = Curry._2(cmp, x2, x3);\n                    if (c$4) {\n                      if (c$4 < 0) {\n                        return /* :: */[\n                                x2,\n                                /* :: */[\n                                  x3,\n                                  /* :: */[\n                                    x1,\n                                    /* [] */0\n                                  ]\n                                ]\n                              ];\n                      }\n                      else {\n                        return /* :: */[\n                                x3,\n                                /* :: */[\n                                  x2,\n                                  /* :: */[\n                                    x1,\n                                    /* [] */0\n                                  ]\n                                ]\n                              ];\n                      }\n                    }\n                    else {\n                      return /* :: */[\n                              x2,\n                              /* :: */[\n                                x1,\n                                /* [] */0\n                              ]\n                            ];\n                    }\n                  }\n                }\n                else {\n                  return /* :: */[\n                          x2,\n                          /* :: */[\n                            x1,\n                            /* [] */0\n                          ]\n                        ];\n                }\n              }\n            }\n            else {\n              var c$5 = Curry._2(cmp, x2, x3);\n              if (c$5) {\n                if (c$5 < 0) {\n                  return /* :: */[\n                          x2,\n                          /* :: */[\n                            x3,\n                            /* [] */0\n                          ]\n                        ];\n                }\n                else {\n                  return /* :: */[\n                          x3,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ];\n                }\n              }\n              else {\n                return /* :: */[\n                        x2,\n                        /* [] */0\n                      ];\n              }\n            }\n          }\n          else {\n            exit = 1;\n          }\n        }\n        else {\n          exit = 1;\n        }\n      }\n      else {\n        exit = 1;\n      }\n    }\n    else if (l) {\n      var match$2 = l[1];\n      if (match$2) {\n        var x2$1 = match$2[0];\n        var x1$1 = l[0];\n        var c$6 = Curry._2(cmp, x1$1, x2$1);\n        if (c$6) {\n          if (c$6 < 0) {\n            return /* :: */[\n                    x1$1,\n                    /* :: */[\n                      x2$1,\n                      /* [] */0\n                    ]\n                  ];\n          }\n          else {\n            return /* :: */[\n                    x2$1,\n                    /* :: */[\n                      x1$1,\n                      /* [] */0\n                    ]\n                  ];\n          }\n        }\n        else {\n          return /* :: */[\n                  x1$1,\n                  /* [] */0\n                ];\n        }\n      }\n      else {\n        exit = 1;\n      }\n    }\n    else {\n      exit = 1;\n    }\n    if (exit === 1) {\n      var n1 = (n >> 1);\n      var n2 = n - n1 | 0;\n      var l2 = chop(n1, l);\n      var s1 = rev_sort(n1, l);\n      var s2 = rev_sort(n2, l2);\n      var _l1 = s1;\n      var _l2 = s2;\n      var _accu = /* [] */0;\n      while(true) {\n        var accu = _accu;\n        var l2$1 = _l2;\n        var l1 = _l1;\n        if (l1) {\n          if (l2$1) {\n            var t2 = l2$1[1];\n            var h2 = l2$1[0];\n            var t1 = l1[1];\n            var h1 = l1[0];\n            var c$7 = Curry._2(cmp, h1, h2);\n            if (c$7) {\n              if (c$7 > 0) {\n                _accu = /* :: */[\n                  h1,\n                  accu\n                ];\n                _l1 = t1;\n                continue ;\n                \n              }\n              else {\n                _accu = /* :: */[\n                  h2,\n                  accu\n                ];\n                _l2 = t2;\n                continue ;\n                \n              }\n            }\n            else {\n              _accu = /* :: */[\n                h1,\n                accu\n              ];\n              _l2 = t2;\n              _l1 = t1;\n              continue ;\n              \n            }\n          }\n          else {\n            return rev_append(l1, accu);\n          }\n        }\n        else {\n          return rev_append(l2$1, accu);\n        }\n      };\n    }\n    \n  };\n  var rev_sort = function (n, l) {\n    var exit = 0;\n    if (n !== 2) {\n      if (n !== 3) {\n        exit = 1;\n      }\n      else if (l) {\n        var match = l[1];\n        if (match) {\n          var match$1 = match[1];\n          if (match$1) {\n            var x3 = match$1[0];\n            var x2 = match[0];\n            var x1 = l[0];\n            var c = Curry._2(cmp, x1, x2);\n            if (c) {\n              if (c > 0) {\n                var c$1 = Curry._2(cmp, x2, x3);\n                if (c$1) {\n                  if (c$1 > 0) {\n                    return /* :: */[\n                            x1,\n                            /* :: */[\n                              x2,\n                              /* :: */[\n                                x3,\n                                /* [] */0\n                              ]\n                            ]\n                          ];\n                  }\n                  else {\n                    var c$2 = Curry._2(cmp, x1, x3);\n                    if (c$2) {\n                      if (c$2 > 0) {\n                        return /* :: */[\n                                x1,\n                                /* :: */[\n                                  x3,\n                                  /* :: */[\n                                    x2,\n                                    /* [] */0\n                                  ]\n                                ]\n                              ];\n                      }\n                      else {\n                        return /* :: */[\n                                x3,\n                                /* :: */[\n                                  x1,\n                                  /* :: */[\n                                    x2,\n                                    /* [] */0\n                                  ]\n                                ]\n                              ];\n                      }\n                    }\n                    else {\n                      return /* :: */[\n                              x1,\n                              /* :: */[\n                                x2,\n                                /* [] */0\n                              ]\n                            ];\n                    }\n                  }\n                }\n                else {\n                  return /* :: */[\n                          x1,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ];\n                }\n              }\n              else {\n                var c$3 = Curry._2(cmp, x1, x3);\n                if (c$3) {\n                  if (c$3 > 0) {\n                    return /* :: */[\n                            x2,\n                            /* :: */[\n                              x1,\n                              /* :: */[\n                                x3,\n                                /* [] */0\n                              ]\n                            ]\n                          ];\n                  }\n                  else {\n                    var c$4 = Curry._2(cmp, x2, x3);\n                    if (c$4) {\n                      if (c$4 > 0) {\n                        return /* :: */[\n                                x2,\n                                /* :: */[\n                                  x3,\n                                  /* :: */[\n                                    x1,\n                                    /* [] */0\n                                  ]\n                                ]\n                              ];\n                      }\n                      else {\n                        return /* :: */[\n                                x3,\n                                /* :: */[\n                                  x2,\n                                  /* :: */[\n                                    x1,\n                                    /* [] */0\n                                  ]\n                                ]\n                              ];\n                      }\n                    }\n                    else {\n                      return /* :: */[\n                              x2,\n                              /* :: */[\n                                x1,\n                                /* [] */0\n                              ]\n                            ];\n                    }\n                  }\n                }\n                else {\n                  return /* :: */[\n                          x2,\n                          /* :: */[\n                            x1,\n                            /* [] */0\n                          ]\n                        ];\n                }\n              }\n            }\n            else {\n              var c$5 = Curry._2(cmp, x2, x3);\n              if (c$5) {\n                if (c$5 > 0) {\n                  return /* :: */[\n                          x2,\n                          /* :: */[\n                            x3,\n                            /* [] */0\n                          ]\n                        ];\n                }\n                else {\n                  return /* :: */[\n                          x3,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ];\n                }\n              }\n              else {\n                return /* :: */[\n                        x2,\n                        /* [] */0\n                      ];\n              }\n            }\n          }\n          else {\n            exit = 1;\n          }\n        }\n        else {\n          exit = 1;\n        }\n      }\n      else {\n        exit = 1;\n      }\n    }\n    else if (l) {\n      var match$2 = l[1];\n      if (match$2) {\n        var x2$1 = match$2[0];\n        var x1$1 = l[0];\n        var c$6 = Curry._2(cmp, x1$1, x2$1);\n        if (c$6) {\n          if (c$6 > 0) {\n            return /* :: */[\n                    x1$1,\n                    /* :: */[\n                      x2$1,\n                      /* [] */0\n                    ]\n                  ];\n          }\n          else {\n            return /* :: */[\n                    x2$1,\n                    /* :: */[\n                      x1$1,\n                      /* [] */0\n                    ]\n                  ];\n          }\n        }\n        else {\n          return /* :: */[\n                  x1$1,\n                  /* [] */0\n                ];\n        }\n      }\n      else {\n        exit = 1;\n      }\n    }\n    else {\n      exit = 1;\n    }\n    if (exit === 1) {\n      var n1 = (n >> 1);\n      var n2 = n - n1 | 0;\n      var l2 = chop(n1, l);\n      var s1 = sort(n1, l);\n      var s2 = sort(n2, l2);\n      var _l1 = s1;\n      var _l2 = s2;\n      var _accu = /* [] */0;\n      while(true) {\n        var accu = _accu;\n        var l2$1 = _l2;\n        var l1 = _l1;\n        if (l1) {\n          if (l2$1) {\n            var t2 = l2$1[1];\n            var h2 = l2$1[0];\n            var t1 = l1[1];\n            var h1 = l1[0];\n            var c$7 = Curry._2(cmp, h1, h2);\n            if (c$7) {\n              if (c$7 < 0) {\n                _accu = /* :: */[\n                  h1,\n                  accu\n                ];\n                _l1 = t1;\n                continue ;\n                \n              }\n              else {\n                _accu = /* :: */[\n                  h2,\n                  accu\n                ];\n                _l2 = t2;\n                continue ;\n                \n              }\n            }\n            else {\n              _accu = /* :: */[\n                h1,\n                accu\n              ];\n              _l2 = t2;\n              _l1 = t1;\n              continue ;\n              \n            }\n          }\n          else {\n            return rev_append(l1, accu);\n          }\n        }\n        else {\n          return rev_append(l2$1, accu);\n        }\n      };\n    }\n    \n  };\n  var len = length(l);\n  if (len < 2) {\n    return l;\n  }\n  else {\n    return sort(len, l);\n  }\n}\n\nvar append = Pervasives.$at;\n\nvar concat = flatten;\n\nvar filter = find_all;\n\nvar sort = stable_sort;\n\nvar fast_sort = stable_sort;\n\nexports.length       = length;\nexports.hd           = hd;\nexports.tl           = tl;\nexports.nth          = nth;\nexports.rev          = rev;\nexports.append       = append;\nexports.rev_append   = rev_append;\nexports.concat       = concat;\nexports.flatten      = flatten;\nexports.iter         = iter;\nexports.iteri        = iteri;\nexports.map          = map;\nexports.mapi         = mapi$1;\nexports.rev_map      = rev_map;\nexports.fold_left    = fold_left;\nexports.fold_right   = fold_right;\nexports.iter2        = iter2;\nexports.map2         = map2;\nexports.rev_map2     = rev_map2;\nexports.fold_left2   = fold_left2;\nexports.fold_right2  = fold_right2;\nexports.for_all      = for_all;\nexports.exists       = exists;\nexports.for_all2     = for_all2;\nexports.exists2      = exists2;\nexports.mem          = mem;\nexports.memq         = memq;\nexports.find         = find;\nexports.filter       = filter;\nexports.find_all     = find_all;\nexports.partition    = partition;\nexports.assoc        = assoc;\nexports.assq         = assq;\nexports.mem_assoc    = mem_assoc;\nexports.mem_assq     = mem_assq;\nexports.remove_assoc = remove_assoc;\nexports.remove_assq  = remove_assq;\nexports.split        = split;\nexports.combine      = combine;\nexports.sort         = sort;\nexports.stable_sort  = stable_sort;\nexports.fast_sort    = fast_sort;\nexports.sort_uniq    = sort_uniq;\nexports.merge        = merge;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/list.js\n ** module id = 21\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/list.js?");

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_exceptions = __webpack_require__(11);\n\nvar is_js = /* true */1;\n\nvar match_001 = /* array */[];\n\nvar big_endian = /* false */0;\n\nvar unix = /* true */1;\n\nvar win32 = /* false */0;\n\nvar cygwin = /* false */0;\n\nvar max_array_length = 4294967295;\n\nvar max_string_length = 4294967295;\n\nvar interactive = [/* false */0];\n\nfunction set_signal(_, _$1) {\n  return /* () */0;\n}\n\nvar Break = Caml_exceptions.create(\"Sys.Break\");\n\nfunction catch_break() {\n  return /* () */0;\n}\n\nvar argv = match_001;\n\nvar executable_name = \"cmd\";\n\nvar os_type = \"Unix\";\n\nvar word_size = 32;\n\nvar sigabrt = -1;\n\nvar sigalrm = -2;\n\nvar sigfpe = -3;\n\nvar sighup = -4;\n\nvar sigill = -5;\n\nvar sigint = -6;\n\nvar sigkill = -7;\n\nvar sigpipe = -8;\n\nvar sigquit = -9;\n\nvar sigsegv = -10;\n\nvar sigterm = -11;\n\nvar sigusr1 = -12;\n\nvar sigusr2 = -13;\n\nvar sigchld = -14;\n\nvar sigcont = -15;\n\nvar sigstop = -16;\n\nvar sigtstp = -17;\n\nvar sigttin = -18;\n\nvar sigttou = -19;\n\nvar sigvtalrm = -20;\n\nvar sigprof = -21;\n\nvar ocaml_version = \"4.02.3+dev1-2015-07-10\";\n\nexports.argv              = argv;\nexports.executable_name   = executable_name;\nexports.interactive       = interactive;\nexports.os_type           = os_type;\nexports.unix              = unix;\nexports.win32             = win32;\nexports.cygwin            = cygwin;\nexports.word_size         = word_size;\nexports.big_endian        = big_endian;\nexports.is_js             = is_js;\nexports.max_string_length = max_string_length;\nexports.max_array_length  = max_array_length;\nexports.set_signal        = set_signal;\nexports.sigabrt           = sigabrt;\nexports.sigalrm           = sigalrm;\nexports.sigfpe            = sigfpe;\nexports.sighup            = sighup;\nexports.sigill            = sigill;\nexports.sigint            = sigint;\nexports.sigkill           = sigkill;\nexports.sigpipe           = sigpipe;\nexports.sigquit           = sigquit;\nexports.sigsegv           = sigsegv;\nexports.sigterm           = sigterm;\nexports.sigusr1           = sigusr1;\nexports.sigusr2           = sigusr2;\nexports.sigchld           = sigchld;\nexports.sigcont           = sigcont;\nexports.sigstop           = sigstop;\nexports.sigtstp           = sigtstp;\nexports.sigttin           = sigttin;\nexports.sigttou           = sigttou;\nexports.sigvtalrm         = sigvtalrm;\nexports.sigprof           = sigprof;\nexports.Break             = Break;\nexports.catch_break       = catch_break;\nexports.ocaml_version     = ocaml_version;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/sys.js\n ** module id = 22\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/sys.js?");

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Bytes       = __webpack_require__(19);\nvar Caml_int32  = __webpack_require__(14);\nvar Caml_string = __webpack_require__(16);\nvar List        = __webpack_require__(21);\n\nfunction make(n, c) {\n  return Caml_string.bytes_to_string(Bytes.make(n, c));\n}\n\nfunction init(n, f) {\n  return Caml_string.bytes_to_string(Bytes.init(n, f));\n}\n\nfunction copy(s) {\n  return Caml_string.bytes_to_string(Bytes.copy(Caml_string.bytes_of_string(s)));\n}\n\nfunction sub(s, ofs, len) {\n  return Caml_string.bytes_to_string(Bytes.sub(Caml_string.bytes_of_string(s), ofs, len));\n}\n\nfunction concat(sep, l) {\n  if (l) {\n    var hd = l[0];\n    var num = [0];\n    var len = [0];\n    List.iter(function (s) {\n          num[0] = num[0] + 1 | 0;\n          len[0] = len[0] + s.length | 0;\n          return /* () */0;\n        }, l);\n    var r = Caml_string.caml_create_string(len[0] + Caml_int32.imul(sep.length, num[0] - 1 | 0) | 0);\n    Caml_string.caml_blit_string(hd, 0, r, 0, hd.length);\n    var pos = [hd.length];\n    List.iter(function (s) {\n          Caml_string.caml_blit_string(sep, 0, r, pos[0], sep.length);\n          pos[0] = pos[0] + sep.length | 0;\n          Caml_string.caml_blit_string(s, 0, r, pos[0], s.length);\n          pos[0] = pos[0] + s.length | 0;\n          return /* () */0;\n        }, l[1]);\n    return Caml_string.bytes_to_string(r);\n  }\n  else {\n    return \"\";\n  }\n}\n\nfunction iter(f, s) {\n  return Bytes.iter(f, Caml_string.bytes_of_string(s));\n}\n\nfunction iteri(f, s) {\n  return Bytes.iteri(f, Caml_string.bytes_of_string(s));\n}\n\nfunction map(f, s) {\n  return Caml_string.bytes_to_string(Bytes.map(f, Caml_string.bytes_of_string(s)));\n}\n\nfunction mapi(f, s) {\n  return Caml_string.bytes_to_string(Bytes.mapi(f, Caml_string.bytes_of_string(s)));\n}\n\nfunction is_space(param) {\n  var switcher = param - 9 | 0;\n  if (switcher > 4 || switcher < 0) {\n    if (switcher !== 23) {\n      return /* false */0;\n    }\n    else {\n      return /* true */1;\n    }\n  }\n  else if (switcher !== 2) {\n    return /* true */1;\n  }\n  else {\n    return /* false */0;\n  }\n}\n\nfunction trim(s) {\n  if (s === \"\" || !(is_space(s.charCodeAt(0)) || is_space(s.charCodeAt(s.length - 1 | 0)))) {\n    return s;\n  }\n  else {\n    return Caml_string.bytes_to_string(Bytes.trim(Caml_string.bytes_of_string(s)));\n  }\n}\n\nfunction escaped(s) {\n  var needs_escape = function (_i) {\n    while(true) {\n      var i = _i;\n      if (i >= s.length) {\n        return /* false */0;\n      }\n      else {\n        var match = s.charCodeAt(i);\n        if (match >= 32) {\n          var switcher = match - 34 | 0;\n          if (switcher > 58 || switcher < 0) {\n            if (switcher >= 93) {\n              return /* true */1;\n            }\n            else {\n              _i = i + 1 | 0;\n              continue ;\n              \n            }\n          }\n          else if (switcher > 57 || switcher < 1) {\n            return /* true */1;\n          }\n          else {\n            _i = i + 1 | 0;\n            continue ;\n            \n          }\n        }\n        else {\n          return /* true */1;\n        }\n      }\n    };\n  };\n  if (needs_escape(0)) {\n    return Caml_string.bytes_to_string(Bytes.escaped(Caml_string.bytes_of_string(s)));\n  }\n  else {\n    return s;\n  }\n}\n\nfunction index(s, c) {\n  return Bytes.index(Caml_string.bytes_of_string(s), c);\n}\n\nfunction rindex(s, c) {\n  return Bytes.rindex(Caml_string.bytes_of_string(s), c);\n}\n\nfunction index_from(s, i, c) {\n  return Bytes.index_from(Caml_string.bytes_of_string(s), i, c);\n}\n\nfunction rindex_from(s, i, c) {\n  return Bytes.rindex_from(Caml_string.bytes_of_string(s), i, c);\n}\n\nfunction contains(s, c) {\n  return Bytes.contains(Caml_string.bytes_of_string(s), c);\n}\n\nfunction contains_from(s, i, c) {\n  return Bytes.contains_from(Caml_string.bytes_of_string(s), i, c);\n}\n\nfunction rcontains_from(s, i, c) {\n  return Bytes.rcontains_from(Caml_string.bytes_of_string(s), i, c);\n}\n\nfunction uppercase(s) {\n  return Caml_string.bytes_to_string(Bytes.uppercase(Caml_string.bytes_of_string(s)));\n}\n\nfunction lowercase(s) {\n  return Caml_string.bytes_to_string(Bytes.lowercase(Caml_string.bytes_of_string(s)));\n}\n\nfunction capitalize(s) {\n  return Caml_string.bytes_to_string(Bytes.capitalize(Caml_string.bytes_of_string(s)));\n}\n\nfunction uncapitalize(s) {\n  return Caml_string.bytes_to_string(Bytes.uncapitalize(Caml_string.bytes_of_string(s)));\n}\n\nvar compare = Caml_string.caml_string_compare\n\nvar fill = Bytes.fill;\n\nvar blit = Bytes.blit_string;\n\nexports.make           = make;\nexports.init           = init;\nexports.copy           = copy;\nexports.sub            = sub;\nexports.fill           = fill;\nexports.blit           = blit;\nexports.concat         = concat;\nexports.iter           = iter;\nexports.iteri          = iteri;\nexports.map            = map;\nexports.mapi           = mapi;\nexports.trim           = trim;\nexports.escaped        = escaped;\nexports.index          = index;\nexports.rindex         = rindex;\nexports.index_from     = index_from;\nexports.rindex_from    = rindex_from;\nexports.contains       = contains;\nexports.contains_from  = contains_from;\nexports.rcontains_from = rcontains_from;\nexports.uppercase      = uppercase;\nexports.lowercase      = lowercase;\nexports.capitalize     = capitalize;\nexports.uncapitalize   = uncapitalize;\nexports.compare        = compare;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/string.js\n ** module id = 23\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/string.js?");

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Bytes                    = __webpack_require__(19);\nvar Caml_builtin_exceptions  = __webpack_require__(4);\nvar Caml_obj                 = __webpack_require__(8);\nvar Caml_io                  = __webpack_require__(9);\nvar Caml_float               = __webpack_require__(25);\nvar Pervasives               = __webpack_require__(7);\nvar Caml_exceptions          = __webpack_require__(11);\nvar Caml_format              = __webpack_require__(12);\nvar Caml_int32               = __webpack_require__(14);\nvar Block                    = __webpack_require__(1);\nvar Char                     = __webpack_require__(20);\nvar Sys                      = __webpack_require__(22);\nvar Curry                    = __webpack_require__(2);\nvar Caml_bytes               = __webpack_require__(26);\nvar CamlinternalFormatBasics = __webpack_require__(17);\nvar Buffer                   = __webpack_require__(18);\nvar $$String                 = __webpack_require__(23);\nvar Caml_string              = __webpack_require__(16);\n\nfunction create_char_set() {\n  return Bytes.make(32, /* \"\\000\" */0);\n}\n\nfunction add_in_char_set(char_set, c) {\n  var str_ind = (c >>> 3);\n  var mask = (1 << (c & 7));\n  char_set[str_ind] = Pervasives.char_of_int(Caml_bytes.get(char_set, str_ind) | mask);\n  return /* () */0;\n}\n\nvar freeze_char_set = Bytes.to_string\n\nfunction rev_char_set(char_set) {\n  var char_set$prime = Bytes.make(32, /* \"\\000\" */0);\n  for(var i = 0; i <= 31; ++i){\n    char_set$prime[i] = Pervasives.char_of_int(Caml_string.get(char_set, i) ^ 255);\n  }\n  return Caml_string.bytes_to_string(char_set$prime);\n}\n\nfunction is_in_char_set(char_set, c) {\n  var str_ind = (c >>> 3);\n  var mask = (1 << (c & 7));\n  return +((Caml_string.get(char_set, str_ind) & mask) !== 0);\n}\n\nfunction pad_of_pad_opt(pad_opt) {\n  if (pad_opt) {\n    return /* Lit_padding */Block.__(0, [\n              /* Right */1,\n              pad_opt[0]\n            ]);\n  }\n  else {\n    return /* No_padding */0;\n  }\n}\n\nfunction prec_of_prec_opt(prec_opt) {\n  if (prec_opt) {\n    return /* Lit_precision */[prec_opt[0]];\n  }\n  else {\n    return /* No_precision */0;\n  }\n}\n\nfunction param_format_of_ignored_format(ign, fmt) {\n  if (typeof ign === \"number\") {\n    switch (ign) {\n      case 0 : \n          return /* Param_format_EBB */[/* Char */Block.__(0, [fmt])];\n      case 1 : \n          return /* Param_format_EBB */[/* Caml_char */Block.__(1, [fmt])];\n      case 2 : \n          return /* Param_format_EBB */[/* Bool */Block.__(9, [fmt])];\n      case 3 : \n          return /* Param_format_EBB */[/* Reader */Block.__(19, [fmt])];\n      case 4 : \n          return /* Param_format_EBB */[/* Scan_next_char */Block.__(22, [fmt])];\n      \n    }\n  }\n  else {\n    switch (ign.tag | 0) {\n      case 0 : \n          return /* Param_format_EBB */[/* String */Block.__(2, [\n                      pad_of_pad_opt(ign[0]),\n                      fmt\n                    ])];\n      case 1 : \n          return /* Param_format_EBB */[/* Caml_string */Block.__(3, [\n                      pad_of_pad_opt(ign[0]),\n                      fmt\n                    ])];\n      case 2 : \n          return /* Param_format_EBB */[/* Int */Block.__(4, [\n                      ign[0],\n                      pad_of_pad_opt(ign[1]),\n                      /* No_precision */0,\n                      fmt\n                    ])];\n      case 3 : \n          return /* Param_format_EBB */[/* Int32 */Block.__(5, [\n                      ign[0],\n                      pad_of_pad_opt(ign[1]),\n                      /* No_precision */0,\n                      fmt\n                    ])];\n      case 4 : \n          return /* Param_format_EBB */[/* Nativeint */Block.__(6, [\n                      ign[0],\n                      pad_of_pad_opt(ign[1]),\n                      /* No_precision */0,\n                      fmt\n                    ])];\n      case 5 : \n          return /* Param_format_EBB */[/* Int64 */Block.__(7, [\n                      ign[0],\n                      pad_of_pad_opt(ign[1]),\n                      /* No_precision */0,\n                      fmt\n                    ])];\n      case 6 : \n          return /* Param_format_EBB */[/* Float */Block.__(8, [\n                      /* Float_f */0,\n                      pad_of_pad_opt(ign[0]),\n                      prec_of_prec_opt(ign[1]),\n                      fmt\n                    ])];\n      case 7 : \n          return /* Param_format_EBB */[/* Format_arg */Block.__(13, [\n                      ign[0],\n                      ign[1],\n                      fmt\n                    ])];\n      case 8 : \n          return /* Param_format_EBB */[/* Format_subst */Block.__(14, [\n                      ign[0],\n                      ign[1],\n                      fmt\n                    ])];\n      case 9 : \n          return /* Param_format_EBB */[/* Scan_char_set */Block.__(20, [\n                      ign[0],\n                      ign[1],\n                      fmt\n                    ])];\n      case 10 : \n          return /* Param_format_EBB */[/* Scan_get_counter */Block.__(21, [\n                      ign[0],\n                      fmt\n                    ])];\n      \n    }\n  }\n}\n\nfunction buffer_check_size(buf, overhead) {\n  var len = buf[/* bytes */1].length;\n  var min_len = buf[/* ind */0] + overhead | 0;\n  if (min_len > len) {\n    var new_len = Pervasives.max((len << 1), min_len);\n    var new_str = Caml_string.caml_create_string(new_len);\n    Bytes.blit(buf[/* bytes */1], 0, new_str, 0, len);\n    buf[/* bytes */1] = new_str;\n    return /* () */0;\n  }\n  else {\n    return 0;\n  }\n}\n\nfunction buffer_add_char(buf, c) {\n  buffer_check_size(buf, 1);\n  buf[/* bytes */1][buf[/* ind */0]] = c;\n  buf[/* ind */0] = buf[/* ind */0] + 1 | 0;\n  return /* () */0;\n}\n\nfunction buffer_add_string(buf, s) {\n  var str_len = s.length;\n  buffer_check_size(buf, str_len);\n  $$String.blit(s, 0, buf[/* bytes */1], buf[/* ind */0], str_len);\n  buf[/* ind */0] = buf[/* ind */0] + str_len | 0;\n  return /* () */0;\n}\n\nfunction buffer_contents(buf) {\n  return Bytes.sub_string(buf[/* bytes */1], 0, buf[/* ind */0]);\n}\n\nfunction char_of_iconv(iconv) {\n  switch (iconv) {\n    case 0 : \n    case 1 : \n    case 2 : \n        return /* \"d\" */100;\n    case 3 : \n    case 4 : \n    case 5 : \n        return /* \"i\" */105;\n    case 6 : \n    case 7 : \n        return /* \"x\" */120;\n    case 8 : \n    case 9 : \n        return /* \"X\" */88;\n    case 10 : \n    case 11 : \n        return /* \"o\" */111;\n    case 12 : \n        return /* \"u\" */117;\n    \n  }\n}\n\nfunction char_of_fconv(fconv) {\n  switch (fconv) {\n    case 0 : \n    case 1 : \n    case 2 : \n        return /* \"f\" */102;\n    case 3 : \n    case 4 : \n    case 5 : \n        return /* \"e\" */101;\n    case 6 : \n    case 7 : \n    case 8 : \n        return /* \"E\" */69;\n    case 9 : \n    case 10 : \n    case 11 : \n        return /* \"g\" */103;\n    case 12 : \n    case 13 : \n    case 14 : \n        return /* \"G\" */71;\n    case 15 : \n        return /* \"F\" */70;\n    \n  }\n}\n\nfunction char_of_counter(counter) {\n  switch (counter) {\n    case 0 : \n        return /* \"l\" */108;\n    case 1 : \n        return /* \"n\" */110;\n    case 2 : \n        return /* \"N\" */78;\n    \n  }\n}\n\nfunction bprint_char_set(buf, char_set) {\n  var print_start = function (set) {\n    var is_alone = function (c) {\n      var match_000 = Char.chr(c - 1 | 0);\n      var match_001 = Char.chr(c + 1 | 0);\n      if (is_in_char_set(set, c)) {\n        return !(is_in_char_set(set, match_000) && is_in_char_set(set, match_001));\n      }\n      else {\n        return /* false */0;\n      }\n    };\n    if (is_alone(/* \"]\" */93)) {\n      buffer_add_char(buf, /* \"]\" */93);\n    }\n    print_out(set, 1);\n    if (is_alone(/* \"-\" */45)) {\n      return buffer_add_char(buf, /* \"-\" */45);\n    }\n    else {\n      return 0;\n    }\n  };\n  var print_out = function (set, _i) {\n    while(true) {\n      var i = _i;\n      if (i < 256) {\n        if (is_in_char_set(set, Pervasives.char_of_int(i))) {\n          var set$1 = set;\n          var i$1 = i;\n          var match = Pervasives.char_of_int(i$1);\n          var switcher = match - 45 | 0;\n          if (switcher > 48 || switcher < 0) {\n            if (switcher >= 210) {\n              return print_char(buf, 255);\n            }\n            else {\n              return print_second(set$1, i$1 + 1 | 0);\n            }\n          }\n          else if (switcher > 47 || switcher < 1) {\n            return print_out(set$1, i$1 + 1 | 0);\n          }\n          else {\n            return print_second(set$1, i$1 + 1 | 0);\n          }\n        }\n        else {\n          _i = i + 1 | 0;\n          continue ;\n          \n        }\n      }\n      else {\n        return 0;\n      }\n    };\n  };\n  var print_second = function (set, i) {\n    if (is_in_char_set(set, Pervasives.char_of_int(i))) {\n      var match = Pervasives.char_of_int(i);\n      var exit = 0;\n      var switcher = match - 45 | 0;\n      if (switcher > 48 || switcher < 0) {\n        if (switcher >= 210) {\n          print_char(buf, 254);\n          return print_char(buf, 255);\n        }\n        else {\n          exit = 1;\n        }\n      }\n      else if (switcher > 47 || switcher < 1) {\n        if (is_in_char_set(set, Pervasives.char_of_int(i + 1 | 0))) {\n          exit = 1;\n        }\n        else {\n          print_char(buf, i - 1 | 0);\n          return print_out(set, i + 1 | 0);\n        }\n      }\n      else {\n        exit = 1;\n      }\n      if (exit === 1) {\n        if (is_in_char_set(set, Pervasives.char_of_int(i + 1 | 0))) {\n          var set$1 = set;\n          var i$1 = i - 1 | 0;\n          var _j = i + 2 | 0;\n          while(true) {\n            var j = _j;\n            if (j === 256 || !is_in_char_set(set$1, Pervasives.char_of_int(j))) {\n              print_char(buf, i$1);\n              print_char(buf, /* \"-\" */45);\n              print_char(buf, j - 1 | 0);\n              if (j < 256) {\n                return print_out(set$1, j + 1 | 0);\n              }\n              else {\n                return 0;\n              }\n            }\n            else {\n              _j = j + 1 | 0;\n              continue ;\n              \n            }\n          };\n        }\n        else {\n          print_char(buf, i - 1 | 0);\n          print_char(buf, i);\n          return print_out(set, i + 2 | 0);\n        }\n      }\n      \n    }\n    else {\n      print_char(buf, i - 1 | 0);\n      return print_out(set, i + 1 | 0);\n    }\n  };\n  var print_char = function (buf, i) {\n    var c = Pervasives.char_of_int(i);\n    if (c !== 37) {\n      if (c !== 64) {\n        return buffer_add_char(buf, c);\n      }\n      else {\n        buffer_add_char(buf, /* \"%\" */37);\n        return buffer_add_char(buf, /* \"@\" */64);\n      }\n    }\n    else {\n      buffer_add_char(buf, /* \"%\" */37);\n      return buffer_add_char(buf, /* \"%\" */37);\n    }\n  };\n  buffer_add_char(buf, /* \"[\" */91);\n  print_start(is_in_char_set(char_set, /* \"\\000\" */0) ? (buffer_add_char(buf, /* \"^\" */94), rev_char_set(char_set)) : char_set);\n  return buffer_add_char(buf, /* \"]\" */93);\n}\n\nfunction bprint_padty(buf, padty) {\n  switch (padty) {\n    case 0 : \n        return buffer_add_char(buf, /* \"-\" */45);\n    case 1 : \n        return /* () */0;\n    case 2 : \n        return buffer_add_char(buf, /* \"0\" */48);\n    \n  }\n}\n\nfunction bprint_ignored_flag(buf, ign_flag) {\n  if (ign_flag) {\n    return buffer_add_char(buf, /* \"_\" */95);\n  }\n  else {\n    return 0;\n  }\n}\n\nfunction bprint_pad_opt(buf, pad_opt) {\n  if (pad_opt) {\n    return buffer_add_string(buf, \"\" + pad_opt[0]);\n  }\n  else {\n    return /* () */0;\n  }\n}\n\nfunction bprint_padding(buf, pad) {\n  if (typeof pad === \"number\") {\n    return /* () */0;\n  }\n  else {\n    bprint_padty(buf, pad[0]);\n    if (pad.tag) {\n      return buffer_add_char(buf, /* \"*\" */42);\n    }\n    else {\n      return buffer_add_string(buf, \"\" + pad[1]);\n    }\n  }\n}\n\nfunction bprint_precision(buf, prec) {\n  if (typeof prec === \"number\") {\n    if (prec !== 0) {\n      return buffer_add_string(buf, \".*\");\n    }\n    else {\n      return /* () */0;\n    }\n  }\n  else {\n    buffer_add_char(buf, /* \".\" */46);\n    return buffer_add_string(buf, \"\" + prec[0]);\n  }\n}\n\nfunction bprint_iconv_flag(buf, iconv) {\n  switch (iconv) {\n    case 1 : \n    case 4 : \n        return buffer_add_char(buf, /* \"+\" */43);\n    case 2 : \n    case 5 : \n        return buffer_add_char(buf, /* \" \" */32);\n    case 7 : \n    case 9 : \n    case 11 : \n        return buffer_add_char(buf, /* \"#\" */35);\n    case 0 : \n    case 3 : \n    case 6 : \n    case 8 : \n    case 10 : \n    case 12 : \n        return /* () */0;\n    \n  }\n}\n\nfunction bprint_int_fmt(buf, ign_flag, iconv, pad, prec) {\n  buffer_add_char(buf, /* \"%\" */37);\n  bprint_ignored_flag(buf, ign_flag);\n  bprint_iconv_flag(buf, iconv);\n  bprint_padding(buf, pad);\n  bprint_precision(buf, prec);\n  return buffer_add_char(buf, char_of_iconv(iconv));\n}\n\nfunction bprint_altint_fmt(buf, ign_flag, iconv, pad, prec, c) {\n  buffer_add_char(buf, /* \"%\" */37);\n  bprint_ignored_flag(buf, ign_flag);\n  bprint_iconv_flag(buf, iconv);\n  bprint_padding(buf, pad);\n  bprint_precision(buf, prec);\n  buffer_add_char(buf, c);\n  return buffer_add_char(buf, char_of_iconv(iconv));\n}\n\nfunction bprint_fconv_flag(buf, fconv) {\n  switch (fconv) {\n    case 1 : \n    case 4 : \n    case 7 : \n    case 10 : \n    case 13 : \n        return buffer_add_char(buf, /* \"+\" */43);\n    case 2 : \n    case 5 : \n    case 8 : \n    case 11 : \n    case 14 : \n        return buffer_add_char(buf, /* \" \" */32);\n    case 0 : \n    case 3 : \n    case 6 : \n    case 9 : \n    case 12 : \n    case 15 : \n        return /* () */0;\n    \n  }\n}\n\nfunction bprint_float_fmt(buf, ign_flag, fconv, pad, prec) {\n  buffer_add_char(buf, /* \"%\" */37);\n  bprint_ignored_flag(buf, ign_flag);\n  bprint_fconv_flag(buf, fconv);\n  bprint_padding(buf, pad);\n  bprint_precision(buf, prec);\n  return buffer_add_char(buf, char_of_fconv(fconv));\n}\n\nfunction string_of_formatting_lit(formatting_lit) {\n  if (typeof formatting_lit === \"number\") {\n    switch (formatting_lit) {\n      case 0 : \n          return \"@]\";\n      case 1 : \n          return \"@}\";\n      case 2 : \n          return \"@?\";\n      case 3 : \n          return \"@\\n\";\n      case 4 : \n          return \"@.\";\n      case 5 : \n          return \"@@\";\n      case 6 : \n          return \"@%\";\n      \n    }\n  }\n  else {\n    switch (formatting_lit.tag | 0) {\n      case 0 : \n      case 1 : \n          return formatting_lit[0];\n      case 2 : \n          return \"@\" + Caml_string.bytes_to_string(Bytes.make(1, formatting_lit[0]));\n      \n    }\n  }\n}\n\nfunction string_of_formatting_gen(formatting_gen) {\n  return formatting_gen[0][1];\n}\n\nfunction bprint_char_literal(buf, chr) {\n  if (chr !== 37) {\n    return buffer_add_char(buf, chr);\n  }\n  else {\n    return buffer_add_string(buf, \"%%\");\n  }\n}\n\nfunction bprint_string_literal(buf, str) {\n  for(var i = 0 ,i_finish = str.length - 1 | 0; i <= i_finish; ++i){\n    bprint_char_literal(buf, Caml_string.get(str, i));\n  }\n  return /* () */0;\n}\n\nfunction bprint_fmtty(buf, _fmtty) {\n  while(true) {\n    var fmtty = _fmtty;\n    if (typeof fmtty === \"number\") {\n      return /* () */0;\n    }\n    else {\n      switch (fmtty.tag | 0) {\n        case 0 : \n            buffer_add_string(buf, \"%c\");\n            _fmtty = fmtty[0];\n            continue ;\n            case 1 : \n            buffer_add_string(buf, \"%s\");\n            _fmtty = fmtty[0];\n            continue ;\n            case 2 : \n            buffer_add_string(buf, \"%i\");\n            _fmtty = fmtty[0];\n            continue ;\n            case 3 : \n            buffer_add_string(buf, \"%li\");\n            _fmtty = fmtty[0];\n            continue ;\n            case 4 : \n            buffer_add_string(buf, \"%ni\");\n            _fmtty = fmtty[0];\n            continue ;\n            case 5 : \n            buffer_add_string(buf, \"%Li\");\n            _fmtty = fmtty[0];\n            continue ;\n            case 6 : \n            buffer_add_string(buf, \"%f\");\n            _fmtty = fmtty[0];\n            continue ;\n            case 7 : \n            buffer_add_string(buf, \"%B\");\n            _fmtty = fmtty[0];\n            continue ;\n            case 8 : \n            buffer_add_string(buf, \"%{\");\n            bprint_fmtty(buf, fmtty[0]);\n            buffer_add_string(buf, \"%}\");\n            _fmtty = fmtty[1];\n            continue ;\n            case 9 : \n            buffer_add_string(buf, \"%(\");\n            bprint_fmtty(buf, fmtty[0]);\n            buffer_add_string(buf, \"%)\");\n            _fmtty = fmtty[2];\n            continue ;\n            case 10 : \n            buffer_add_string(buf, \"%a\");\n            _fmtty = fmtty[0];\n            continue ;\n            case 11 : \n            buffer_add_string(buf, \"%t\");\n            _fmtty = fmtty[0];\n            continue ;\n            case 12 : \n            buffer_add_string(buf, \"%?\");\n            _fmtty = fmtty[0];\n            continue ;\n            case 13 : \n            buffer_add_string(buf, \"%r\");\n            _fmtty = fmtty[0];\n            continue ;\n            case 14 : \n            buffer_add_string(buf, \"%_r\");\n            _fmtty = fmtty[0];\n            continue ;\n            \n      }\n    }\n  };\n}\n\nfunction int_of_custom_arity(param) {\n  if (param) {\n    return 1 + int_of_custom_arity(param[0]) | 0;\n  }\n  else {\n    return 0;\n  }\n}\n\nfunction bprint_fmt(buf, fmt) {\n  var _fmt = fmt;\n  var _ign_flag = /* false */0;\n  while(true) {\n    var ign_flag = _ign_flag;\n    var fmt$1 = _fmt;\n    if (typeof fmt$1 === \"number\") {\n      return /* () */0;\n    }\n    else {\n      switch (fmt$1.tag | 0) {\n        case 0 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            buffer_add_char(buf, /* \"c\" */99);\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[0];\n            continue ;\n            case 1 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            buffer_add_char(buf, /* \"C\" */67);\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[0];\n            continue ;\n            case 2 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            bprint_padding(buf, fmt$1[0]);\n            buffer_add_char(buf, /* \"s\" */115);\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[1];\n            continue ;\n            case 3 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            bprint_padding(buf, fmt$1[0]);\n            buffer_add_char(buf, /* \"S\" */83);\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[1];\n            continue ;\n            case 4 : \n            bprint_int_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2]);\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[3];\n            continue ;\n            case 5 : \n            bprint_altint_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2], /* \"l\" */108);\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[3];\n            continue ;\n            case 6 : \n            bprint_altint_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2], /* \"n\" */110);\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[3];\n            continue ;\n            case 7 : \n            bprint_altint_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2], /* \"L\" */76);\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[3];\n            continue ;\n            case 8 : \n            bprint_float_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2]);\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[3];\n            continue ;\n            case 9 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            buffer_add_char(buf, /* \"B\" */66);\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[0];\n            continue ;\n            case 10 : \n            buffer_add_string(buf, \"%!\");\n            _fmt = fmt$1[0];\n            continue ;\n            case 11 : \n            bprint_string_literal(buf, fmt$1[0]);\n            _fmt = fmt$1[1];\n            continue ;\n            case 12 : \n            bprint_char_literal(buf, fmt$1[0]);\n            _fmt = fmt$1[1];\n            continue ;\n            case 13 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            bprint_pad_opt(buf, fmt$1[0]);\n            buffer_add_char(buf, /* \"{\" */123);\n            bprint_fmtty(buf, fmt$1[1]);\n            buffer_add_char(buf, /* \"%\" */37);\n            buffer_add_char(buf, /* \"}\" */125);\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[2];\n            continue ;\n            case 14 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            bprint_pad_opt(buf, fmt$1[0]);\n            buffer_add_char(buf, /* \"(\" */40);\n            bprint_fmtty(buf, fmt$1[1]);\n            buffer_add_char(buf, /* \"%\" */37);\n            buffer_add_char(buf, /* \")\" */41);\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[2];\n            continue ;\n            case 15 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            buffer_add_char(buf, /* \"a\" */97);\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[0];\n            continue ;\n            case 16 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            buffer_add_char(buf, /* \"t\" */116);\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[0];\n            continue ;\n            case 17 : \n            bprint_string_literal(buf, string_of_formatting_lit(fmt$1[0]));\n            _fmt = fmt$1[1];\n            continue ;\n            case 18 : \n            bprint_string_literal(buf, \"@{\");\n            bprint_string_literal(buf, string_of_formatting_gen(fmt$1[0]));\n            _fmt = fmt$1[1];\n            continue ;\n            case 19 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            buffer_add_char(buf, /* \"r\" */114);\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[0];\n            continue ;\n            case 20 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            bprint_pad_opt(buf, fmt$1[0]);\n            bprint_char_set(buf, fmt$1[1]);\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[2];\n            continue ;\n            case 21 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            buffer_add_char(buf, char_of_counter(fmt$1[0]));\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[1];\n            continue ;\n            case 22 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            bprint_string_literal(buf, \"0c\");\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[0];\n            continue ;\n            case 23 : \n            var match = param_format_of_ignored_format(fmt$1[0], fmt$1[1]);\n            _ign_flag = /* true */1;\n            _fmt = match[0];\n            continue ;\n            case 24 : \n            for(var _i = 1 ,_i_finish = int_of_custom_arity(fmt$1[0]); _i <= _i_finish; ++_i){\n              buffer_add_char(buf, /* \"%\" */37);\n              bprint_ignored_flag(buf, ign_flag);\n              buffer_add_char(buf, /* \"?\" */63);\n            }\n            _ign_flag = /* false */0;\n            _fmt = fmt$1[2];\n            continue ;\n            \n      }\n    }\n  };\n}\n\nfunction string_of_fmt(fmt) {\n  var buf = /* record */[\n    /* ind */0,\n    /* bytes */new Array(16)\n  ];\n  bprint_fmt(buf, fmt);\n  return buffer_contents(buf);\n}\n\nfunction symm(param) {\n  if (typeof param === \"number\") {\n    return /* End_of_fmtty */0;\n  }\n  else {\n    switch (param.tag | 0) {\n      case 0 : \n          return /* Char_ty */Block.__(0, [symm(param[0])]);\n      case 1 : \n          return /* String_ty */Block.__(1, [symm(param[0])]);\n      case 2 : \n          return /* Int_ty */Block.__(2, [symm(param[0])]);\n      case 3 : \n          return /* Int32_ty */Block.__(3, [symm(param[0])]);\n      case 4 : \n          return /* Nativeint_ty */Block.__(4, [symm(param[0])]);\n      case 5 : \n          return /* Int64_ty */Block.__(5, [symm(param[0])]);\n      case 6 : \n          return /* Float_ty */Block.__(6, [symm(param[0])]);\n      case 7 : \n          return /* Bool_ty */Block.__(7, [symm(param[0])]);\n      case 8 : \n          return /* Format_arg_ty */Block.__(8, [\n                    param[0],\n                    symm(param[1])\n                  ]);\n      case 9 : \n          return /* Format_subst_ty */Block.__(9, [\n                    param[1],\n                    param[0],\n                    symm(param[2])\n                  ]);\n      case 10 : \n          return /* Alpha_ty */Block.__(10, [symm(param[0])]);\n      case 11 : \n          return /* Theta_ty */Block.__(11, [symm(param[0])]);\n      case 12 : \n          return /* Any_ty */Block.__(12, [symm(param[0])]);\n      case 13 : \n          return /* Reader_ty */Block.__(13, [symm(param[0])]);\n      case 14 : \n          return /* Ignored_reader_ty */Block.__(14, [symm(param[0])]);\n      \n    }\n  }\n}\n\nfunction fmtty_rel_det(param) {\n  if (typeof param === \"number\") {\n    return /* tuple */[\n            function () {\n              return /* Refl */0;\n            },\n            function () {\n              return /* Refl */0;\n            },\n            function () {\n              return /* Refl */0;\n            },\n            function () {\n              return /* Refl */0;\n            }\n          ];\n  }\n  else {\n    switch (param.tag | 0) {\n      case 0 : \n          var match = fmtty_rel_det(param[0]);\n          var af = match[1];\n          var fa = match[0];\n          return /* tuple */[\n                  function () {\n                    Curry._1(fa, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(af, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  match[2],\n                  match[3]\n                ];\n      case 1 : \n          var match$1 = fmtty_rel_det(param[0]);\n          var af$1 = match$1[1];\n          var fa$1 = match$1[0];\n          return /* tuple */[\n                  function () {\n                    Curry._1(fa$1, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(af$1, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  match$1[2],\n                  match$1[3]\n                ];\n      case 2 : \n          var match$2 = fmtty_rel_det(param[0]);\n          var af$2 = match$2[1];\n          var fa$2 = match$2[0];\n          return /* tuple */[\n                  function () {\n                    Curry._1(fa$2, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(af$2, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  match$2[2],\n                  match$2[3]\n                ];\n      case 3 : \n          var match$3 = fmtty_rel_det(param[0]);\n          var af$3 = match$3[1];\n          var fa$3 = match$3[0];\n          return /* tuple */[\n                  function () {\n                    Curry._1(fa$3, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(af$3, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  match$3[2],\n                  match$3[3]\n                ];\n      case 4 : \n          var match$4 = fmtty_rel_det(param[0]);\n          var af$4 = match$4[1];\n          var fa$4 = match$4[0];\n          return /* tuple */[\n                  function () {\n                    Curry._1(fa$4, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(af$4, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  match$4[2],\n                  match$4[3]\n                ];\n      case 5 : \n          var match$5 = fmtty_rel_det(param[0]);\n          var af$5 = match$5[1];\n          var fa$5 = match$5[0];\n          return /* tuple */[\n                  function () {\n                    Curry._1(fa$5, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(af$5, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  match$5[2],\n                  match$5[3]\n                ];\n      case 6 : \n          var match$6 = fmtty_rel_det(param[0]);\n          var af$6 = match$6[1];\n          var fa$6 = match$6[0];\n          return /* tuple */[\n                  function () {\n                    Curry._1(fa$6, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(af$6, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  match$6[2],\n                  match$6[3]\n                ];\n      case 7 : \n          var match$7 = fmtty_rel_det(param[0]);\n          var af$7 = match$7[1];\n          var fa$7 = match$7[0];\n          return /* tuple */[\n                  function () {\n                    Curry._1(fa$7, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(af$7, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  match$7[2],\n                  match$7[3]\n                ];\n      case 8 : \n          var match$8 = fmtty_rel_det(param[1]);\n          var af$8 = match$8[1];\n          var fa$8 = match$8[0];\n          return /* tuple */[\n                  function () {\n                    Curry._1(fa$8, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(af$8, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  match$8[2],\n                  match$8[3]\n                ];\n      case 9 : \n          var match$9 = fmtty_rel_det(param[2]);\n          var de = match$9[3];\n          var ed = match$9[2];\n          var af$9 = match$9[1];\n          var fa$9 = match$9[0];\n          var ty = trans(symm(param[0]), param[1]);\n          var match$10 = fmtty_rel_det(ty);\n          var jd = match$10[3];\n          var dj = match$10[2];\n          var ga = match$10[1];\n          var ag = match$10[0];\n          return /* tuple */[\n                  function () {\n                    Curry._1(fa$9, /* Refl */0);\n                    Curry._1(ag, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(ga, /* Refl */0);\n                    Curry._1(af$9, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(ed, /* Refl */0);\n                    Curry._1(dj, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(jd, /* Refl */0);\n                    Curry._1(de, /* Refl */0);\n                    return /* Refl */0;\n                  }\n                ];\n      case 10 : \n          var match$11 = fmtty_rel_det(param[0]);\n          var af$10 = match$11[1];\n          var fa$10 = match$11[0];\n          return /* tuple */[\n                  function () {\n                    Curry._1(fa$10, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(af$10, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  match$11[2],\n                  match$11[3]\n                ];\n      case 11 : \n          var match$12 = fmtty_rel_det(param[0]);\n          var af$11 = match$12[1];\n          var fa$11 = match$12[0];\n          return /* tuple */[\n                  function () {\n                    Curry._1(fa$11, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(af$11, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  match$12[2],\n                  match$12[3]\n                ];\n      case 12 : \n          var match$13 = fmtty_rel_det(param[0]);\n          var af$12 = match$13[1];\n          var fa$12 = match$13[0];\n          return /* tuple */[\n                  function () {\n                    Curry._1(fa$12, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(af$12, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  match$13[2],\n                  match$13[3]\n                ];\n      case 13 : \n          var match$14 = fmtty_rel_det(param[0]);\n          var de$1 = match$14[3];\n          var ed$1 = match$14[2];\n          var af$13 = match$14[1];\n          var fa$13 = match$14[0];\n          return /* tuple */[\n                  function () {\n                    Curry._1(fa$13, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(af$13, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(ed$1, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(de$1, /* Refl */0);\n                    return /* Refl */0;\n                  }\n                ];\n      case 14 : \n          var match$15 = fmtty_rel_det(param[0]);\n          var de$2 = match$15[3];\n          var ed$2 = match$15[2];\n          var af$14 = match$15[1];\n          var fa$14 = match$15[0];\n          return /* tuple */[\n                  function () {\n                    Curry._1(fa$14, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(af$14, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(ed$2, /* Refl */0);\n                    return /* Refl */0;\n                  },\n                  function () {\n                    Curry._1(de$2, /* Refl */0);\n                    return /* Refl */0;\n                  }\n                ];\n      \n    }\n  }\n}\n\nfunction trans(ty1, ty2) {\n  var exit = 0;\n  if (typeof ty1 === \"number\") {\n    if (typeof ty2 === \"number\") {\n      if (ty2) {\n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              [\n                \"camlinternalFormat.ml\",\n                816,\n                23\n              ]\n            ];\n      }\n      else {\n        return /* End_of_fmtty */0;\n      }\n    }\n    else {\n      switch (ty2.tag | 0) {\n        case 8 : \n            exit = 6;\n            break;\n        case 9 : \n            exit = 7;\n            break;\n        case 10 : \n            exit = 1;\n            break;\n        case 11 : \n            exit = 2;\n            break;\n        case 12 : \n            exit = 3;\n            break;\n        case 13 : \n            exit = 4;\n            break;\n        case 14 : \n            exit = 5;\n            break;\n        default:\n          throw [\n                Caml_builtin_exceptions.assert_failure,\n                [\n                  \"camlinternalFormat.ml\",\n                  816,\n                  23\n                ]\n              ];\n      }\n    }\n  }\n  else {\n    switch (ty1.tag | 0) {\n      case 0 : \n          if (typeof ty2 === \"number\") {\n            exit = 8;\n          }\n          else {\n            switch (ty2.tag | 0) {\n              case 0 : \n                  return /* Char_ty */Block.__(0, [trans(ty1[0], ty2[0])]);\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  exit = 7;\n                  break;\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              \n            }\n          }\n          break;\n      case 1 : \n          if (typeof ty2 === \"number\") {\n            exit = 8;\n          }\n          else {\n            switch (ty2.tag | 0) {\n              case 1 : \n                  return /* String_ty */Block.__(1, [trans(ty1[0], ty2[0])]);\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  exit = 7;\n                  break;\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              \n            }\n          }\n          break;\n      case 2 : \n          if (typeof ty2 === \"number\") {\n            exit = 8;\n          }\n          else {\n            switch (ty2.tag | 0) {\n              case 2 : \n                  return /* Int_ty */Block.__(2, [trans(ty1[0], ty2[0])]);\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  exit = 7;\n                  break;\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              \n            }\n          }\n          break;\n      case 3 : \n          if (typeof ty2 === \"number\") {\n            exit = 8;\n          }\n          else {\n            switch (ty2.tag | 0) {\n              case 3 : \n                  return /* Int32_ty */Block.__(3, [trans(ty1[0], ty2[0])]);\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  exit = 7;\n                  break;\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              \n            }\n          }\n          break;\n      case 4 : \n          if (typeof ty2 === \"number\") {\n            exit = 8;\n          }\n          else {\n            switch (ty2.tag | 0) {\n              case 4 : \n                  return /* Nativeint_ty */Block.__(4, [trans(ty1[0], ty2[0])]);\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  exit = 7;\n                  break;\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              \n            }\n          }\n          break;\n      case 5 : \n          if (typeof ty2 === \"number\") {\n            exit = 8;\n          }\n          else {\n            switch (ty2.tag | 0) {\n              case 5 : \n                  return /* Int64_ty */Block.__(5, [trans(ty1[0], ty2[0])]);\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  exit = 7;\n                  break;\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              \n            }\n          }\n          break;\n      case 6 : \n          if (typeof ty2 === \"number\") {\n            exit = 8;\n          }\n          else {\n            switch (ty2.tag | 0) {\n              case 6 : \n                  return /* Float_ty */Block.__(6, [trans(ty1[0], ty2[0])]);\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  exit = 7;\n                  break;\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              \n            }\n          }\n          break;\n      case 7 : \n          if (typeof ty2 === \"number\") {\n            exit = 8;\n          }\n          else {\n            switch (ty2.tag | 0) {\n              case 7 : \n                  return /* Bool_ty */Block.__(7, [trans(ty1[0], ty2[0])]);\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  exit = 7;\n                  break;\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              \n            }\n          }\n          break;\n      case 8 : \n          if (typeof ty2 === \"number\") {\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  [\n                    \"camlinternalFormat.ml\",\n                    802,\n                    26\n                  ]\n                ];\n          }\n          else {\n            switch (ty2.tag | 0) {\n              case 8 : \n                  return /* Format_arg_ty */Block.__(8, [\n                            trans(ty1[0], ty2[0]),\n                            trans(ty1[1], ty2[1])\n                          ]);\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              default:\n                throw [\n                      Caml_builtin_exceptions.assert_failure,\n                      [\n                        \"camlinternalFormat.ml\",\n                        802,\n                        26\n                      ]\n                    ];\n            }\n          }\n          break;\n      case 9 : \n          if (typeof ty2 === \"number\") {\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  [\n                    \"camlinternalFormat.ml\",\n                    812,\n                    28\n                  ]\n                ];\n          }\n          else {\n            switch (ty2.tag | 0) {\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  var ty = trans(symm(ty1[1]), ty2[0]);\n                  var match = fmtty_rel_det(ty);\n                  Curry._1(match[1], /* Refl */0);\n                  Curry._1(match[3], /* Refl */0);\n                  return /* Format_subst_ty */Block.__(9, [\n                            ty1[0],\n                            ty2[1],\n                            trans(ty1[2], ty2[2])\n                          ]);\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              default:\n                throw [\n                      Caml_builtin_exceptions.assert_failure,\n                      [\n                        \"camlinternalFormat.ml\",\n                        812,\n                        28\n                      ]\n                    ];\n            }\n          }\n          break;\n      case 10 : \n          if (typeof ty2 === \"number\") {\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  [\n                    \"camlinternalFormat.ml\",\n                    780,\n                    21\n                  ]\n                ];\n          }\n          else if (ty2.tag === 10) {\n            return /* Alpha_ty */Block.__(10, [trans(ty1[0], ty2[0])]);\n          }\n          else {\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  [\n                    \"camlinternalFormat.ml\",\n                    780,\n                    21\n                  ]\n                ];\n          }\n          break;\n      case 11 : \n          if (typeof ty2 === \"number\") {\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  [\n                    \"camlinternalFormat.ml\",\n                    784,\n                    21\n                  ]\n                ];\n          }\n          else {\n            switch (ty2.tag | 0) {\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  return /* Theta_ty */Block.__(11, [trans(ty1[0], ty2[0])]);\n              default:\n                throw [\n                      Caml_builtin_exceptions.assert_failure,\n                      [\n                        \"camlinternalFormat.ml\",\n                        784,\n                        21\n                      ]\n                    ];\n            }\n          }\n          break;\n      case 12 : \n          if (typeof ty2 === \"number\") {\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  [\n                    \"camlinternalFormat.ml\",\n                    788,\n                    19\n                  ]\n                ];\n          }\n          else {\n            switch (ty2.tag | 0) {\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  return /* Any_ty */Block.__(12, [trans(ty1[0], ty2[0])]);\n              default:\n                throw [\n                      Caml_builtin_exceptions.assert_failure,\n                      [\n                        \"camlinternalFormat.ml\",\n                        788,\n                        19\n                      ]\n                    ];\n            }\n          }\n          break;\n      case 13 : \n          if (typeof ty2 === \"number\") {\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  [\n                    \"camlinternalFormat.ml\",\n                    792,\n                    22\n                  ]\n                ];\n          }\n          else {\n            switch (ty2.tag | 0) {\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  return /* Reader_ty */Block.__(13, [trans(ty1[0], ty2[0])]);\n              default:\n                throw [\n                      Caml_builtin_exceptions.assert_failure,\n                      [\n                        \"camlinternalFormat.ml\",\n                        792,\n                        22\n                      ]\n                    ];\n            }\n          }\n          break;\n      case 14 : \n          if (typeof ty2 === \"number\") {\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  [\n                    \"camlinternalFormat.ml\",\n                    797,\n                    30\n                  ]\n                ];\n          }\n          else {\n            switch (ty2.tag | 0) {\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  return /* Ignored_reader_ty */Block.__(14, [trans(ty1[0], ty2[0])]);\n              default:\n                throw [\n                      Caml_builtin_exceptions.assert_failure,\n                      [\n                        \"camlinternalFormat.ml\",\n                        797,\n                        30\n                      ]\n                    ];\n            }\n          }\n          break;\n      \n    }\n  }\n  switch (exit) {\n    case 1 : \n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              [\n                \"camlinternalFormat.ml\",\n                781,\n                21\n              ]\n            ];\n    case 2 : \n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              [\n                \"camlinternalFormat.ml\",\n                785,\n                21\n              ]\n            ];\n    case 3 : \n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              [\n                \"camlinternalFormat.ml\",\n                789,\n                19\n              ]\n            ];\n    case 4 : \n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              [\n                \"camlinternalFormat.ml\",\n                793,\n                22\n              ]\n            ];\n    case 5 : \n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              [\n                \"camlinternalFormat.ml\",\n                798,\n                30\n              ]\n            ];\n    case 6 : \n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              [\n                \"camlinternalFormat.ml\",\n                803,\n                26\n              ]\n            ];\n    case 7 : \n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              [\n                \"camlinternalFormat.ml\",\n                813,\n                28\n              ]\n            ];\n    case 8 : \n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              [\n                \"camlinternalFormat.ml\",\n                817,\n                23\n              ]\n            ];\n    \n  }\n}\n\nfunction fmtty_of_formatting_gen(formatting_gen) {\n  return fmtty_of_fmt(formatting_gen[0][0]);\n}\n\nfunction fmtty_of_fmt(_fmtty) {\n  while(true) {\n    var fmtty = _fmtty;\n    if (typeof fmtty === \"number\") {\n      return /* End_of_fmtty */0;\n    }\n    else {\n      switch (fmtty.tag | 0) {\n        case 2 : \n        case 3 : \n            return fmtty_of_padding_fmtty(fmtty[0], /* String_ty */Block.__(1, [fmtty_of_fmt(fmtty[1])]));\n        case 4 : \n            var ty_rest = fmtty_of_fmt(fmtty[3]);\n            var prec_ty = fmtty_of_precision_fmtty(fmtty[2], /* Int_ty */Block.__(2, [ty_rest]));\n            return fmtty_of_padding_fmtty(fmtty[1], prec_ty);\n        case 5 : \n            var ty_rest$1 = fmtty_of_fmt(fmtty[3]);\n            var prec_ty$1 = fmtty_of_precision_fmtty(fmtty[2], /* Int32_ty */Block.__(3, [ty_rest$1]));\n            return fmtty_of_padding_fmtty(fmtty[1], prec_ty$1);\n        case 6 : \n            var ty_rest$2 = fmtty_of_fmt(fmtty[3]);\n            var prec_ty$2 = fmtty_of_precision_fmtty(fmtty[2], /* Nativeint_ty */Block.__(4, [ty_rest$2]));\n            return fmtty_of_padding_fmtty(fmtty[1], prec_ty$2);\n        case 7 : \n            var ty_rest$3 = fmtty_of_fmt(fmtty[3]);\n            var prec_ty$3 = fmtty_of_precision_fmtty(fmtty[2], /* Int64_ty */Block.__(5, [ty_rest$3]));\n            return fmtty_of_padding_fmtty(fmtty[1], prec_ty$3);\n        case 8 : \n            var ty_rest$4 = fmtty_of_fmt(fmtty[3]);\n            var prec_ty$4 = fmtty_of_precision_fmtty(fmtty[2], /* Float_ty */Block.__(6, [ty_rest$4]));\n            return fmtty_of_padding_fmtty(fmtty[1], prec_ty$4);\n        case 9 : \n            return /* Bool_ty */Block.__(7, [fmtty_of_fmt(fmtty[0])]);\n        case 10 : \n            _fmtty = fmtty[0];\n            continue ;\n            case 13 : \n            return /* Format_arg_ty */Block.__(8, [\n                      fmtty[1],\n                      fmtty_of_fmt(fmtty[2])\n                    ]);\n        case 14 : \n            var ty = fmtty[1];\n            return /* Format_subst_ty */Block.__(9, [\n                      ty,\n                      ty,\n                      fmtty_of_fmt(fmtty[2])\n                    ]);\n        case 15 : \n            return /* Alpha_ty */Block.__(10, [fmtty_of_fmt(fmtty[0])]);\n        case 16 : \n            return /* Theta_ty */Block.__(11, [fmtty_of_fmt(fmtty[0])]);\n        case 11 : \n        case 12 : \n        case 17 : \n            _fmtty = fmtty[1];\n            continue ;\n            case 18 : \n            return CamlinternalFormatBasics.concat_fmtty(fmtty_of_formatting_gen(fmtty[0]), fmtty_of_fmt(fmtty[1]));\n        case 19 : \n            return /* Reader_ty */Block.__(13, [fmtty_of_fmt(fmtty[0])]);\n        case 20 : \n            return /* String_ty */Block.__(1, [fmtty_of_fmt(fmtty[2])]);\n        case 21 : \n            return /* Int_ty */Block.__(2, [fmtty_of_fmt(fmtty[1])]);\n        case 0 : \n        case 1 : \n        case 22 : \n            return /* Char_ty */Block.__(0, [fmtty_of_fmt(fmtty[0])]);\n        case 23 : \n            var ign = fmtty[0];\n            var fmt = fmtty[1];\n            if (typeof ign === \"number\") {\n              switch (ign) {\n                case 3 : \n                    return /* Ignored_reader_ty */Block.__(14, [fmtty_of_fmt(fmt)]);\n                case 0 : \n                case 1 : \n                case 2 : \n                case 4 : \n                    return fmtty_of_fmt(fmt);\n                \n              }\n            }\n            else {\n              switch (ign.tag | 0) {\n                case 8 : \n                    return CamlinternalFormatBasics.concat_fmtty(ign[1], fmtty_of_fmt(fmt));\n                case 0 : \n                case 1 : \n                case 2 : \n                case 3 : \n                case 4 : \n                case 5 : \n                case 6 : \n                case 7 : \n                case 9 : \n                case 10 : \n                    return fmtty_of_fmt(fmt);\n                \n              }\n            }\n        case 24 : \n            return fmtty_of_custom(fmtty[0], fmtty_of_fmt(fmtty[2]));\n        \n      }\n    }\n  };\n}\n\nfunction fmtty_of_custom(arity, fmtty) {\n  if (arity) {\n    return /* Any_ty */Block.__(12, [fmtty_of_custom(arity[0], fmtty)]);\n  }\n  else {\n    return fmtty;\n  }\n}\n\nfunction fmtty_of_padding_fmtty(pad, fmtty) {\n  if (typeof pad === \"number\" || !pad.tag) {\n    return fmtty;\n  }\n  else {\n    return /* Int_ty */Block.__(2, [fmtty]);\n  }\n}\n\nfunction fmtty_of_precision_fmtty(prec, fmtty) {\n  if (typeof prec === \"number\" && prec !== 0) {\n    return /* Int_ty */Block.__(2, [fmtty]);\n  }\n  else {\n    return fmtty;\n  }\n}\n\nvar Type_mismatch = Caml_exceptions.create(\"CamlinternalFormat.Type_mismatch\");\n\nfunction type_padding(pad, fmtty) {\n  if (typeof pad === \"number\") {\n    return /* Padding_fmtty_EBB */[\n            /* No_padding */0,\n            fmtty\n          ];\n  }\n  else if (pad.tag) {\n    if (typeof fmtty === \"number\") {\n      throw Type_mismatch;\n    }\n    else if (fmtty.tag === 2) {\n      return /* Padding_fmtty_EBB */[\n              /* Arg_padding */Block.__(1, [pad[0]]),\n              fmtty[0]\n            ];\n    }\n    else {\n      throw Type_mismatch;\n    }\n  }\n  else {\n    return /* Padding_fmtty_EBB */[\n            /* Lit_padding */Block.__(0, [\n                pad[0],\n                pad[1]\n              ]),\n            fmtty\n          ];\n  }\n}\n\nfunction type_padprec(pad, prec, fmtty) {\n  var match = type_padding(pad, fmtty);\n  if (typeof prec === \"number\") {\n    if (prec !== 0) {\n      var match$1 = match[1];\n      if (typeof match$1 === \"number\") {\n        throw Type_mismatch;\n      }\n      else if (match$1.tag === 2) {\n        return /* Padprec_fmtty_EBB */[\n                match[0],\n                /* Arg_precision */1,\n                match$1[0]\n              ];\n      }\n      else {\n        throw Type_mismatch;\n      }\n    }\n    else {\n      return /* Padprec_fmtty_EBB */[\n              match[0],\n              /* No_precision */0,\n              match[1]\n            ];\n    }\n  }\n  else {\n    return /* Padprec_fmtty_EBB */[\n            match[0],\n            /* Lit_precision */[prec[0]],\n            match[1]\n          ];\n  }\n}\n\nfunction type_format(fmt, fmtty) {\n  var match = type_format_gen(fmt, fmtty);\n  if (typeof match[1] === \"number\") {\n    return match[0];\n  }\n  else {\n    throw Type_mismatch;\n  }\n}\n\nfunction type_format_gen(fmt, fmtty) {\n  if (typeof fmt === \"number\") {\n    return /* Fmt_fmtty_EBB */[\n            /* End_of_format */0,\n            fmtty\n          ];\n  }\n  else {\n    switch (fmt.tag | 0) {\n      case 0 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag) {\n            throw Type_mismatch;\n          }\n          else {\n            var match = type_format_gen(fmt[0], fmtty[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Char */Block.__(0, [match[0]]),\n                    match[1]\n                  ];\n          }\n          break;\n      case 1 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag) {\n            throw Type_mismatch;\n          }\n          else {\n            var match$1 = type_format_gen(fmt[0], fmtty[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Caml_char */Block.__(1, [match$1[0]]),\n                    match$1[1]\n                  ];\n          }\n          break;\n      case 2 : \n          var match$2 = type_padding(fmt[0], fmtty);\n          var match$3 = match$2[1];\n          if (typeof match$3 === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (match$3.tag === 1) {\n            var match$4 = type_format_gen(fmt[1], match$3[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* String */Block.__(2, [\n                        match$2[0],\n                        match$4[0]\n                      ]),\n                    match$4[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 3 : \n          var match$5 = type_padding(fmt[0], fmtty);\n          var match$6 = match$5[1];\n          if (typeof match$6 === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (match$6.tag === 1) {\n            var match$7 = type_format_gen(fmt[1], match$6[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Caml_string */Block.__(3, [\n                        match$5[0],\n                        match$7[0]\n                      ]),\n                    match$7[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 4 : \n          var match$8 = type_padprec(fmt[1], fmt[2], fmtty);\n          var match$9 = match$8[2];\n          if (typeof match$9 === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (match$9.tag === 2) {\n            var match$10 = type_format_gen(fmt[3], match$9[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Int */Block.__(4, [\n                        fmt[0],\n                        match$8[0],\n                        match$8[1],\n                        match$10[0]\n                      ]),\n                    match$10[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 5 : \n          var match$11 = type_padprec(fmt[1], fmt[2], fmtty);\n          var match$12 = match$11[2];\n          if (typeof match$12 === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (match$12.tag === 3) {\n            var match$13 = type_format_gen(fmt[3], match$12[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Int32 */Block.__(5, [\n                        fmt[0],\n                        match$11[0],\n                        match$11[1],\n                        match$13[0]\n                      ]),\n                    match$13[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 6 : \n          var match$14 = type_padprec(fmt[1], fmt[2], fmtty);\n          var match$15 = match$14[2];\n          if (typeof match$15 === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (match$15.tag === 4) {\n            var match$16 = type_format_gen(fmt[3], match$15[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Nativeint */Block.__(6, [\n                        fmt[0],\n                        match$14[0],\n                        match$14[1],\n                        match$16[0]\n                      ]),\n                    match$16[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 7 : \n          var match$17 = type_padprec(fmt[1], fmt[2], fmtty);\n          var match$18 = match$17[2];\n          if (typeof match$18 === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (match$18.tag === 5) {\n            var match$19 = type_format_gen(fmt[3], match$18[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Int64 */Block.__(7, [\n                        fmt[0],\n                        match$17[0],\n                        match$17[1],\n                        match$19[0]\n                      ]),\n                    match$19[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 8 : \n          var match$20 = type_padprec(fmt[1], fmt[2], fmtty);\n          var match$21 = match$20[2];\n          if (typeof match$21 === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (match$21.tag === 6) {\n            var match$22 = type_format_gen(fmt[3], match$21[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Float */Block.__(8, [\n                        fmt[0],\n                        match$20[0],\n                        match$20[1],\n                        match$22[0]\n                      ]),\n                    match$22[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 9 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 7) {\n            var match$23 = type_format_gen(fmt[0], fmtty[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Bool */Block.__(9, [match$23[0]]),\n                    match$23[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 10 : \n          var match$24 = type_format_gen(fmt[0], fmtty);\n          return /* Fmt_fmtty_EBB */[\n                  /* Flush */Block.__(10, [match$24[0]]),\n                  match$24[1]\n                ];\n      case 11 : \n          var match$25 = type_format_gen(fmt[1], fmtty);\n          return /* Fmt_fmtty_EBB */[\n                  /* String_literal */Block.__(11, [\n                      fmt[0],\n                      match$25[0]\n                    ]),\n                  match$25[1]\n                ];\n      case 12 : \n          var match$26 = type_format_gen(fmt[1], fmtty);\n          return /* Fmt_fmtty_EBB */[\n                  /* Char_literal */Block.__(12, [\n                      fmt[0],\n                      match$26[0]\n                    ]),\n                  match$26[1]\n                ];\n      case 13 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 8) {\n            var sub_fmtty$prime = fmtty[0];\n            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[fmt[1]], /* Fmtty_EBB */[sub_fmtty$prime])) {\n              throw Type_mismatch;\n            }\n            var match$27 = type_format_gen(fmt[2], fmtty[1]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Format_arg */Block.__(13, [\n                        fmt[0],\n                        sub_fmtty$prime,\n                        match$27[0]\n                      ]),\n                    match$27[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 14 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 9) {\n            var sub_fmtty1 = fmtty[0];\n            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(fmt[1])], /* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub_fmtty1)])) {\n              throw Type_mismatch;\n            }\n            var match$28 = type_format_gen(fmt[2], CamlinternalFormatBasics.erase_rel(fmtty[2]));\n            return /* Fmt_fmtty_EBB */[\n                    /* Format_subst */Block.__(14, [\n                        fmt[0],\n                        sub_fmtty1,\n                        match$28[0]\n                      ]),\n                    match$28[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 15 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 10) {\n            var match$29 = type_format_gen(fmt[0], fmtty[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Alpha */Block.__(15, [match$29[0]]),\n                    match$29[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 16 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 11) {\n            var match$30 = type_format_gen(fmt[0], fmtty[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Theta */Block.__(16, [match$30[0]]),\n                    match$30[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 17 : \n          var match$31 = type_format_gen(fmt[1], fmtty);\n          return /* Fmt_fmtty_EBB */[\n                  /* Formatting_lit */Block.__(17, [\n                      fmt[0],\n                      match$31[0]\n                    ]),\n                  match$31[1]\n                ];\n      case 18 : \n          var formatting_gen = fmt[0];\n          var fmt0 = fmt[1];\n          var fmtty0 = fmtty;\n          if (formatting_gen.tag) {\n            var match$32 = formatting_gen[0];\n            var match$33 = type_format_gen(match$32[0], fmtty0);\n            var match$34 = type_format_gen(fmt0, match$33[1]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Formatting_gen */Block.__(18, [\n                        /* Open_box */Block.__(1, [/* Format */[\n                              match$33[0],\n                              match$32[1]\n                            ]]),\n                        match$34[0]\n                      ]),\n                    match$34[1]\n                  ];\n          }\n          else {\n            var match$35 = formatting_gen[0];\n            var match$36 = type_format_gen(match$35[0], fmtty0);\n            var match$37 = type_format_gen(fmt0, match$36[1]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Formatting_gen */Block.__(18, [\n                        /* Open_tag */Block.__(0, [/* Format */[\n                              match$36[0],\n                              match$35[1]\n                            ]]),\n                        match$37[0]\n                      ]),\n                    match$37[1]\n                  ];\n          }\n      case 19 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 13) {\n            var match$38 = type_format_gen(fmt[0], fmtty[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Reader */Block.__(19, [match$38[0]]),\n                    match$38[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 20 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 1) {\n            var match$39 = type_format_gen(fmt[2], fmtty[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Scan_char_set */Block.__(20, [\n                        fmt[0],\n                        fmt[1],\n                        match$39[0]\n                      ]),\n                    match$39[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 21 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 2) {\n            var match$40 = type_format_gen(fmt[1], fmtty[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Scan_get_counter */Block.__(21, [\n                        fmt[0],\n                        match$40[0]\n                      ]),\n                    match$40[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 23 : \n          var ign = fmt[0];\n          var fmt$1 = fmt[1];\n          var fmtty$1 = fmtty;\n          if (typeof ign === \"number\") {\n            switch (ign) {\n              case 3 : \n                  if (typeof fmtty$1 === \"number\") {\n                    throw Type_mismatch;\n                  }\n                  else if (fmtty$1.tag === 14) {\n                    var match$41 = type_format_gen(fmt$1, fmtty$1[0]);\n                    return /* Fmt_fmtty_EBB */[\n                            /* Ignored_param */Block.__(23, [\n                                /* Ignored_reader */3,\n                                match$41[0]\n                              ]),\n                            match$41[1]\n                          ];\n                  }\n                  else {\n                    throw Type_mismatch;\n                  }\n                  break;\n              case 0 : \n              case 1 : \n              case 2 : \n              case 4 : \n                  return type_ignored_param_one(ign, fmt$1, fmtty$1);\n              \n            }\n          }\n          else {\n            switch (ign.tag | 0) {\n              case 7 : \n                  return type_ignored_param_one(/* Ignored_format_arg */Block.__(7, [\n                                ign[0],\n                                ign[1]\n                              ]), fmt$1, fmtty$1);\n              case 8 : \n                  var match$42 = type_ignored_format_substitution(ign[1], fmt$1, fmtty$1);\n                  var match$43 = match$42[1];\n                  return /* Fmt_fmtty_EBB */[\n                          /* Ignored_param */Block.__(23, [\n                              /* Ignored_format_subst */Block.__(8, [\n                                  ign[0],\n                                  match$42[0]\n                                ]),\n                              match$43[0]\n                            ]),\n                          match$43[1]\n                        ];\n              case 0 : \n              case 1 : \n              case 2 : \n              case 3 : \n              case 4 : \n              case 5 : \n              case 6 : \n              case 9 : \n              case 10 : \n                  return type_ignored_param_one(ign, fmt$1, fmtty$1);\n              \n            }\n          }\n      case 22 : \n      case 24 : \n          throw Type_mismatch;\n      \n    }\n  }\n}\n\nfunction type_ignored_param_one(ign, fmt, fmtty) {\n  var match = type_format_gen(fmt, fmtty);\n  return /* Fmt_fmtty_EBB */[\n          /* Ignored_param */Block.__(23, [\n              ign,\n              match[0]\n            ]),\n          match[1]\n        ];\n}\n\nfunction type_ignored_format_substitution(sub_fmtty, fmt, fmtty) {\n  if (typeof sub_fmtty === \"number\") {\n    return /* Fmtty_fmt_EBB */[\n            /* End_of_fmtty */0,\n            type_format_gen(fmt, fmtty)\n          ];\n  }\n  else {\n    switch (sub_fmtty.tag | 0) {\n      case 0 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag) {\n            throw Type_mismatch;\n          }\n          else {\n            var match = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Char_ty */Block.__(0, [match[0]]),\n                    match[1]\n                  ];\n          }\n          break;\n      case 1 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 1) {\n            var match$1 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* String_ty */Block.__(1, [match$1[0]]),\n                    match$1[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 2 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 2) {\n            var match$2 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Int_ty */Block.__(2, [match$2[0]]),\n                    match$2[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 3 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 3) {\n            var match$3 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Int32_ty */Block.__(3, [match$3[0]]),\n                    match$3[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 4 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 4) {\n            var match$4 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Nativeint_ty */Block.__(4, [match$4[0]]),\n                    match$4[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 5 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 5) {\n            var match$5 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Int64_ty */Block.__(5, [match$5[0]]),\n                    match$5[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 6 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 6) {\n            var match$6 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Float_ty */Block.__(6, [match$6[0]]),\n                    match$6[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 7 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 7) {\n            var match$7 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Bool_ty */Block.__(7, [match$7[0]]),\n                    match$7[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 8 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 8) {\n            var sub2_fmtty$prime = fmtty[0];\n            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[sub_fmtty[0]], /* Fmtty_EBB */[sub2_fmtty$prime])) {\n              throw Type_mismatch;\n            }\n            var match$8 = type_ignored_format_substitution(sub_fmtty[1], fmt, fmtty[1]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Format_arg_ty */Block.__(8, [\n                        sub2_fmtty$prime,\n                        match$8[0]\n                      ]),\n                    match$8[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 9 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 9) {\n            var sub2_fmtty$prime$1 = fmtty[1];\n            var sub1_fmtty$prime = fmtty[0];\n            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub_fmtty[0])], /* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub1_fmtty$prime)])) {\n              throw Type_mismatch;\n            }\n            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub_fmtty[1])], /* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub2_fmtty$prime$1)])) {\n              throw Type_mismatch;\n            }\n            var sub_fmtty$prime = trans(symm(sub1_fmtty$prime), sub2_fmtty$prime$1);\n            var match$9 = fmtty_rel_det(sub_fmtty$prime);\n            Curry._1(match$9[1], /* Refl */0);\n            Curry._1(match$9[3], /* Refl */0);\n            var match$10 = type_ignored_format_substitution(CamlinternalFormatBasics.erase_rel(sub_fmtty[2]), fmt, fmtty[2]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Format_subst_ty */Block.__(9, [\n                        sub1_fmtty$prime,\n                        sub2_fmtty$prime$1,\n                        symm(match$10[0])\n                      ]),\n                    match$10[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 10 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 10) {\n            var match$11 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Alpha_ty */Block.__(10, [match$11[0]]),\n                    match$11[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 11 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 11) {\n            var match$12 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Theta_ty */Block.__(11, [match$12[0]]),\n                    match$12[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 12 : \n          throw Type_mismatch;\n      case 13 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 13) {\n            var match$13 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Reader_ty */Block.__(13, [match$13[0]]),\n                    match$13[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      case 14 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          }\n          else if (fmtty.tag === 14) {\n            var match$14 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Ignored_reader_ty */Block.__(14, [match$14[0]]),\n                    match$14[1]\n                  ];\n          }\n          else {\n            throw Type_mismatch;\n          }\n          break;\n      \n    }\n  }\n}\n\nfunction recast(fmt, fmtty) {\n  return type_format(fmt, CamlinternalFormatBasics.erase_rel(symm(fmtty)));\n}\n\nfunction fix_padding(padty, width, str) {\n  var len = str.length;\n  var match_000 = Pervasives.abs(width);\n  var match_001 = width < 0 ? /* Left */0 : padty;\n  var padty$1 = match_001;\n  var width$1 = match_000;\n  if (width$1 <= len) {\n    return str;\n  }\n  else {\n    var res = Bytes.make(width$1, padty$1 === /* Zeros */2 ? /* \"0\" */48 : /* \" \" */32);\n    switch (padty$1) {\n      case 0 : \n          $$String.blit(str, 0, res, 0, len);\n          break;\n      case 1 : \n          $$String.blit(str, 0, res, width$1 - len | 0, len);\n          break;\n      case 2 : \n          if (len > 0 && (Caml_string.get(str, 0) === /* \"+\" */43 || Caml_string.get(str, 0) === /* \"-\" */45 || Caml_string.get(str, 0) === /* \" \" */32)) {\n            res[0] = Caml_string.get(str, 0);\n            $$String.blit(str, 1, res, (width$1 - len | 0) + 1 | 0, len - 1 | 0);\n          }\n          else if (len > 1 && Caml_string.get(str, 0) === /* \"0\" */48 && (Caml_string.get(str, 1) === /* \"x\" */120 || Caml_string.get(str, 1) === /* \"X\" */88)) {\n            res[1] = Caml_string.get(str, 1);\n            $$String.blit(str, 2, res, (width$1 - len | 0) + 2 | 0, len - 2 | 0);\n          }\n          else {\n            $$String.blit(str, 0, res, width$1 - len | 0, len);\n          }\n          break;\n      \n    }\n    return Caml_string.bytes_to_string(res);\n  }\n}\n\nfunction fix_int_precision(prec, str) {\n  var prec$1 = Pervasives.abs(prec);\n  var len = str.length;\n  var c = Caml_string.get(str, 0);\n  var exit = 0;\n  if (c >= 58) {\n    if (c >= 71) {\n      if (c > 102 || c < 97) {\n        return str;\n      }\n      else {\n        exit = 2;\n      }\n    }\n    else if (c >= 65) {\n      exit = 2;\n    }\n    else {\n      return str;\n    }\n  }\n  else if (c !== 32) {\n    if (c >= 43) {\n      switch (c - 43 | 0) {\n        case 0 : \n        case 2 : \n            exit = 1;\n            break;\n        case 1 : \n        case 3 : \n        case 4 : \n            return str;\n        case 5 : \n            if ((prec$1 + 2 | 0) > len && len > 1 && (Caml_string.get(str, 1) === /* \"x\" */120 || Caml_string.get(str, 1) === /* \"X\" */88)) {\n              var res = Bytes.make(prec$1 + 2 | 0, /* \"0\" */48);\n              res[1] = Caml_string.get(str, 1);\n              $$String.blit(str, 2, res, (prec$1 - len | 0) + 4 | 0, len - 2 | 0);\n              return Caml_string.bytes_to_string(res);\n            }\n            else {\n              exit = 2;\n            }\n            break;\n        case 6 : \n        case 7 : \n        case 8 : \n        case 9 : \n        case 10 : \n        case 11 : \n        case 12 : \n        case 13 : \n        case 14 : \n            exit = 2;\n            break;\n        \n      }\n    }\n    else {\n      return str;\n    }\n  }\n  else {\n    exit = 1;\n  }\n  switch (exit) {\n    case 1 : \n        if ((prec$1 + 1 | 0) > len) {\n          var res$1 = Bytes.make(prec$1 + 1 | 0, /* \"0\" */48);\n          res$1[0] = c;\n          $$String.blit(str, 1, res$1, (prec$1 - len | 0) + 2 | 0, len - 1 | 0);\n          return Caml_string.bytes_to_string(res$1);\n        }\n        else {\n          return str;\n        }\n        break;\n    case 2 : \n        if (prec$1 > len) {\n          var res$2 = Bytes.make(prec$1, /* \"0\" */48);\n          $$String.blit(str, 0, res$2, prec$1 - len | 0, len);\n          return Caml_string.bytes_to_string(res$2);\n        }\n        else {\n          return str;\n        }\n        break;\n    \n  }\n}\n\nfunction string_to_caml_string(str) {\n  return $$String.concat($$String.escaped(str), /* :: */[\n              '\"',\n              /* :: */[\n                '\"',\n                /* [] */0\n              ]\n            ]);\n}\n\nfunction format_of_iconv(iconv) {\n  switch (iconv) {\n    case 0 : \n        return \"%d\";\n    case 1 : \n        return \"%+d\";\n    case 2 : \n        return \"% d\";\n    case 3 : \n        return \"%i\";\n    case 4 : \n        return \"%+i\";\n    case 5 : \n        return \"% i\";\n    case 6 : \n        return \"%x\";\n    case 7 : \n        return \"%#x\";\n    case 8 : \n        return \"%X\";\n    case 9 : \n        return \"%#X\";\n    case 10 : \n        return \"%o\";\n    case 11 : \n        return \"%#o\";\n    case 12 : \n        return \"%u\";\n    \n  }\n}\n\nfunction format_of_aconv(iconv, c) {\n  var seps;\n  switch (iconv) {\n    case 0 : \n        seps = /* :: */[\n          \"%\",\n          /* :: */[\n            \"d\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 1 : \n        seps = /* :: */[\n          \"%+\",\n          /* :: */[\n            \"d\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 2 : \n        seps = /* :: */[\n          \"% \",\n          /* :: */[\n            \"d\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 3 : \n        seps = /* :: */[\n          \"%\",\n          /* :: */[\n            \"i\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 4 : \n        seps = /* :: */[\n          \"%+\",\n          /* :: */[\n            \"i\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 5 : \n        seps = /* :: */[\n          \"% \",\n          /* :: */[\n            \"i\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 6 : \n        seps = /* :: */[\n          \"%\",\n          /* :: */[\n            \"x\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 7 : \n        seps = /* :: */[\n          \"%#\",\n          /* :: */[\n            \"x\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 8 : \n        seps = /* :: */[\n          \"%\",\n          /* :: */[\n            \"X\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 9 : \n        seps = /* :: */[\n          \"%#\",\n          /* :: */[\n            \"X\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 10 : \n        seps = /* :: */[\n          \"%\",\n          /* :: */[\n            \"o\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 11 : \n        seps = /* :: */[\n          \"%#\",\n          /* :: */[\n            \"o\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 12 : \n        seps = /* :: */[\n          \"%\",\n          /* :: */[\n            \"u\",\n            /* [] */0\n          ]\n        ];\n        break;\n    \n  }\n  return $$String.concat(Caml_string.bytes_to_string(Bytes.make(1, c)), seps);\n}\n\nfunction format_of_fconv(fconv, prec) {\n  if (fconv === /* Float_F */15) {\n    return \"%.12g\";\n  }\n  else {\n    var prec$1 = Pervasives.abs(prec);\n    var symb = char_of_fconv(fconv);\n    var buf = /* record */[\n      /* ind */0,\n      /* bytes */new Array(16)\n    ];\n    buffer_add_char(buf, /* \"%\" */37);\n    bprint_fconv_flag(buf, fconv);\n    buffer_add_char(buf, /* \".\" */46);\n    buffer_add_string(buf, \"\" + prec$1);\n    buffer_add_char(buf, symb);\n    return buffer_contents(buf);\n  }\n}\n\nfunction convert_int(iconv, n) {\n  return Caml_format.caml_format_int(format_of_iconv(iconv), n);\n}\n\nfunction convert_int32(iconv, n) {\n  return Caml_format.caml_int32_format(format_of_aconv(iconv, /* \"l\" */108), n);\n}\n\nfunction convert_nativeint(iconv, n) {\n  return Caml_format.caml_nativeint_format(format_of_aconv(iconv, /* \"n\" */110), n);\n}\n\nfunction convert_int64(iconv, n) {\n  return Caml_format.caml_int64_format(format_of_aconv(iconv, /* \"L\" */76), n);\n}\n\nfunction convert_float(fconv, prec, x) {\n  var prec$1 = Pervasives.abs(prec);\n  var str = Caml_format.caml_format_float(format_of_fconv(fconv, prec$1), x);\n  if (fconv !== /* Float_F */15) {\n    return str;\n  }\n  else {\n    var len = str.length;\n    var is_valid = function (_i) {\n      while(true) {\n        var i = _i;\n        if (i === len) {\n          return /* false */0;\n        }\n        else {\n          var match = Caml_string.get(str, i);\n          var switcher = match - 46 | 0;\n          if (switcher > 23 || switcher < 0) {\n            if (switcher !== 55) {\n              _i = i + 1 | 0;\n              continue ;\n              \n            }\n            else {\n              return /* true */1;\n            }\n          }\n          else if (switcher > 22 || switcher < 1) {\n            return /* true */1;\n          }\n          else {\n            _i = i + 1 | 0;\n            continue ;\n            \n          }\n        }\n      };\n    };\n    var match = Caml_float.caml_classify_float(x);\n    if (match !== 3) {\n      if (match >= 4) {\n        return \"nan\";\n      }\n      else if (is_valid(0)) {\n        return str;\n      }\n      else {\n        return str + \".\";\n      }\n    }\n    else if (x < 0.0) {\n      return \"neg_infinity\";\n    }\n    else {\n      return \"infinity\";\n    }\n  }\n}\n\nfunction format_caml_char(c) {\n  return $$String.concat(Char.escaped(c), /* :: */[\n              \"'\",\n              /* :: */[\n                \"'\",\n                /* [] */0\n              ]\n            ]);\n}\n\nfunction string_of_fmtty(fmtty) {\n  var buf = /* record */[\n    /* ind */0,\n    /* bytes */new Array(16)\n  ];\n  bprint_fmtty(buf, fmtty);\n  return buffer_contents(buf);\n}\n\nfunction make_printf(_k, o, _acc, _fmt) {\n  while(true) {\n    var fmt = _fmt;\n    var acc = _acc;\n    var k = _k;\n    if (typeof fmt === \"number\") {\n      return Curry._2(k, o, acc);\n    }\n    else {\n      switch (fmt.tag | 0) {\n        case 0 : \n            var rest = fmt[0];\n            return (function(k,acc,rest){\n            return function (c) {\n              var new_acc = /* Acc_data_char */Block.__(5, [\n                  acc,\n                  c\n                ]);\n              return make_printf(k, o, new_acc, rest);\n            }\n            }(k,acc,rest));\n        case 1 : \n            var rest$1 = fmt[0];\n            return (function(k,acc,rest$1){\n            return function (c) {\n              var new_acc_001 = format_caml_char(c);\n              var new_acc = /* Acc_data_string */Block.__(4, [\n                  acc,\n                  new_acc_001\n                ]);\n              return make_printf(k, o, new_acc, rest$1);\n            }\n            }(k,acc,rest$1));\n        case 2 : \n            return make_string_padding(k, o, acc, fmt[1], fmt[0], function (str) {\n                        return str;\n                      });\n        case 3 : \n            return make_string_padding(k, o, acc, fmt[1], fmt[0], string_to_caml_string);\n        case 4 : \n            return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_int, fmt[0]);\n        case 5 : \n            return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_int32, fmt[0]);\n        case 6 : \n            return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_nativeint, fmt[0]);\n        case 7 : \n            return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_int64, fmt[0]);\n        case 8 : \n            var k$1 = k;\n            var o$1 = o;\n            var acc$1 = acc;\n            var fmt$1 = fmt[3];\n            var pad = fmt[1];\n            var prec = fmt[2];\n            var fconv = fmt[0];\n            if (typeof pad === \"number\") {\n              if (typeof prec === \"number\") {\n                if (prec !== 0) {\n                  return (function(k$1,o$1,acc$1,fmt$1,fconv){\n                  return function (p, x) {\n                    var str = convert_float(fconv, p, x);\n                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                  acc$1,\n                                  str\n                                ]), fmt$1);\n                  }\n                  }(k$1,o$1,acc$1,fmt$1,fconv));\n                }\n                else {\n                  return (function(k$1,o$1,acc$1,fmt$1,fconv){\n                  return function (x) {\n                    var str = convert_float(fconv, 6, x);\n                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                  acc$1,\n                                  str\n                                ]), fmt$1);\n                  }\n                  }(k$1,o$1,acc$1,fmt$1,fconv));\n                }\n              }\n              else {\n                var p = prec[0];\n                return (function(k$1,o$1,acc$1,fmt$1,fconv,p){\n                return function (x) {\n                  var str = convert_float(fconv, p, x);\n                  return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                acc$1,\n                                str\n                              ]), fmt$1);\n                }\n                }(k$1,o$1,acc$1,fmt$1,fconv,p));\n              }\n            }\n            else if (pad.tag) {\n              var padty = pad[0];\n              if (typeof prec === \"number\") {\n                if (prec !== 0) {\n                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty){\n                  return function (w, p, x) {\n                    var str = fix_padding(padty, w, convert_float(fconv, p, x));\n                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                  acc$1,\n                                  str\n                                ]), fmt$1);\n                  }\n                  }(k$1,o$1,acc$1,fmt$1,fconv,padty));\n                }\n                else {\n                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty){\n                  return function (w, x) {\n                    var str = convert_float(fconv, 6, x);\n                    var str$prime = fix_padding(padty, w, str);\n                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                  acc$1,\n                                  str$prime\n                                ]), fmt$1);\n                  }\n                  }(k$1,o$1,acc$1,fmt$1,fconv,padty));\n                }\n              }\n              else {\n                var p$1 = prec[0];\n                return (function(k$1,o$1,acc$1,fmt$1,fconv,padty,p$1){\n                return function (w, x) {\n                  var str = fix_padding(padty, w, convert_float(fconv, p$1, x));\n                  return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                acc$1,\n                                str\n                              ]), fmt$1);\n                }\n                }(k$1,o$1,acc$1,fmt$1,fconv,padty,p$1));\n              }\n            }\n            else {\n              var w = pad[1];\n              var padty$1 = pad[0];\n              if (typeof prec === \"number\") {\n                if (prec !== 0) {\n                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w){\n                  return function (p, x) {\n                    var str = fix_padding(padty$1, w, convert_float(fconv, p, x));\n                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                  acc$1,\n                                  str\n                                ]), fmt$1);\n                  }\n                  }(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w));\n                }\n                else {\n                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w){\n                  return function (x) {\n                    var str = convert_float(fconv, 6, x);\n                    var str$prime = fix_padding(padty$1, w, str);\n                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                  acc$1,\n                                  str$prime\n                                ]), fmt$1);\n                  }\n                  }(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w));\n                }\n              }\n              else {\n                var p$2 = prec[0];\n                return (function(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w,p$2){\n                return function (x) {\n                  var str = fix_padding(padty$1, w, convert_float(fconv, p$2, x));\n                  return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                acc$1,\n                                str\n                              ]), fmt$1);\n                }\n                }(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w,p$2));\n              }\n            }\n        case 9 : \n            var rest$2 = fmt[0];\n            return (function(k,acc,rest$2){\n            return function (b) {\n              return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                            acc,\n                            b ? \"true\" : \"false\"\n                          ]), rest$2);\n            }\n            }(k,acc,rest$2));\n        case 10 : \n            _fmt = fmt[0];\n            _acc = /* Acc_flush */Block.__(7, [acc]);\n            continue ;\n            case 11 : \n            _fmt = fmt[1];\n            _acc = /* Acc_string_literal */Block.__(2, [\n                acc,\n                fmt[0]\n              ]);\n            continue ;\n            case 12 : \n            _fmt = fmt[1];\n            _acc = /* Acc_char_literal */Block.__(3, [\n                acc,\n                fmt[0]\n              ]);\n            continue ;\n            case 13 : \n            var rest$3 = fmt[2];\n            var ty = string_of_fmtty(fmt[1]);\n            return (function(k,acc,rest$3,ty){\n            return function () {\n              return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                            acc,\n                            ty\n                          ]), rest$3);\n            }\n            }(k,acc,rest$3,ty));\n        case 14 : \n            var rest$4 = fmt[2];\n            var fmtty = fmt[1];\n            return (function(k,acc,fmtty,rest$4){\n            return function (param) {\n              return make_printf(k, o, acc, CamlinternalFormatBasics.concat_fmt(recast(param[0], fmtty), rest$4));\n            }\n            }(k,acc,fmtty,rest$4));\n        case 15 : \n            var rest$5 = fmt[0];\n            return (function(k,acc,rest$5){\n            return function (f, x) {\n              return make_printf(k, o, /* Acc_delay */Block.__(6, [\n                            acc,\n                            function (o) {\n                              return Curry._2(f, o, x);\n                            }\n                          ]), rest$5);\n            }\n            }(k,acc,rest$5));\n        case 16 : \n            var rest$6 = fmt[0];\n            return (function(k,acc,rest$6){\n            return function (f) {\n              return make_printf(k, o, /* Acc_delay */Block.__(6, [\n                            acc,\n                            f\n                          ]), rest$6);\n            }\n            }(k,acc,rest$6));\n        case 17 : \n            _fmt = fmt[1];\n            _acc = /* Acc_formatting_lit */Block.__(0, [\n                acc,\n                fmt[0]\n              ]);\n            continue ;\n            case 18 : \n            var match = fmt[0];\n            if (match.tag) {\n              var rest$7 = fmt[1];\n              var k$prime = (function(k,acc,rest$7){\n              return function (koc, kacc) {\n                return make_printf(k, koc, /* Acc_formatting_gen */Block.__(1, [\n                              acc,\n                              /* Acc_open_box */Block.__(1, [kacc])\n                            ]), rest$7);\n              }\n              }(k,acc,rest$7));\n              _fmt = match[0][0];\n              _acc = /* End_of_acc */0;\n              _k = k$prime;\n              continue ;\n              \n            }\n            else {\n              var rest$8 = fmt[1];\n              var k$prime$1 = (function(k,acc,rest$8){\n              return function (koc, kacc) {\n                return make_printf(k, koc, /* Acc_formatting_gen */Block.__(1, [\n                              acc,\n                              /* Acc_open_tag */Block.__(0, [kacc])\n                            ]), rest$8);\n              }\n              }(k,acc,rest$8));\n              _fmt = match[0][0];\n              _acc = /* End_of_acc */0;\n              _k = k$prime$1;\n              continue ;\n              \n            }\n            break;\n        case 19 : \n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  [\n                    \"camlinternalFormat.ml\",\n                    1449,\n                    4\n                  ]\n                ];\n        case 20 : \n            var rest$9 = fmt[2];\n            var new_acc = /* Acc_invalid_arg */Block.__(8, [\n                acc,\n                \"Printf: bad conversion %[\"\n              ]);\n            return (function(k,rest$9,new_acc){\n            return function () {\n              return make_printf(k, o, new_acc, rest$9);\n            }\n            }(k,rest$9,new_acc));\n        case 21 : \n            var rest$10 = fmt[1];\n            return (function(k,acc,rest$10){\n            return function (n) {\n              var new_acc_001 = Caml_format.caml_format_int(\"%u\", n);\n              var new_acc = /* Acc_data_string */Block.__(4, [\n                  acc,\n                  new_acc_001\n                ]);\n              return make_printf(k, o, new_acc, rest$10);\n            }\n            }(k,acc,rest$10));\n        case 22 : \n            var rest$11 = fmt[0];\n            return (function(k,acc,rest$11){\n            return function (c) {\n              var new_acc = /* Acc_data_char */Block.__(5, [\n                  acc,\n                  c\n                ]);\n              return make_printf(k, o, new_acc, rest$11);\n            }\n            }(k,acc,rest$11));\n        case 23 : \n            var k$2 = k;\n            var o$2 = o;\n            var acc$2 = acc;\n            var ign = fmt[0];\n            var fmt$2 = fmt[1];\n            if (typeof ign === \"number\") {\n              switch (ign) {\n                case 3 : \n                    throw [\n                          Caml_builtin_exceptions.assert_failure,\n                          [\n                            \"camlinternalFormat.ml\",\n                            1517,\n                            39\n                          ]\n                        ];\n                case 0 : \n                case 1 : \n                case 2 : \n                case 4 : \n                    return make_invalid_arg(k$2, o$2, acc$2, fmt$2);\n                \n              }\n            }\n            else {\n              switch (ign.tag | 0) {\n                case 8 : \n                    return make_from_fmtty(k$2, o$2, acc$2, ign[1], fmt$2);\n                case 0 : \n                case 1 : \n                case 2 : \n                case 3 : \n                case 4 : \n                case 5 : \n                case 6 : \n                case 7 : \n                case 9 : \n                case 10 : \n                    return make_invalid_arg(k$2, o$2, acc$2, fmt$2);\n                \n              }\n            }\n        case 24 : \n            return make_custom(k, o, acc, fmt[2], fmt[0], Curry._1(fmt[1], /* () */0));\n        \n      }\n    }\n  };\n}\n\nfunction make_from_fmtty(k, o, acc, fmtty, fmt) {\n  if (typeof fmtty === \"number\") {\n    return make_invalid_arg(k, o, acc, fmt);\n  }\n  else {\n    switch (fmtty.tag | 0) {\n      case 0 : \n          var rest = fmtty[0];\n          return function () {\n            return make_from_fmtty(k, o, acc, rest, fmt);\n          };\n      case 1 : \n          var rest$1 = fmtty[0];\n          return function () {\n            return make_from_fmtty(k, o, acc, rest$1, fmt);\n          };\n      case 2 : \n          var rest$2 = fmtty[0];\n          return function () {\n            return make_from_fmtty(k, o, acc, rest$2, fmt);\n          };\n      case 3 : \n          var rest$3 = fmtty[0];\n          return function () {\n            return make_from_fmtty(k, o, acc, rest$3, fmt);\n          };\n      case 4 : \n          var rest$4 = fmtty[0];\n          return function () {\n            return make_from_fmtty(k, o, acc, rest$4, fmt);\n          };\n      case 5 : \n          var rest$5 = fmtty[0];\n          return function () {\n            return make_from_fmtty(k, o, acc, rest$5, fmt);\n          };\n      case 6 : \n          var rest$6 = fmtty[0];\n          return function () {\n            return make_from_fmtty(k, o, acc, rest$6, fmt);\n          };\n      case 7 : \n          var rest$7 = fmtty[0];\n          return function () {\n            return make_from_fmtty(k, o, acc, rest$7, fmt);\n          };\n      case 8 : \n          var rest$8 = fmtty[1];\n          return function () {\n            return make_from_fmtty(k, o, acc, rest$8, fmt);\n          };\n      case 9 : \n          var rest$9 = fmtty[2];\n          var ty = trans(symm(fmtty[0]), fmtty[1]);\n          return function () {\n            return make_from_fmtty(k, o, acc, CamlinternalFormatBasics.concat_fmtty(ty, rest$9), fmt);\n          };\n      case 10 : \n          var rest$10 = fmtty[0];\n          return function (_, _$1) {\n            return make_from_fmtty(k, o, acc, rest$10, fmt);\n          };\n      case 11 : \n          var rest$11 = fmtty[0];\n          return function () {\n            return make_from_fmtty(k, o, acc, rest$11, fmt);\n          };\n      case 12 : \n          var rest$12 = fmtty[0];\n          return function () {\n            return make_from_fmtty(k, o, acc, rest$12, fmt);\n          };\n      case 13 : \n          throw [\n                Caml_builtin_exceptions.assert_failure,\n                [\n                  \"camlinternalFormat.ml\",\n                  1540,\n                  31\n                ]\n              ];\n      case 14 : \n          throw [\n                Caml_builtin_exceptions.assert_failure,\n                [\n                  \"camlinternalFormat.ml\",\n                  1541,\n                  31\n                ]\n              ];\n      \n    }\n  }\n}\n\nfunction make_invalid_arg(k, o, acc, fmt) {\n  return make_printf(k, o, /* Acc_invalid_arg */Block.__(8, [\n                acc,\n                \"Printf: bad conversion %_\"\n              ]), fmt);\n}\n\nfunction make_string_padding(k, o, acc, fmt, pad, trans) {\n  if (typeof pad === \"number\") {\n    return function (x) {\n      var new_acc_001 = Curry._1(trans, x);\n      var new_acc = /* Acc_data_string */Block.__(4, [\n          acc,\n          new_acc_001\n        ]);\n      return make_printf(k, o, new_acc, fmt);\n    };\n  }\n  else if (pad.tag) {\n    var padty = pad[0];\n    return function (w, x) {\n      var new_acc_001 = fix_padding(padty, w, Curry._1(trans, x));\n      var new_acc = /* Acc_data_string */Block.__(4, [\n          acc,\n          new_acc_001\n        ]);\n      return make_printf(k, o, new_acc, fmt);\n    };\n  }\n  else {\n    var width = pad[1];\n    var padty$1 = pad[0];\n    return function (x) {\n      var new_acc_001 = fix_padding(padty$1, width, Curry._1(trans, x));\n      var new_acc = /* Acc_data_string */Block.__(4, [\n          acc,\n          new_acc_001\n        ]);\n      return make_printf(k, o, new_acc, fmt);\n    };\n  }\n}\n\nfunction make_int_padding_precision(k, o, acc, fmt, pad, prec, trans, iconv) {\n  if (typeof pad === \"number\") {\n    if (typeof prec === \"number\") {\n      if (prec !== 0) {\n        return function (p, x) {\n          var str = fix_int_precision(p, Curry._2(trans, iconv, x));\n          return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                        acc,\n                        str\n                      ]), fmt);\n        };\n      }\n      else {\n        return function (x) {\n          var str = Curry._2(trans, iconv, x);\n          return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                        acc,\n                        str\n                      ]), fmt);\n        };\n      }\n    }\n    else {\n      var p = prec[0];\n      return function (x) {\n        var str = fix_int_precision(p, Curry._2(trans, iconv, x));\n        return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                      acc,\n                      str\n                    ]), fmt);\n      };\n    }\n  }\n  else if (pad.tag) {\n    var padty = pad[0];\n    if (typeof prec === \"number\") {\n      if (prec !== 0) {\n        return function (w, p, x) {\n          var str = fix_padding(padty, w, fix_int_precision(p, Curry._2(trans, iconv, x)));\n          return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                        acc,\n                        str\n                      ]), fmt);\n        };\n      }\n      else {\n        return function (w, x) {\n          var str = fix_padding(padty, w, Curry._2(trans, iconv, x));\n          return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                        acc,\n                        str\n                      ]), fmt);\n        };\n      }\n    }\n    else {\n      var p$1 = prec[0];\n      return function (w, x) {\n        var str = fix_padding(padty, w, fix_int_precision(p$1, Curry._2(trans, iconv, x)));\n        return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                      acc,\n                      str\n                    ]), fmt);\n      };\n    }\n  }\n  else {\n    var w = pad[1];\n    var padty$1 = pad[0];\n    if (typeof prec === \"number\") {\n      if (prec !== 0) {\n        return function (p, x) {\n          var str = fix_padding(padty$1, w, fix_int_precision(p, Curry._2(trans, iconv, x)));\n          return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                        acc,\n                        str\n                      ]), fmt);\n        };\n      }\n      else {\n        return function (x) {\n          var str = fix_padding(padty$1, w, Curry._2(trans, iconv, x));\n          return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                        acc,\n                        str\n                      ]), fmt);\n        };\n      }\n    }\n    else {\n      var p$2 = prec[0];\n      return function (x) {\n        var str = fix_padding(padty$1, w, fix_int_precision(p$2, Curry._2(trans, iconv, x)));\n        return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                      acc,\n                      str\n                    ]), fmt);\n      };\n    }\n  }\n}\n\nfunction make_custom(k, o, acc, rest, arity, f) {\n  if (arity) {\n    var arity$1 = arity[0];\n    return function (x) {\n      return make_custom(k, o, acc, rest, arity$1, Curry._1(f, x));\n    };\n  }\n  else {\n    return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                  acc,\n                  f\n                ]), rest);\n  }\n}\n\nfunction output_acc(o, _acc) {\n  while(true) {\n    var acc = _acc;\n    var exit = 0;\n    if (typeof acc === \"number\") {\n      return /* () */0;\n    }\n    else {\n      switch (acc.tag | 0) {\n        case 0 : \n            var s = string_of_formatting_lit(acc[1]);\n            output_acc(o, acc[0]);\n            return Pervasives.output_string(o, s);\n        case 1 : \n            var match = acc[1];\n            var p = acc[0];\n            output_acc(o, p);\n            if (match.tag) {\n              Pervasives.output_string(o, \"@[\");\n              _acc = match[0];\n              continue ;\n              \n            }\n            else {\n              Pervasives.output_string(o, \"@{\");\n              _acc = match[0];\n              continue ;\n              \n            }\n            break;\n        case 2 : \n        case 4 : \n            exit = 1;\n            break;\n        case 3 : \n        case 5 : \n            exit = 2;\n            break;\n        case 6 : \n            output_acc(o, acc[0]);\n            return Curry._1(acc[1], o);\n        case 7 : \n            output_acc(o, acc[0]);\n            return Caml_io.caml_ml_flush(o);\n        case 8 : \n            output_acc(o, acc[0]);\n            throw [\n                  Caml_builtin_exceptions.invalid_argument,\n                  acc[1]\n                ];\n        \n      }\n    }\n    switch (exit) {\n      case 1 : \n          output_acc(o, acc[0]);\n          return Pervasives.output_string(o, acc[1]);\n      case 2 : \n          output_acc(o, acc[0]);\n          return Caml_io.caml_ml_output_char(o, acc[1]);\n      \n    }\n  };\n}\n\nfunction bufput_acc(b, _acc) {\n  while(true) {\n    var acc = _acc;\n    var exit = 0;\n    if (typeof acc === \"number\") {\n      return /* () */0;\n    }\n    else {\n      switch (acc.tag | 0) {\n        case 0 : \n            var s = string_of_formatting_lit(acc[1]);\n            bufput_acc(b, acc[0]);\n            return Buffer.add_string(b, s);\n        case 1 : \n            var match = acc[1];\n            var p = acc[0];\n            bufput_acc(b, p);\n            if (match.tag) {\n              Buffer.add_string(b, \"@[\");\n              _acc = match[0];\n              continue ;\n              \n            }\n            else {\n              Buffer.add_string(b, \"@{\");\n              _acc = match[0];\n              continue ;\n              \n            }\n            break;\n        case 2 : \n        case 4 : \n            exit = 1;\n            break;\n        case 3 : \n        case 5 : \n            exit = 2;\n            break;\n        case 6 : \n            bufput_acc(b, acc[0]);\n            return Curry._1(acc[1], b);\n        case 7 : \n            _acc = acc[0];\n            continue ;\n            case 8 : \n            bufput_acc(b, acc[0]);\n            throw [\n                  Caml_builtin_exceptions.invalid_argument,\n                  acc[1]\n                ];\n        \n      }\n    }\n    switch (exit) {\n      case 1 : \n          bufput_acc(b, acc[0]);\n          return Buffer.add_string(b, acc[1]);\n      case 2 : \n          bufput_acc(b, acc[0]);\n          return Buffer.add_char(b, acc[1]);\n      \n    }\n  };\n}\n\nfunction strput_acc(b, _acc) {\n  while(true) {\n    var acc = _acc;\n    var exit = 0;\n    if (typeof acc === \"number\") {\n      return /* () */0;\n    }\n    else {\n      switch (acc.tag | 0) {\n        case 0 : \n            var s = string_of_formatting_lit(acc[1]);\n            strput_acc(b, acc[0]);\n            return Buffer.add_string(b, s);\n        case 1 : \n            var match = acc[1];\n            var p = acc[0];\n            strput_acc(b, p);\n            if (match.tag) {\n              Buffer.add_string(b, \"@[\");\n              _acc = match[0];\n              continue ;\n              \n            }\n            else {\n              Buffer.add_string(b, \"@{\");\n              _acc = match[0];\n              continue ;\n              \n            }\n            break;\n        case 2 : \n        case 4 : \n            exit = 1;\n            break;\n        case 3 : \n        case 5 : \n            exit = 2;\n            break;\n        case 6 : \n            strput_acc(b, acc[0]);\n            return Buffer.add_string(b, Curry._1(acc[1], /* () */0));\n        case 7 : \n            _acc = acc[0];\n            continue ;\n            case 8 : \n            strput_acc(b, acc[0]);\n            throw [\n                  Caml_builtin_exceptions.invalid_argument,\n                  acc[1]\n                ];\n        \n      }\n    }\n    switch (exit) {\n      case 1 : \n          strput_acc(b, acc[0]);\n          return Buffer.add_string(b, acc[1]);\n      case 2 : \n          strput_acc(b, acc[0]);\n          return Buffer.add_char(b, acc[1]);\n      \n    }\n  };\n}\n\nfunction failwith_message(param) {\n  var buf = Buffer.create(256);\n  var k = function (_, acc) {\n    strput_acc(buf, acc);\n    var s = Buffer.contents(buf);\n    throw [\n          Caml_builtin_exceptions.failure,\n          s\n        ];\n  };\n  return make_printf(k, /* () */0, /* End_of_acc */0, param[0]);\n}\n\nfunction open_box_of_string(str) {\n  if (str === \"\") {\n    return /* tuple */[\n            0,\n            /* Pp_box */4\n          ];\n  }\n  else {\n    var len = str.length;\n    var invalid_box = function () {\n      return Curry._1(failwith_message(/* Format */[\n                      /* String_literal */Block.__(11, [\n                          \"invalid box description \",\n                          /* Caml_string */Block.__(3, [\n                              /* No_padding */0,\n                              /* End_of_format */0\n                            ])\n                        ]),\n                      \"invalid box description %S\"\n                    ]), str);\n    };\n    var parse_spaces = function (_i) {\n      while(true) {\n        var i = _i;\n        if (i === len) {\n          return i;\n        }\n        else {\n          var match = Caml_string.get(str, i);\n          if (match !== 9) {\n            if (match !== 32) {\n              return i;\n            }\n            else {\n              _i = i + 1 | 0;\n              continue ;\n              \n            }\n          }\n          else {\n            _i = i + 1 | 0;\n            continue ;\n            \n          }\n        }\n      };\n    };\n    var parse_lword = function (_, _j) {\n      while(true) {\n        var j = _j;\n        if (j === len) {\n          return j;\n        }\n        else {\n          var match = Caml_string.get(str, j);\n          if (match > 122 || match < 97) {\n            return j;\n          }\n          else {\n            _j = j + 1 | 0;\n            continue ;\n            \n          }\n        }\n      };\n    };\n    var parse_int = function (_, _j) {\n      while(true) {\n        var j = _j;\n        if (j === len) {\n          return j;\n        }\n        else {\n          var match = Caml_string.get(str, j);\n          if (match >= 48) {\n            if (match >= 58) {\n              return j;\n            }\n            else {\n              _j = j + 1 | 0;\n              continue ;\n              \n            }\n          }\n          else if (match !== 45) {\n            return j;\n          }\n          else {\n            _j = j + 1 | 0;\n            continue ;\n            \n          }\n        }\n      };\n    };\n    var wstart = parse_spaces(0);\n    var wend = parse_lword(wstart, wstart);\n    var box_name = $$String.sub(str, wstart, wend - wstart | 0);\n    var nstart = parse_spaces(wend);\n    var nend = parse_int(nstart, nstart);\n    var indent;\n    if (nstart === nend) {\n      indent = 0;\n    }\n    else {\n      try {\n        indent = Caml_format.caml_int_of_string($$String.sub(str, nstart, nend - nstart | 0));\n      }\n      catch (exn){\n        if (exn[0] === Caml_builtin_exceptions.failure) {\n          indent = invalid_box(/* () */0);\n        }\n        else {\n          throw exn;\n        }\n      }\n    }\n    var exp_end = parse_spaces(nend);\n    if (exp_end !== len) {\n      invalid_box(/* () */0);\n    }\n    var box_type;\n    switch (box_name) {\n      case \"\" : \n      case \"b\" : \n          box_type = /* Pp_box */4;\n          break;\n      case \"h\" : \n          box_type = /* Pp_hbox */0;\n          break;\n      case \"hov\" : \n          box_type = /* Pp_hovbox */3;\n          break;\n      case \"hv\" : \n          box_type = /* Pp_hvbox */2;\n          break;\n      case \"v\" : \n          box_type = /* Pp_vbox */1;\n          break;\n      default:\n        box_type = invalid_box(/* () */0);\n    }\n    return /* tuple */[\n            indent,\n            box_type\n          ];\n  }\n}\n\nfunction make_padding_fmt_ebb(pad, fmt) {\n  if (typeof pad === \"number\") {\n    return /* Padding_fmt_EBB */[\n            /* No_padding */0,\n            fmt\n          ];\n  }\n  else if (pad.tag) {\n    return /* Padding_fmt_EBB */[\n            /* Arg_padding */Block.__(1, [pad[0]]),\n            fmt\n          ];\n  }\n  else {\n    return /* Padding_fmt_EBB */[\n            /* Lit_padding */Block.__(0, [\n                pad[0],\n                pad[1]\n              ]),\n            fmt\n          ];\n  }\n}\n\nfunction make_precision_fmt_ebb(prec, fmt) {\n  if (typeof prec === \"number\") {\n    if (prec !== 0) {\n      return /* Precision_fmt_EBB */[\n              /* Arg_precision */1,\n              fmt\n            ];\n    }\n    else {\n      return /* Precision_fmt_EBB */[\n              /* No_precision */0,\n              fmt\n            ];\n    }\n  }\n  else {\n    return /* Precision_fmt_EBB */[\n            /* Lit_precision */[prec[0]],\n            fmt\n          ];\n  }\n}\n\nfunction make_padprec_fmt_ebb(pad, prec, fmt) {\n  var match = make_precision_fmt_ebb(prec, fmt);\n  var fmt$prime = match[1];\n  var prec$1 = match[0];\n  if (typeof pad === \"number\") {\n    return /* Padprec_fmt_EBB */[\n            /* No_padding */0,\n            prec$1,\n            fmt$prime\n          ];\n  }\n  else if (pad.tag) {\n    return /* Padprec_fmt_EBB */[\n            /* Arg_padding */Block.__(1, [pad[0]]),\n            prec$1,\n            fmt$prime\n          ];\n  }\n  else {\n    return /* Padprec_fmt_EBB */[\n            /* Lit_padding */Block.__(0, [\n                pad[0],\n                pad[1]\n              ]),\n            prec$1,\n            fmt$prime\n          ];\n  }\n}\n\nfunction fmt_ebb_of_string(legacy_behavior, str) {\n  var legacy_behavior$1 = legacy_behavior ? legacy_behavior[0] : /* true */1;\n  var invalid_format_message = function (str_ind, msg) {\n    return Curry._3(failwith_message(/* Format */[\n                    /* String_literal */Block.__(11, [\n                        \"invalid format \",\n                        /* Caml_string */Block.__(3, [\n                            /* No_padding */0,\n                            /* String_literal */Block.__(11, [\n                                \": at character number \",\n                                /* Int */Block.__(4, [\n                                    /* Int_d */0,\n                                    /* No_padding */0,\n                                    /* No_precision */0,\n                                    /* String_literal */Block.__(11, [\n                                        \", \",\n                                        /* String */Block.__(2, [\n                                            /* No_padding */0,\n                                            /* End_of_format */0\n                                          ])\n                                      ])\n                                  ])\n                              ])\n                          ])\n                      ]),\n                    \"invalid format %S: at character number %d, %s\"\n                  ]), str, str_ind, msg);\n  };\n  var invalid_format_without = function (str_ind, c, s) {\n    return Curry._4(failwith_message(/* Format */[\n                    /* String_literal */Block.__(11, [\n                        \"invalid format \",\n                        /* Caml_string */Block.__(3, [\n                            /* No_padding */0,\n                            /* String_literal */Block.__(11, [\n                                \": at character number \",\n                                /* Int */Block.__(4, [\n                                    /* Int_d */0,\n                                    /* No_padding */0,\n                                    /* No_precision */0,\n                                    /* String_literal */Block.__(11, [\n                                        \", '\",\n                                        /* Char */Block.__(0, [/* String_literal */Block.__(11, [\n                                                \"' without \",\n                                                /* String */Block.__(2, [\n                                                    /* No_padding */0,\n                                                    /* End_of_format */0\n                                                  ])\n                                              ])])\n                                      ])\n                                  ])\n                              ])\n                          ])\n                      ]),\n                    \"invalid format %S: at character number %d, '%c' without %s\"\n                  ]), str, str_ind, c, s);\n  };\n  var expected_character = function (str_ind, expected, read) {\n    return Curry._4(failwith_message(/* Format */[\n                    /* String_literal */Block.__(11, [\n                        \"invalid format \",\n                        /* Caml_string */Block.__(3, [\n                            /* No_padding */0,\n                            /* String_literal */Block.__(11, [\n                                \": at character number \",\n                                /* Int */Block.__(4, [\n                                    /* Int_d */0,\n                                    /* No_padding */0,\n                                    /* No_precision */0,\n                                    /* String_literal */Block.__(11, [\n                                        \", \",\n                                        /* String */Block.__(2, [\n                                            /* No_padding */0,\n                                            /* String_literal */Block.__(11, [\n                                                \" expected, read \",\n                                                /* Caml_char */Block.__(1, [/* End_of_format */0])\n                                              ])\n                                          ])\n                                      ])\n                                  ])\n                              ])\n                          ])\n                      ]),\n                    \"invalid format %S: at character number %d, %s expected, read %C\"\n                  ]), str, str_ind, expected, read);\n  };\n  var parse_literal = function (lit_start, _str_ind, end_ind) {\n    while(true) {\n      var str_ind = _str_ind;\n      if (str_ind === end_ind) {\n        return add_literal(lit_start, str_ind, /* End_of_format */0);\n      }\n      else {\n        var match = Caml_string.get(str, str_ind);\n        if (match !== 37) {\n          if (match !== 64) {\n            _str_ind = str_ind + 1 | 0;\n            continue ;\n            \n          }\n          else {\n            var match$1 = parse_after_at(str_ind + 1 | 0, end_ind);\n            return add_literal(lit_start, str_ind, match$1[0]);\n          }\n        }\n        else {\n          var match$2 = parse_format(str_ind, end_ind);\n          return add_literal(lit_start, str_ind, match$2[0]);\n        }\n      }\n    };\n  };\n  var parse_format = function (pct_ind, end_ind) {\n    var pct_ind$1 = pct_ind;\n    var str_ind = pct_ind + 1 | 0;\n    var end_ind$1 = end_ind;\n    if (str_ind === end_ind$1) {\n      invalid_format_message(end_ind$1, \"unexpected end of format\");\n    }\n    var match = Caml_string.get(str, str_ind);\n    if (match !== 95) {\n      return parse_flags(pct_ind$1, str_ind, end_ind$1, /* false */0);\n    }\n    else {\n      return parse_flags(pct_ind$1, str_ind + 1 | 0, end_ind$1, /* true */1);\n    }\n  };\n  var parse_flags = function (pct_ind, str_ind, end_ind, ign) {\n    var zero = [/* false */0];\n    var minus = [/* false */0];\n    var plus = [/* false */0];\n    var space = [/* false */0];\n    var sharp = [/* false */0];\n    var set_flag = function (str_ind, flag) {\n      if (flag[0] && !legacy_behavior$1) {\n        Curry._3(failwith_message(/* Format */[\n                  /* String_literal */Block.__(11, [\n                      \"invalid format \",\n                      /* Caml_string */Block.__(3, [\n                          /* No_padding */0,\n                          /* String_literal */Block.__(11, [\n                              \": at character number \",\n                              /* Int */Block.__(4, [\n                                  /* Int_d */0,\n                                  /* No_padding */0,\n                                  /* No_precision */0,\n                                  /* String_literal */Block.__(11, [\n                                      \", duplicate flag \",\n                                      /* Caml_char */Block.__(1, [/* End_of_format */0])\n                                    ])\n                                ])\n                            ])\n                        ])\n                    ]),\n                  \"invalid format %S: at character number %d, duplicate flag %C\"\n                ]), str, str_ind, Caml_string.get(str, str_ind));\n      }\n      flag[0] = /* true */1;\n      return /* () */0;\n    };\n    var _str_ind = str_ind;\n    while(true) {\n      var str_ind$1 = _str_ind;\n      if (str_ind$1 === end_ind) {\n        invalid_format_message(end_ind, \"unexpected end of format\");\n      }\n      var match = Caml_string.get(str, str_ind$1);\n      var exit = 0;\n      var switcher = match - 32 | 0;\n      if (switcher > 16 || switcher < 0) {\n        exit = 1;\n      }\n      else {\n        switch (switcher) {\n          case 0 : \n              set_flag(str_ind$1, space);\n              _str_ind = str_ind$1 + 1 | 0;\n              continue ;\n              case 3 : \n              set_flag(str_ind$1, sharp);\n              _str_ind = str_ind$1 + 1 | 0;\n              continue ;\n              case 11 : \n              set_flag(str_ind$1, plus);\n              _str_ind = str_ind$1 + 1 | 0;\n              continue ;\n              case 13 : \n              set_flag(str_ind$1, minus);\n              _str_ind = str_ind$1 + 1 | 0;\n              continue ;\n              case 1 : \n          case 2 : \n          case 4 : \n          case 5 : \n          case 6 : \n          case 7 : \n          case 8 : \n          case 9 : \n          case 10 : \n          case 12 : \n          case 14 : \n          case 15 : \n              exit = 1;\n              break;\n          case 16 : \n              set_flag(str_ind$1, zero);\n              _str_ind = str_ind$1 + 1 | 0;\n              continue ;\n              \n        }\n      }\n      if (exit === 1) {\n        var pct_ind$1 = pct_ind;\n        var str_ind$2 = str_ind$1;\n        var end_ind$1 = end_ind;\n        var zero$1 = zero[0];\n        var minus$1 = minus[0];\n        var plus$1 = plus[0];\n        var sharp$1 = sharp[0];\n        var space$1 = space[0];\n        var ign$1 = ign;\n        if (str_ind$2 === end_ind$1) {\n          invalid_format_message(end_ind$1, \"unexpected end of format\");\n        }\n        var padty = zero$1 !== 0 ? (\n            minus$1 !== 0 ? (\n                legacy_behavior$1 ? /* Left */0 : incompatible_flag(pct_ind$1, str_ind$2, /* \"-\" */45, \"0\")\n              ) : /* Zeros */2\n          ) : (\n            minus$1 !== 0 ? /* Left */0 : /* Right */1\n          );\n        var match$1 = Caml_string.get(str, str_ind$2);\n        var exit$1 = 0;\n        if (match$1 >= 48) {\n          if (match$1 >= 58) {\n            exit$1 = 1;\n          }\n          else {\n            var match$2 = parse_positive(str_ind$2, end_ind$1, 0);\n            return parse_after_padding(pct_ind$1, match$2[0], end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* Lit_padding */Block.__(0, [\n                          padty,\n                          match$2[1]\n                        ]));\n          }\n        }\n        else if (match$1 !== 42) {\n          exit$1 = 1;\n        }\n        else {\n          return parse_after_padding(pct_ind$1, str_ind$2 + 1 | 0, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* Arg_padding */Block.__(1, [padty]));\n        }\n        if (exit$1 === 1) {\n          switch (padty) {\n            case 0 : \n                if (!legacy_behavior$1) {\n                  invalid_format_without(str_ind$2 - 1 | 0, /* \"-\" */45, \"padding\");\n                }\n                return parse_after_padding(pct_ind$1, str_ind$2, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* No_padding */0);\n            case 1 : \n                return parse_after_padding(pct_ind$1, str_ind$2, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* No_padding */0);\n            case 2 : \n                return parse_after_padding(pct_ind$1, str_ind$2, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* Lit_padding */Block.__(0, [\n                              /* Right */1,\n                              0\n                            ]));\n            \n          }\n        }\n        \n      }\n      \n    };\n  };\n  var parse_after_padding = function (pct_ind, str_ind, end_ind, minus, plus, sharp, space, ign, pad) {\n    if (str_ind === end_ind) {\n      invalid_format_message(end_ind, \"unexpected end of format\");\n    }\n    var symb = Caml_string.get(str, str_ind);\n    if (symb !== 46) {\n      return parse_conversion(pct_ind, str_ind + 1 | 0, end_ind, plus, sharp, space, ign, pad, /* No_precision */0, pad, symb);\n    }\n    else {\n      var pct_ind$1 = pct_ind;\n      var str_ind$1 = str_ind + 1 | 0;\n      var end_ind$1 = end_ind;\n      var minus$1 = minus;\n      var plus$1 = plus;\n      var sharp$1 = sharp;\n      var space$1 = space;\n      var ign$1 = ign;\n      var pad$1 = pad;\n      if (str_ind$1 === end_ind$1) {\n        invalid_format_message(end_ind$1, \"unexpected end of format\");\n      }\n      var parse_literal = function (minus, str_ind) {\n        var match = parse_positive(str_ind, end_ind$1, 0);\n        return parse_after_precision(pct_ind$1, match[0], end_ind$1, minus, plus$1, sharp$1, space$1, ign$1, pad$1, /* Lit_precision */[match[1]]);\n      };\n      var symb$1 = Caml_string.get(str, str_ind$1);\n      var exit = 0;\n      var exit$1 = 0;\n      if (symb$1 >= 48) {\n        if (symb$1 >= 58) {\n          exit = 1;\n        }\n        else {\n          return parse_literal(minus$1, str_ind$1);\n        }\n      }\n      else if (symb$1 >= 42) {\n        switch (symb$1 - 42 | 0) {\n          case 0 : \n              return parse_after_precision(pct_ind$1, str_ind$1 + 1 | 0, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, pad$1, /* Arg_precision */1);\n          case 1 : \n          case 3 : \n              exit$1 = 2;\n              break;\n          case 2 : \n          case 4 : \n          case 5 : \n              exit = 1;\n              break;\n          \n        }\n      }\n      else {\n        exit = 1;\n      }\n      if (exit$1 === 2) {\n        if (legacy_behavior$1) {\n          return parse_literal(+(minus$1 || symb$1 === /* \"-\" */45), str_ind$1 + 1 | 0);\n        }\n        else {\n          exit = 1;\n        }\n      }\n      if (exit === 1) {\n        if (legacy_behavior$1) {\n          return parse_after_precision(pct_ind$1, str_ind$1, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, pad$1, /* Lit_precision */[0]);\n        }\n        else {\n          return invalid_format_without(str_ind$1 - 1 | 0, /* \".\" */46, \"precision\");\n        }\n      }\n      \n    }\n  };\n  var parse_after_precision = function (pct_ind, str_ind, end_ind, minus, plus, sharp, space, ign, pad, prec) {\n    if (str_ind === end_ind) {\n      invalid_format_message(end_ind, \"unexpected end of format\");\n    }\n    var parse_conv = function (padprec) {\n      return parse_conversion(pct_ind, str_ind + 1 | 0, end_ind, plus, sharp, space, ign, pad, prec, padprec, Caml_string.get(str, str_ind));\n    };\n    if (typeof pad === \"number\") {\n      var exit = 0;\n      if (typeof prec === \"number\") {\n        if (prec !== 0) {\n          exit = 1;\n        }\n        else {\n          return parse_conv(/* No_padding */0);\n        }\n      }\n      else {\n        exit = 1;\n      }\n      if (exit === 1) {\n        if (minus !== 0) {\n          if (typeof prec === \"number\") {\n            return parse_conv(/* Arg_padding */Block.__(1, [/* Left */0]));\n          }\n          else {\n            return parse_conv(/* Lit_padding */Block.__(0, [\n                          /* Left */0,\n                          prec[0]\n                        ]));\n          }\n        }\n        else if (typeof prec === \"number\") {\n          return parse_conv(/* Arg_padding */Block.__(1, [/* Right */1]));\n        }\n        else {\n          return parse_conv(/* Lit_padding */Block.__(0, [\n                        /* Right */1,\n                        prec[0]\n                      ]));\n        }\n      }\n      \n    }\n    else {\n      return parse_conv(pad);\n    }\n  };\n  var parse_conversion = function (pct_ind, str_ind, end_ind, plus, sharp, space, ign, pad, prec, padprec, symb) {\n    var plus_used = /* false */0;\n    var sharp_used = /* false */0;\n    var space_used = /* false */0;\n    var ign_used = [/* false */0];\n    var pad_used = /* false */0;\n    var prec_used = [/* false */0];\n    var check_no_0 = function (symb, pad) {\n      if (typeof pad === \"number\") {\n        return pad;\n      }\n      else if (pad.tag) {\n        if (pad[0] >= 2) {\n          if (legacy_behavior$1) {\n            return /* Arg_padding */Block.__(1, [/* Right */1]);\n          }\n          else {\n            return incompatible_flag(pct_ind, str_ind, symb, \"0\");\n          }\n        }\n        else {\n          return pad;\n        }\n      }\n      else if (pad[0] >= 2) {\n        if (legacy_behavior$1) {\n          return /* Lit_padding */Block.__(0, [\n                    /* Right */1,\n                    pad[1]\n                  ]);\n        }\n        else {\n          return incompatible_flag(pct_ind, str_ind, symb, \"0\");\n        }\n      }\n      else {\n        return pad;\n      }\n    };\n    var opt_of_pad = function (c, pad) {\n      if (typeof pad === \"number\") {\n        return /* None */0;\n      }\n      else if (pad.tag) {\n        return incompatible_flag(pct_ind, str_ind, c, \"'*'\");\n      }\n      else {\n        switch (pad[0]) {\n          case 0 : \n              if (legacy_behavior$1) {\n                return /* Some */[pad[1]];\n              }\n              else {\n                return incompatible_flag(pct_ind, str_ind, c, \"'-'\");\n              }\n          case 1 : \n              return /* Some */[pad[1]];\n          case 2 : \n              if (legacy_behavior$1) {\n                return /* Some */[pad[1]];\n              }\n              else {\n                return incompatible_flag(pct_ind, str_ind, c, \"'0'\");\n              }\n          \n        }\n      }\n    };\n    var get_prec_opt = function () {\n      prec_used[0] = /* true */1;\n      if (typeof prec === \"number\") {\n        if (prec !== 0) {\n          return incompatible_flag(pct_ind, str_ind, /* \"_\" */95, \"'*'\");\n        }\n        else {\n          return /* None */0;\n        }\n      }\n      else {\n        return /* Some */[prec[0]];\n      }\n    };\n    var fmt_result;\n    var exit = 0;\n    var exit$1 = 0;\n    var exit$2 = 0;\n    if (symb >= 124) {\n      exit$1 = 6;\n    }\n    else {\n      switch (symb) {\n        case 33 : \n            var match = parse_literal(str_ind, str_ind, end_ind);\n            fmt_result = /* Fmt_EBB */[/* Flush */Block.__(10, [match[0]])];\n            break;\n        case 40 : \n            var sub_end = search_subformat_end(str_ind, end_ind, /* \")\" */41);\n            var beg_ind = sub_end + 2 | 0;\n            var match$1 = parse_literal(beg_ind, beg_ind, end_ind);\n            var fmt_rest = match$1[0];\n            var match$2 = parse_literal(str_ind, str_ind, sub_end);\n            var sub_fmtty = fmtty_of_fmt(match$2[0]);\n            if (ign_used[0] = /* true */1, ign) {\n              pad_used = /* true */1;\n              var ignored_000 = opt_of_pad(/* \"_\" */95, pad);\n              var ignored = /* Ignored_format_subst */Block.__(8, [\n                  ignored_000,\n                  sub_fmtty\n                ]);\n              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    ignored,\n                    fmt_rest\n                  ])];\n            }\n            else {\n              pad_used = /* true */1;\n              fmt_result = /* Fmt_EBB */[/* Format_subst */Block.__(14, [\n                    opt_of_pad(/* \"(\" */40, pad),\n                    sub_fmtty,\n                    fmt_rest\n                  ])];\n            }\n            break;\n        case 44 : \n            fmt_result = parse_literal(str_ind, str_ind, end_ind);\n            break;\n        case 37 : \n        case 64 : \n            exit$1 = 4;\n            break;\n        case 67 : \n            var match$3 = parse_literal(str_ind, str_ind, end_ind);\n            var fmt_rest$1 = match$3[0];\n            fmt_result = (ign_used[0] = /* true */1, ign) ? /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    /* Ignored_caml_char */1,\n                    fmt_rest$1\n                  ])] : /* Fmt_EBB */[/* Caml_char */Block.__(1, [fmt_rest$1])];\n            break;\n        case 78 : \n            var match$4 = parse_literal(str_ind, str_ind, end_ind);\n            var fmt_rest$2 = match$4[0];\n            if (ign_used[0] = /* true */1, ign) {\n              var ignored$1 = /* Ignored_scan_get_counter */Block.__(10, [/* Token_counter */2]);\n              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    ignored$1,\n                    fmt_rest$2\n                  ])];\n            }\n            else {\n              fmt_result = /* Fmt_EBB */[/* Scan_get_counter */Block.__(21, [\n                    /* Token_counter */2,\n                    fmt_rest$2\n                  ])];\n            }\n            break;\n        case 83 : \n            pad_used = /* true */1;\n            var pad$1 = check_no_0(symb, padprec);\n            var match$5 = parse_literal(str_ind, str_ind, end_ind);\n            var fmt_rest$3 = match$5[0];\n            if (ign_used[0] = /* true */1, ign) {\n              pad_used = /* true */1;\n              var ignored$2 = /* Ignored_caml_string */Block.__(1, [opt_of_pad(/* \"_\" */95, padprec)]);\n              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    ignored$2,\n                    fmt_rest$3\n                  ])];\n            }\n            else {\n              var match$6 = make_padding_fmt_ebb(pad$1, fmt_rest$3);\n              fmt_result = /* Fmt_EBB */[/* Caml_string */Block.__(3, [\n                    match$6[0],\n                    match$6[1]\n                  ])];\n            }\n            break;\n        case 91 : \n            var match$7 = parse_char_set(str_ind, end_ind);\n            var char_set = match$7[1];\n            var next_ind = match$7[0];\n            var match$8 = parse_literal(next_ind, next_ind, end_ind);\n            var fmt_rest$4 = match$8[0];\n            if (ign_used[0] = /* true */1, ign) {\n              pad_used = /* true */1;\n              var ignored_000$1 = opt_of_pad(/* \"_\" */95, pad);\n              var ignored$3 = /* Ignored_scan_char_set */Block.__(9, [\n                  ignored_000$1,\n                  char_set\n                ]);\n              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    ignored$3,\n                    fmt_rest$4\n                  ])];\n            }\n            else {\n              pad_used = /* true */1;\n              fmt_result = /* Fmt_EBB */[/* Scan_char_set */Block.__(20, [\n                    opt_of_pad(/* \"[\" */91, pad),\n                    char_set,\n                    fmt_rest$4\n                  ])];\n            }\n            break;\n        case 32 : \n        case 35 : \n        case 43 : \n        case 45 : \n        case 95 : \n            exit$1 = 5;\n            break;\n        case 97 : \n            var match$9 = parse_literal(str_ind, str_ind, end_ind);\n            fmt_result = /* Fmt_EBB */[/* Alpha */Block.__(15, [match$9[0]])];\n            break;\n        case 66 : \n        case 98 : \n            exit$1 = 3;\n            break;\n        case 99 : \n            var char_format = function (fmt_rest) {\n              if (ign_used[0] = /* true */1, ign) {\n                return /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                            /* Ignored_char */0,\n                            fmt_rest\n                          ])];\n              }\n              else {\n                return /* Fmt_EBB */[/* Char */Block.__(0, [fmt_rest])];\n              }\n            };\n            var scan_format = function (fmt_rest) {\n              if (ign_used[0] = /* true */1, ign) {\n                return /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                            /* Ignored_scan_next_char */4,\n                            fmt_rest\n                          ])];\n              }\n              else {\n                return /* Fmt_EBB */[/* Scan_next_char */Block.__(22, [fmt_rest])];\n              }\n            };\n            var match$10 = parse_literal(str_ind, str_ind, end_ind);\n            var fmt_rest$5 = match$10[0];\n            pad_used = /* true */1;\n            var match$11 = opt_of_pad(/* \"c\" */99, pad);\n            fmt_result = match$11 ? (\n                match$11[0] !== 0 ? (\n                    legacy_behavior$1 ? char_format(fmt_rest$5) : invalid_format_message(str_ind, \"non-zero widths are unsupported for %c conversions\")\n                  ) : scan_format(fmt_rest$5)\n              ) : char_format(fmt_rest$5);\n            break;\n        case 69 : \n        case 70 : \n        case 71 : \n        case 101 : \n        case 102 : \n        case 103 : \n            exit$1 = 2;\n            break;\n        case 76 : \n        case 108 : \n        case 110 : \n            exit$2 = 8;\n            break;\n        case 114 : \n            var match$12 = parse_literal(str_ind, str_ind, end_ind);\n            var fmt_rest$6 = match$12[0];\n            fmt_result = (ign_used[0] = /* true */1, ign) ? /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    /* Ignored_reader */3,\n                    fmt_rest$6\n                  ])] : /* Fmt_EBB */[/* Reader */Block.__(19, [fmt_rest$6])];\n            break;\n        case 115 : \n            pad_used = /* true */1;\n            var pad$2 = check_no_0(symb, padprec);\n            var match$13 = parse_literal(str_ind, str_ind, end_ind);\n            var fmt_rest$7 = match$13[0];\n            if (ign_used[0] = /* true */1, ign) {\n              pad_used = /* true */1;\n              var ignored$4 = /* Ignored_string */Block.__(0, [opt_of_pad(/* \"_\" */95, padprec)]);\n              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    ignored$4,\n                    fmt_rest$7\n                  ])];\n            }\n            else {\n              var match$14 = make_padding_fmt_ebb(pad$2, fmt_rest$7);\n              fmt_result = /* Fmt_EBB */[/* String */Block.__(2, [\n                    match$14[0],\n                    match$14[1]\n                  ])];\n            }\n            break;\n        case 116 : \n            var match$15 = parse_literal(str_ind, str_ind, end_ind);\n            fmt_result = /* Fmt_EBB */[/* Theta */Block.__(16, [match$15[0]])];\n            break;\n        case 88 : \n        case 100 : \n        case 105 : \n        case 111 : \n        case 117 : \n        case 120 : \n            exit$2 = 7;\n            break;\n        case 0 : \n        case 1 : \n        case 2 : \n        case 3 : \n        case 4 : \n        case 5 : \n        case 6 : \n        case 7 : \n        case 8 : \n        case 9 : \n        case 10 : \n        case 11 : \n        case 12 : \n        case 13 : \n        case 14 : \n        case 15 : \n        case 16 : \n        case 17 : \n        case 18 : \n        case 19 : \n        case 20 : \n        case 21 : \n        case 22 : \n        case 23 : \n        case 24 : \n        case 25 : \n        case 26 : \n        case 27 : \n        case 28 : \n        case 29 : \n        case 30 : \n        case 31 : \n        case 34 : \n        case 36 : \n        case 38 : \n        case 39 : \n        case 41 : \n        case 42 : \n        case 46 : \n        case 47 : \n        case 48 : \n        case 49 : \n        case 50 : \n        case 51 : \n        case 52 : \n        case 53 : \n        case 54 : \n        case 55 : \n        case 56 : \n        case 57 : \n        case 58 : \n        case 59 : \n        case 60 : \n        case 61 : \n        case 62 : \n        case 63 : \n        case 65 : \n        case 68 : \n        case 72 : \n        case 73 : \n        case 74 : \n        case 75 : \n        case 77 : \n        case 79 : \n        case 80 : \n        case 81 : \n        case 82 : \n        case 84 : \n        case 85 : \n        case 86 : \n        case 87 : \n        case 89 : \n        case 90 : \n        case 92 : \n        case 93 : \n        case 94 : \n        case 96 : \n        case 104 : \n        case 106 : \n        case 107 : \n        case 109 : \n        case 112 : \n        case 113 : \n        case 118 : \n        case 119 : \n        case 121 : \n        case 122 : \n            exit$1 = 6;\n            break;\n        case 123 : \n            var sub_end$1 = search_subformat_end(str_ind, end_ind, /* \"}\" */125);\n            var match$16 = parse_literal(str_ind, str_ind, sub_end$1);\n            var beg_ind$1 = sub_end$1 + 2 | 0;\n            var match$17 = parse_literal(beg_ind$1, beg_ind$1, end_ind);\n            var fmt_rest$8 = match$17[0];\n            var sub_fmtty$1 = fmtty_of_fmt(match$16[0]);\n            if (ign_used[0] = /* true */1, ign) {\n              pad_used = /* true */1;\n              var ignored_000$2 = opt_of_pad(/* \"_\" */95, pad);\n              var ignored$5 = /* Ignored_format_arg */Block.__(7, [\n                  ignored_000$2,\n                  sub_fmtty$1\n                ]);\n              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    ignored$5,\n                    fmt_rest$8\n                  ])];\n            }\n            else {\n              pad_used = /* true */1;\n              fmt_result = /* Fmt_EBB */[/* Format_arg */Block.__(13, [\n                    opt_of_pad(/* \"{\" */123, pad),\n                    sub_fmtty$1,\n                    fmt_rest$8\n                  ])];\n            }\n            break;\n        \n      }\n    }\n    switch (exit$2) {\n      case 7 : \n          plus_used = /* true */1;\n          sharp_used = /* true */1;\n          space_used = /* true */1;\n          var iconv = compute_int_conv(pct_ind, str_ind, plus, sharp, space, symb);\n          var match$18 = parse_literal(str_ind, str_ind, end_ind);\n          var fmt_rest$9 = match$18[0];\n          if (ign_used[0] = /* true */1, ign) {\n            pad_used = /* true */1;\n            var ignored_001 = opt_of_pad(/* \"_\" */95, pad);\n            var ignored$6 = /* Ignored_int */Block.__(2, [\n                iconv,\n                ignored_001\n              ]);\n            fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                  ignored$6,\n                  fmt_rest$9\n                ])];\n          }\n          else {\n            pad_used = /* true */1;\n            prec_used[0] = /* true */1;\n            var pad$3;\n            var exit$3 = 0;\n            if (typeof prec === \"number\" && prec === 0) {\n              pad$3 = pad;\n            }\n            else {\n              exit$3 = 9;\n            }\n            if (exit$3 === 9) {\n              pad$3 = typeof pad === \"number\" ? /* No_padding */0 : (\n                  pad.tag ? (\n                      pad[0] >= 2 ? (\n                          legacy_behavior$1 ? /* Arg_padding */Block.__(1, [/* Right */1]) : incompatible_flag(pct_ind, str_ind, /* \"0\" */48, \"precision\")\n                        ) : pad\n                    ) : (\n                      pad[0] >= 2 ? (\n                          legacy_behavior$1 ? /* Lit_padding */Block.__(0, [\n                                /* Right */1,\n                                pad[1]\n                              ]) : incompatible_flag(pct_ind, str_ind, /* \"0\" */48, \"precision\")\n                        ) : pad\n                    )\n                );\n            }\n            var match$19 = make_padprec_fmt_ebb(pad$3, (prec_used[0] = /* true */1, prec), fmt_rest$9);\n            fmt_result = /* Fmt_EBB */[/* Int */Block.__(4, [\n                  iconv,\n                  match$19[0],\n                  match$19[1],\n                  match$19[2]\n                ])];\n          }\n          break;\n      case 8 : \n          if (str_ind === end_ind || !is_int_base(Caml_string.get(str, str_ind))) {\n            var match$20 = parse_literal(str_ind, str_ind, end_ind);\n            var fmt_rest$10 = match$20[0];\n            var counter = counter_of_char(symb);\n            if (ign_used[0] = /* true */1, ign) {\n              var ignored$7 = /* Ignored_scan_get_counter */Block.__(10, [counter]);\n              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    ignored$7,\n                    fmt_rest$10\n                  ])];\n            }\n            else {\n              fmt_result = /* Fmt_EBB */[/* Scan_get_counter */Block.__(21, [\n                    counter,\n                    fmt_rest$10\n                  ])];\n            }\n          }\n          else {\n            exit$1 = 6;\n          }\n          break;\n      \n    }\n    switch (exit$1) {\n      case 2 : \n          plus_used = /* true */1;\n          space_used = /* true */1;\n          var fconv = compute_float_conv(pct_ind, str_ind, plus, space, symb);\n          var match$21 = parse_literal(str_ind, str_ind, end_ind);\n          var fmt_rest$11 = match$21[0];\n          if (ign_used[0] = /* true */1, ign) {\n            pad_used = /* true */1;\n            var ignored_000$3 = opt_of_pad(/* \"_\" */95, pad);\n            var ignored_001$1 = get_prec_opt(/* () */0);\n            var ignored$8 = /* Ignored_float */Block.__(6, [\n                ignored_000$3,\n                ignored_001$1\n              ]);\n            fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                  ignored$8,\n                  fmt_rest$11\n                ])];\n          }\n          else {\n            pad_used = /* true */1;\n            var match$22 = make_padprec_fmt_ebb(pad, (prec_used[0] = /* true */1, prec), fmt_rest$11);\n            fmt_result = /* Fmt_EBB */[/* Float */Block.__(8, [\n                  fconv,\n                  match$22[0],\n                  match$22[1],\n                  match$22[2]\n                ])];\n          }\n          break;\n      case 3 : \n          var match$23 = parse_literal(str_ind, str_ind, end_ind);\n          var fmt_rest$12 = match$23[0];\n          fmt_result = (ign_used[0] = /* true */1, ign) ? /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                  /* Ignored_bool */2,\n                  fmt_rest$12\n                ])] : /* Fmt_EBB */[/* Bool */Block.__(9, [fmt_rest$12])];\n          break;\n      case 4 : \n          var match$24 = parse_literal(str_ind, str_ind, end_ind);\n          fmt_result = /* Fmt_EBB */[/* Char_literal */Block.__(12, [\n                symb,\n                match$24[0]\n              ])];\n          break;\n      case 5 : \n          fmt_result = Curry._3(failwith_message(/* Format */[\n                    /* String_literal */Block.__(11, [\n                        \"invalid format \",\n                        /* Caml_string */Block.__(3, [\n                            /* No_padding */0,\n                            /* String_literal */Block.__(11, [\n                                \": at character number \",\n                                /* Int */Block.__(4, [\n                                    /* Int_d */0,\n                                    /* No_padding */0,\n                                    /* No_precision */0,\n                                    /* String_literal */Block.__(11, [\n                                        \", flag \",\n                                        /* Caml_char */Block.__(1, [/* String_literal */Block.__(11, [\n                                                \" is only allowed after the '\",\n                                                /* Char_literal */Block.__(12, [\n                                                    /* \"%\" */37,\n                                                    /* String_literal */Block.__(11, [\n                                                        \"', before padding and precision\",\n                                                        /* End_of_format */0\n                                                      ])\n                                                  ])\n                                              ])])\n                                      ])\n                                  ])\n                              ])\n                          ])\n                      ]),\n                    \"invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision\"\n                  ]), str, pct_ind, symb);\n          break;\n      case 6 : \n          if (symb >= 108) {\n            if (symb >= 111) {\n              exit = 1;\n            }\n            else {\n              switch (symb - 108 | 0) {\n                case 0 : \n                    plus_used = /* true */1;\n                    sharp_used = /* true */1;\n                    space_used = /* true */1;\n                    var iconv$1 = compute_int_conv(pct_ind, str_ind + 1 | 0, plus, sharp, space, Caml_string.get(str, str_ind));\n                    var beg_ind$2 = str_ind + 1 | 0;\n                    var match$25 = parse_literal(beg_ind$2, beg_ind$2, end_ind);\n                    var fmt_rest$13 = match$25[0];\n                    if (ign_used[0] = /* true */1, ign) {\n                      pad_used = /* true */1;\n                      var ignored_001$2 = opt_of_pad(/* \"_\" */95, pad);\n                      var ignored$9 = /* Ignored_int32 */Block.__(3, [\n                          iconv$1,\n                          ignored_001$2\n                        ]);\n                      fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                            ignored$9,\n                            fmt_rest$13\n                          ])];\n                    }\n                    else {\n                      pad_used = /* true */1;\n                      var match$26 = make_padprec_fmt_ebb(pad, (prec_used[0] = /* true */1, prec), fmt_rest$13);\n                      fmt_result = /* Fmt_EBB */[/* Int32 */Block.__(5, [\n                            iconv$1,\n                            match$26[0],\n                            match$26[1],\n                            match$26[2]\n                          ])];\n                    }\n                    break;\n                case 1 : \n                    exit = 1;\n                    break;\n                case 2 : \n                    plus_used = /* true */1;\n                    sharp_used = /* true */1;\n                    space_used = /* true */1;\n                    var iconv$2 = compute_int_conv(pct_ind, str_ind + 1 | 0, plus, sharp, space, Caml_string.get(str, str_ind));\n                    var beg_ind$3 = str_ind + 1 | 0;\n                    var match$27 = parse_literal(beg_ind$3, beg_ind$3, end_ind);\n                    var fmt_rest$14 = match$27[0];\n                    if (ign_used[0] = /* true */1, ign) {\n                      pad_used = /* true */1;\n                      var ignored_001$3 = opt_of_pad(/* \"_\" */95, pad);\n                      var ignored$10 = /* Ignored_nativeint */Block.__(4, [\n                          iconv$2,\n                          ignored_001$3\n                        ]);\n                      fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                            ignored$10,\n                            fmt_rest$14\n                          ])];\n                    }\n                    else {\n                      pad_used = /* true */1;\n                      var match$28 = make_padprec_fmt_ebb(pad, (prec_used[0] = /* true */1, prec), fmt_rest$14);\n                      fmt_result = /* Fmt_EBB */[/* Nativeint */Block.__(6, [\n                            iconv$2,\n                            match$28[0],\n                            match$28[1],\n                            match$28[2]\n                          ])];\n                    }\n                    break;\n                \n              }\n            }\n          }\n          else if (symb !== 76) {\n            exit = 1;\n          }\n          else {\n            plus_used = /* true */1;\n            sharp_used = /* true */1;\n            space_used = /* true */1;\n            var iconv$3 = compute_int_conv(pct_ind, str_ind + 1 | 0, plus, sharp, space, Caml_string.get(str, str_ind));\n            var beg_ind$4 = str_ind + 1 | 0;\n            var match$29 = parse_literal(beg_ind$4, beg_ind$4, end_ind);\n            var fmt_rest$15 = match$29[0];\n            if (ign_used[0] = /* true */1, ign) {\n              pad_used = /* true */1;\n              var ignored_001$4 = opt_of_pad(/* \"_\" */95, pad);\n              var ignored$11 = /* Ignored_int64 */Block.__(5, [\n                  iconv$3,\n                  ignored_001$4\n                ]);\n              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    ignored$11,\n                    fmt_rest$15\n                  ])];\n            }\n            else {\n              pad_used = /* true */1;\n              var match$30 = make_padprec_fmt_ebb(pad, (prec_used[0] = /* true */1, prec), fmt_rest$15);\n              fmt_result = /* Fmt_EBB */[/* Int64 */Block.__(7, [\n                    iconv$3,\n                    match$30[0],\n                    match$30[1],\n                    match$30[2]\n                  ])];\n            }\n          }\n          break;\n      \n    }\n    if (exit === 1) {\n      fmt_result = Curry._3(failwith_message(/* Format */[\n                /* String_literal */Block.__(11, [\n                    \"invalid format \",\n                    /* Caml_string */Block.__(3, [\n                        /* No_padding */0,\n                        /* String_literal */Block.__(11, [\n                            \": at character number \",\n                            /* Int */Block.__(4, [\n                                /* Int_d */0,\n                                /* No_padding */0,\n                                /* No_precision */0,\n                                /* String_literal */Block.__(11, [\n                                    ', invalid conversion \"',\n                                    /* Char_literal */Block.__(12, [\n                                        /* \"%\" */37,\n                                        /* Char */Block.__(0, [/* Char_literal */Block.__(12, [\n                                                /* \"\\\"\" */34,\n                                                /* End_of_format */0\n                                              ])])\n                                      ])\n                                  ])\n                              ])\n                          ])\n                      ])\n                  ]),\n                'invalid format %S: at character number %d, invalid conversion \"%%%c\"'\n              ]), str, str_ind - 1 | 0, symb);\n    }\n    if (!legacy_behavior$1) {\n      if (!plus_used && plus) {\n        incompatible_flag(pct_ind, str_ind, symb, \"'+'\");\n      }\n      if (!sharp_used && sharp) {\n        incompatible_flag(pct_ind, str_ind, symb, \"'#'\");\n      }\n      if (!space_used && space) {\n        incompatible_flag(pct_ind, str_ind, symb, \"' '\");\n      }\n      if (!pad_used && Caml_obj.caml_notequal(/* Padding_EBB */[pad], /* Padding_EBB */[/* No_padding */0])) {\n        incompatible_flag(pct_ind, str_ind, symb, \"`padding'\");\n      }\n      if (!prec_used[0] && Caml_obj.caml_notequal(/* Precision_EBB */[prec], /* Precision_EBB */[/* No_precision */0])) {\n        incompatible_flag(pct_ind, str_ind, ign ? /* \"_\" */95 : symb, \"`precision'\");\n      }\n      if (ign && plus) {\n        incompatible_flag(pct_ind, str_ind, /* \"_\" */95, \"'+'\");\n      }\n      \n    }\n    if (!ign_used[0] && ign) {\n      var exit$4 = 0;\n      if (symb >= 38) {\n        if (symb !== 44) {\n          if (symb !== 64) {\n            exit$4 = 1;\n          }\n          else if (!legacy_behavior$1) {\n            exit$4 = 1;\n          }\n          \n        }\n        else if (!legacy_behavior$1) {\n          exit$4 = 1;\n        }\n        \n      }\n      else if (symb !== 33) {\n        if (symb >= 37) {\n          if (!legacy_behavior$1) {\n            exit$4 = 1;\n          }\n          \n        }\n        else {\n          exit$4 = 1;\n        }\n      }\n      else if (!legacy_behavior$1) {\n        exit$4 = 1;\n      }\n      if (exit$4 === 1) {\n        incompatible_flag(pct_ind, str_ind, symb, \"'_'\");\n      }\n      \n    }\n    return fmt_result;\n  };\n  var parse_after_at = function (str_ind, end_ind) {\n    if (str_ind === end_ind) {\n      return /* Fmt_EBB */[/* Char_literal */Block.__(12, [\n                  /* \"@\" */64,\n                  /* End_of_format */0\n                ])];\n    }\n    else {\n      var c = Caml_string.get(str, str_ind);\n      var exit = 0;\n      if (c >= 65) {\n        if (c >= 94) {\n          var switcher = c - 123 | 0;\n          if (switcher > 2 || switcher < 0) {\n            exit = 1;\n          }\n          else {\n            switch (switcher) {\n              case 0 : \n                  return parse_tag(/* true */1, str_ind + 1 | 0, end_ind);\n              case 1 : \n                  exit = 1;\n                  break;\n              case 2 : \n                  var beg_ind = str_ind + 1 | 0;\n                  var match = parse_literal(beg_ind, beg_ind, end_ind);\n                  return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                              /* Close_tag */1,\n                              match[0]\n                            ])];\n              \n            }\n          }\n        }\n        else if (c >= 91) {\n          switch (c - 91 | 0) {\n            case 0 : \n                return parse_tag(/* false */0, str_ind + 1 | 0, end_ind);\n            case 1 : \n                exit = 1;\n                break;\n            case 2 : \n                var beg_ind$1 = str_ind + 1 | 0;\n                var match$1 = parse_literal(beg_ind$1, beg_ind$1, end_ind);\n                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                            /* Close_box */0,\n                            match$1[0]\n                          ])];\n            \n          }\n        }\n        else {\n          exit = 1;\n        }\n      }\n      else if (c !== 10) {\n        if (c >= 32) {\n          switch (c - 32 | 0) {\n            case 0 : \n                var beg_ind$2 = str_ind + 1 | 0;\n                var match$2 = parse_literal(beg_ind$2, beg_ind$2, end_ind);\n                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                            /* Break */Block.__(0, [\n                                \"@ \",\n                                1,\n                                0\n                              ]),\n                            match$2[0]\n                          ])];\n            case 5 : \n                if ((str_ind + 1 | 0) < end_ind && Caml_string.get(str, str_ind + 1 | 0) === /* \"%\" */37) {\n                  var beg_ind$3 = str_ind + 2 | 0;\n                  var match$3 = parse_literal(beg_ind$3, beg_ind$3, end_ind);\n                  return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                              /* Escaped_percent */6,\n                              match$3[0]\n                            ])];\n                }\n                else {\n                  var match$4 = parse_literal(str_ind, str_ind, end_ind);\n                  return /* Fmt_EBB */[/* Char_literal */Block.__(12, [\n                              /* \"@\" */64,\n                              match$4[0]\n                            ])];\n                }\n                break;\n            case 12 : \n                var beg_ind$4 = str_ind + 1 | 0;\n                var match$5 = parse_literal(beg_ind$4, beg_ind$4, end_ind);\n                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                            /* Break */Block.__(0, [\n                                \"@,\",\n                                0,\n                                0\n                              ]),\n                            match$5[0]\n                          ])];\n            case 14 : \n                var beg_ind$5 = str_ind + 1 | 0;\n                var match$6 = parse_literal(beg_ind$5, beg_ind$5, end_ind);\n                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                            /* Flush_newline */4,\n                            match$6[0]\n                          ])];\n            case 27 : \n                var str_ind$1 = str_ind + 1 | 0;\n                var end_ind$1 = end_ind;\n                var match$7;\n                try {\n                  if (str_ind$1 === end_ind$1 || Caml_string.get(str, str_ind$1) !== /* \"<\" */60) {\n                    throw Caml_builtin_exceptions.not_found;\n                  }\n                  var str_ind_1 = parse_spaces(str_ind$1 + 1 | 0, end_ind$1);\n                  var match$8 = Caml_string.get(str, str_ind_1);\n                  var exit$1 = 0;\n                  if (match$8 >= 48) {\n                    if (match$8 >= 58) {\n                      throw Caml_builtin_exceptions.not_found;\n                    }\n                    else {\n                      exit$1 = 1;\n                    }\n                  }\n                  else if (match$8 !== 45) {\n                    throw Caml_builtin_exceptions.not_found;\n                  }\n                  else {\n                    exit$1 = 1;\n                  }\n                  if (exit$1 === 1) {\n                    var match$9 = parse_integer(str_ind_1, end_ind$1);\n                    var width = match$9[1];\n                    var str_ind_3 = parse_spaces(match$9[0], end_ind$1);\n                    var match$10 = Caml_string.get(str, str_ind_3);\n                    var switcher$1 = match$10 - 45 | 0;\n                    if (switcher$1 > 12 || switcher$1 < 0) {\n                      if (switcher$1 !== 17) {\n                        throw Caml_builtin_exceptions.not_found;\n                      }\n                      else {\n                        var s = $$String.sub(str, str_ind$1 - 2 | 0, (str_ind_3 - str_ind$1 | 0) + 3 | 0);\n                        match$7 = /* tuple */[\n                          str_ind_3 + 1 | 0,\n                          /* Break */Block.__(0, [\n                              s,\n                              width,\n                              0\n                            ])\n                        ];\n                      }\n                    }\n                    else if (switcher$1 === 2 || switcher$1 === 1) {\n                      throw Caml_builtin_exceptions.not_found;\n                    }\n                    else {\n                      var match$11 = parse_integer(str_ind_3, end_ind$1);\n                      var str_ind_5 = parse_spaces(match$11[0], end_ind$1);\n                      if (Caml_string.get(str, str_ind_5) !== /* \">\" */62) {\n                        throw Caml_builtin_exceptions.not_found;\n                      }\n                      var s$1 = $$String.sub(str, str_ind$1 - 2 | 0, (str_ind_5 - str_ind$1 | 0) + 3 | 0);\n                      match$7 = /* tuple */[\n                        str_ind_5 + 1 | 0,\n                        /* Break */Block.__(0, [\n                            s$1,\n                            width,\n                            match$11[1]\n                          ])\n                      ];\n                    }\n                  }\n                  \n                }\n                catch (exn){\n                  if (exn === Caml_builtin_exceptions.not_found) {\n                    match$7 = /* tuple */[\n                      str_ind$1,\n                      /* Break */Block.__(0, [\n                          \"@;\",\n                          1,\n                          0\n                        ])\n                    ];\n                  }\n                  else if (exn[0] === Caml_builtin_exceptions.failure) {\n                    match$7 = /* tuple */[\n                      str_ind$1,\n                      /* Break */Block.__(0, [\n                          \"@;\",\n                          1,\n                          0\n                        ])\n                    ];\n                  }\n                  else {\n                    throw exn;\n                  }\n                }\n                var next_ind = match$7[0];\n                var match$12 = parse_literal(next_ind, next_ind, end_ind$1);\n                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                            match$7[1],\n                            match$12[0]\n                          ])];\n            case 28 : \n                var str_ind$2 = str_ind + 1 | 0;\n                var end_ind$2 = end_ind;\n                var match$13;\n                try {\n                  var str_ind_1$1 = parse_spaces(str_ind$2, end_ind$2);\n                  var match$14 = Caml_string.get(str, str_ind_1$1);\n                  var exit$2 = 0;\n                  if (match$14 >= 48) {\n                    if (match$14 >= 58) {\n                      match$13 = /* None */0;\n                    }\n                    else {\n                      exit$2 = 1;\n                    }\n                  }\n                  else if (match$14 !== 45) {\n                    match$13 = /* None */0;\n                  }\n                  else {\n                    exit$2 = 1;\n                  }\n                  if (exit$2 === 1) {\n                    var match$15 = parse_integer(str_ind_1$1, end_ind$2);\n                    var str_ind_3$1 = parse_spaces(match$15[0], end_ind$2);\n                    if (Caml_string.get(str, str_ind_3$1) !== /* \">\" */62) {\n                      throw Caml_builtin_exceptions.not_found;\n                    }\n                    var s$2 = $$String.sub(str, str_ind$2 - 2 | 0, (str_ind_3$1 - str_ind$2 | 0) + 3 | 0);\n                    match$13 = /* Some */[/* tuple */[\n                        str_ind_3$1 + 1 | 0,\n                        /* Magic_size */Block.__(1, [\n                            s$2,\n                            match$15[1]\n                          ])\n                      ]];\n                  }\n                  \n                }\n                catch (exn$1){\n                  if (exn$1 === Caml_builtin_exceptions.not_found) {\n                    match$13 = /* None */0;\n                  }\n                  else if (exn$1[0] === Caml_builtin_exceptions.failure) {\n                    match$13 = /* None */0;\n                  }\n                  else {\n                    throw exn$1;\n                  }\n                }\n                if (match$13) {\n                  var match$16 = match$13[0];\n                  var next_ind$1 = match$16[0];\n                  var match$17 = parse_literal(next_ind$1, next_ind$1, end_ind$2);\n                  return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                              match$16[1],\n                              match$17[0]\n                            ])];\n                }\n                else {\n                  var match$18 = parse_literal(str_ind$2, str_ind$2, end_ind$2);\n                  return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                              /* Scan_indic */Block.__(2, [/* \"<\" */60]),\n                              match$18[0]\n                            ])];\n                }\n            case 1 : \n            case 2 : \n            case 3 : \n            case 4 : \n            case 6 : \n            case 7 : \n            case 8 : \n            case 9 : \n            case 10 : \n            case 11 : \n            case 13 : \n            case 15 : \n            case 16 : \n            case 17 : \n            case 18 : \n            case 19 : \n            case 20 : \n            case 21 : \n            case 22 : \n            case 23 : \n            case 24 : \n            case 25 : \n            case 26 : \n            case 29 : \n            case 30 : \n                exit = 1;\n                break;\n            case 31 : \n                var beg_ind$6 = str_ind + 1 | 0;\n                var match$19 = parse_literal(beg_ind$6, beg_ind$6, end_ind);\n                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                            /* FFlush */2,\n                            match$19[0]\n                          ])];\n            case 32 : \n                var beg_ind$7 = str_ind + 1 | 0;\n                var match$20 = parse_literal(beg_ind$7, beg_ind$7, end_ind);\n                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                            /* Escaped_at */5,\n                            match$20[0]\n                          ])];\n            \n          }\n        }\n        else {\n          exit = 1;\n        }\n      }\n      else {\n        var beg_ind$8 = str_ind + 1 | 0;\n        var match$21 = parse_literal(beg_ind$8, beg_ind$8, end_ind);\n        return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                    /* Force_newline */3,\n                    match$21[0]\n                  ])];\n      }\n      if (exit === 1) {\n        var beg_ind$9 = str_ind + 1 | 0;\n        var match$22 = parse_literal(beg_ind$9, beg_ind$9, end_ind);\n        return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                    /* Scan_indic */Block.__(2, [c]),\n                    match$22[0]\n                  ])];\n      }\n      \n    }\n  };\n  var check_open_box = function (fmt) {\n    if (typeof fmt === \"number\") {\n      return /* () */0;\n    }\n    else if (fmt.tag === 11) {\n      if (typeof fmt[1] === \"number\") {\n        try {\n          open_box_of_string(fmt[0]);\n          return /* () */0;\n        }\n        catch (exn){\n          if (exn[0] === Caml_builtin_exceptions.failure) {\n            return /* () */0;\n          }\n          else {\n            throw exn;\n          }\n        }\n      }\n      else {\n        return /* () */0;\n      }\n    }\n    else {\n      return /* () */0;\n    }\n  };\n  var parse_tag = function (is_open_tag, str_ind, end_ind) {\n    try {\n      if (str_ind === end_ind) {\n        throw Caml_builtin_exceptions.not_found;\n      }\n      var match = Caml_string.get(str, str_ind);\n      if (match !== 60) {\n        throw Caml_builtin_exceptions.not_found;\n      }\n      else {\n        var ind = $$String.index_from(str, str_ind + 1 | 0, /* \">\" */62);\n        if (ind >= end_ind) {\n          throw Caml_builtin_exceptions.not_found;\n        }\n        var sub_str = $$String.sub(str, str_ind, (ind - str_ind | 0) + 1 | 0);\n        var beg_ind = ind + 1 | 0;\n        var match$1 = parse_literal(beg_ind, beg_ind, end_ind);\n        var match$2 = parse_literal(str_ind, str_ind, ind + 1 | 0);\n        var sub_fmt = match$2[0];\n        var sub_format = /* Format */[\n          sub_fmt,\n          sub_str\n        ];\n        var formatting = is_open_tag ? /* Open_tag */Block.__(0, [sub_format]) : (check_open_box(sub_fmt), /* Open_box */Block.__(1, [sub_format]));\n        return /* Fmt_EBB */[/* Formatting_gen */Block.__(18, [\n                    formatting,\n                    match$1[0]\n                  ])];\n      }\n    }\n    catch (exn){\n      if (exn === Caml_builtin_exceptions.not_found) {\n        var match$3 = parse_literal(str_ind, str_ind, end_ind);\n        var sub_format$1 = /* Format */[\n          /* End_of_format */0,\n          \"\"\n        ];\n        var formatting$1 = is_open_tag ? /* Open_tag */Block.__(0, [sub_format$1]) : /* Open_box */Block.__(1, [sub_format$1]);\n        return /* Fmt_EBB */[/* Formatting_gen */Block.__(18, [\n                    formatting$1,\n                    match$3[0]\n                  ])];\n      }\n      else {\n        throw exn;\n      }\n    }\n  };\n  var parse_char_set = function (str_ind, end_ind) {\n    if (str_ind === end_ind) {\n      invalid_format_message(end_ind, \"unexpected end of format\");\n    }\n    var char_set = Bytes.make(32, /* \"\\000\" */0);\n    var add_range = function (c, c$prime) {\n      for(var i = c; i <= c$prime; ++i){\n        add_in_char_set(char_set, Pervasives.char_of_int(i));\n      }\n      return /* () */0;\n    };\n    var fail_single_percent = function (str_ind) {\n      return Curry._2(failwith_message(/* Format */[\n                      /* String_literal */Block.__(11, [\n                          \"invalid format \",\n                          /* Caml_string */Block.__(3, [\n                              /* No_padding */0,\n                              /* String_literal */Block.__(11, [\n                                  \": '\",\n                                  /* Char_literal */Block.__(12, [\n                                      /* \"%\" */37,\n                                      /* String_literal */Block.__(11, [\n                                          \"' alone is not accepted in character sets, use \",\n                                          /* Char_literal */Block.__(12, [\n                                              /* \"%\" */37,\n                                              /* Char_literal */Block.__(12, [\n                                                  /* \"%\" */37,\n                                                  /* String_literal */Block.__(11, [\n                                                      \" instead at position \",\n                                                      /* Int */Block.__(4, [\n                                                          /* Int_d */0,\n                                                          /* No_padding */0,\n                                                          /* No_precision */0,\n                                                          /* Char_literal */Block.__(12, [\n                                                              /* \".\" */46,\n                                                              /* End_of_format */0\n                                                            ])\n                                                        ])\n                                                    ])\n                                                ])\n                                            ])\n                                        ])\n                                    ])\n                                ])\n                            ])\n                        ]),\n                      \"invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d.\"\n                    ]), str, str_ind);\n    };\n    var parse_char_set_start = function (str_ind, end_ind) {\n      if (str_ind === end_ind) {\n        invalid_format_message(end_ind, \"unexpected end of format\");\n      }\n      var c = Caml_string.get(str, str_ind);\n      return parse_char_set_after_char(str_ind + 1 | 0, end_ind, c);\n    };\n    var parse_char_set_content = function (_str_ind, end_ind) {\n      while(true) {\n        var str_ind = _str_ind;\n        if (str_ind === end_ind) {\n          invalid_format_message(end_ind, \"unexpected end of format\");\n        }\n        var c = Caml_string.get(str, str_ind);\n        if (c !== 45) {\n          if (c !== 93) {\n            return parse_char_set_after_char(str_ind + 1 | 0, end_ind, c);\n          }\n          else {\n            return str_ind + 1 | 0;\n          }\n        }\n        else {\n          add_in_char_set(char_set, /* \"-\" */45);\n          _str_ind = str_ind + 1 | 0;\n          continue ;\n          \n        }\n      };\n    };\n    var parse_char_set_after_char = function (_str_ind, end_ind, _c) {\n      while(true) {\n        var c = _c;\n        var str_ind = _str_ind;\n        if (str_ind === end_ind) {\n          invalid_format_message(end_ind, \"unexpected end of format\");\n        }\n        var c$prime = Caml_string.get(str, str_ind);\n        var exit = 0;\n        var exit$1 = 0;\n        if (c$prime >= 46) {\n          if (c$prime !== 64) {\n            if (c$prime !== 93) {\n              exit = 1;\n            }\n            else {\n              add_in_char_set(char_set, c);\n              return str_ind + 1 | 0;\n            }\n          }\n          else {\n            exit$1 = 2;\n          }\n        }\n        else if (c$prime !== 37) {\n          if (c$prime >= 45) {\n            var str_ind$1 = str_ind + 1 | 0;\n            var end_ind$1 = end_ind;\n            var c$1 = c;\n            if (str_ind$1 === end_ind$1) {\n              invalid_format_message(end_ind$1, \"unexpected end of format\");\n            }\n            var c$prime$1 = Caml_string.get(str, str_ind$1);\n            if (c$prime$1 !== 37) {\n              if (c$prime$1 !== 93) {\n                add_range(c$1, c$prime$1);\n                return parse_char_set_content(str_ind$1 + 1 | 0, end_ind$1);\n              }\n              else {\n                add_in_char_set(char_set, c$1);\n                add_in_char_set(char_set, /* \"-\" */45);\n                return str_ind$1 + 1 | 0;\n              }\n            }\n            else {\n              if ((str_ind$1 + 1 | 0) === end_ind$1) {\n                invalid_format_message(end_ind$1, \"unexpected end of format\");\n              }\n              var c$prime$2 = Caml_string.get(str, str_ind$1 + 1 | 0);\n              var exit$2 = 0;\n              if (c$prime$2 !== 37) {\n                if (c$prime$2 !== 64) {\n                  return fail_single_percent(str_ind$1);\n                }\n                else {\n                  exit$2 = 1;\n                }\n              }\n              else {\n                exit$2 = 1;\n              }\n              if (exit$2 === 1) {\n                add_range(c$1, c$prime$2);\n                return parse_char_set_content(str_ind$1 + 2 | 0, end_ind$1);\n              }\n              \n            }\n          }\n          else {\n            exit = 1;\n          }\n        }\n        else {\n          exit$1 = 2;\n        }\n        if (exit$1 === 2) {\n          if (c === /* \"%\" */37) {\n            add_in_char_set(char_set, c$prime);\n            return parse_char_set_content(str_ind + 1 | 0, end_ind);\n          }\n          else {\n            exit = 1;\n          }\n        }\n        if (exit === 1) {\n          if (c === /* \"%\" */37) {\n            fail_single_percent(str_ind);\n          }\n          add_in_char_set(char_set, c);\n          _c = c$prime;\n          _str_ind = str_ind + 1 | 0;\n          continue ;\n          \n        }\n        \n      };\n    };\n    if (str_ind === end_ind) {\n      invalid_format_message(end_ind, \"unexpected end of format\");\n    }\n    var match = Caml_string.get(str, str_ind);\n    var match$1 = match !== 94 ? /* tuple */[\n        str_ind,\n        /* false */0\n      ] : /* tuple */[\n        str_ind + 1 | 0,\n        /* true */1\n      ];\n    var next_ind = parse_char_set_start(match$1[0], end_ind);\n    var char_set$1 = Bytes.to_string(char_set);\n    return /* tuple */[\n            next_ind,\n            match$1[1] ? rev_char_set(char_set$1) : char_set$1\n          ];\n  };\n  var parse_spaces = function (_str_ind, end_ind) {\n    while(true) {\n      var str_ind = _str_ind;\n      if (str_ind === end_ind) {\n        invalid_format_message(end_ind, \"unexpected end of format\");\n      }\n      if (Caml_string.get(str, str_ind) === /* \" \" */32) {\n        _str_ind = str_ind + 1 | 0;\n        continue ;\n        \n      }\n      else {\n        return str_ind;\n      }\n    };\n  };\n  var parse_positive = function (_str_ind, end_ind, _acc) {\n    while(true) {\n      var acc = _acc;\n      var str_ind = _str_ind;\n      if (str_ind === end_ind) {\n        invalid_format_message(end_ind, \"unexpected end of format\");\n      }\n      var c = Caml_string.get(str, str_ind);\n      if (c > 57 || c < 48) {\n        return /* tuple */[\n                str_ind,\n                acc\n              ];\n      }\n      else {\n        var new_acc = Caml_int32.imul(acc, 10) + (c - /* \"0\" */48 | 0) | 0;\n        if (new_acc > Sys.max_string_length) {\n          return Curry._3(failwith_message(/* Format */[\n                          /* String_literal */Block.__(11, [\n                              \"invalid format \",\n                              /* Caml_string */Block.__(3, [\n                                  /* No_padding */0,\n                                  /* String_literal */Block.__(11, [\n                                      \": integer \",\n                                      /* Int */Block.__(4, [\n                                          /* Int_d */0,\n                                          /* No_padding */0,\n                                          /* No_precision */0,\n                                          /* String_literal */Block.__(11, [\n                                              \" is greater than the limit \",\n                                              /* Int */Block.__(4, [\n                                                  /* Int_d */0,\n                                                  /* No_padding */0,\n                                                  /* No_precision */0,\n                                                  /* End_of_format */0\n                                                ])\n                                            ])\n                                        ])\n                                    ])\n                                ])\n                            ]),\n                          \"invalid format %S: integer %d is greater than the limit %d\"\n                        ]), str, new_acc, Sys.max_string_length);\n        }\n        else {\n          _acc = new_acc;\n          _str_ind = str_ind + 1 | 0;\n          continue ;\n          \n        }\n      }\n    };\n  };\n  var parse_integer = function (str_ind, end_ind) {\n    if (str_ind === end_ind) {\n      invalid_format_message(end_ind, \"unexpected end of format\");\n    }\n    var match = Caml_string.get(str, str_ind);\n    if (match >= 48) {\n      if (match >= 58) {\n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              [\n                \"camlinternalFormat.ml\",\n                2621,\n                11\n              ]\n            ];\n      }\n      else {\n        return parse_positive(str_ind, end_ind, 0);\n      }\n    }\n    else if (match !== 45) {\n      throw [\n            Caml_builtin_exceptions.assert_failure,\n            [\n              \"camlinternalFormat.ml\",\n              2621,\n              11\n            ]\n          ];\n    }\n    else {\n      if ((str_ind + 1 | 0) === end_ind) {\n        invalid_format_message(end_ind, \"unexpected end of format\");\n      }\n      var c = Caml_string.get(str, str_ind + 1 | 0);\n      if (c > 57 || c < 48) {\n        return expected_character(str_ind + 1 | 0, \"digit\", c);\n      }\n      else {\n        var match$1 = parse_positive(str_ind + 1 | 0, end_ind, 0);\n        return /* tuple */[\n                match$1[0],\n                -match$1[1]\n              ];\n      }\n    }\n  };\n  var add_literal = function (lit_start, str_ind, fmt) {\n    var size = str_ind - lit_start | 0;\n    if (size !== 0) {\n      if (size !== 1) {\n        return /* Fmt_EBB */[/* String_literal */Block.__(11, [\n                    $$String.sub(str, lit_start, size),\n                    fmt\n                  ])];\n      }\n      else {\n        return /* Fmt_EBB */[/* Char_literal */Block.__(12, [\n                    Caml_string.get(str, lit_start),\n                    fmt\n                  ])];\n      }\n    }\n    else {\n      return /* Fmt_EBB */[fmt];\n    }\n  };\n  var search_subformat_end = function (_str_ind, end_ind, c) {\n    while(true) {\n      var str_ind = _str_ind;\n      if (str_ind === end_ind) {\n        Curry._3(failwith_message(/* Format */[\n                  /* String_literal */Block.__(11, [\n                      \"invalid format \",\n                      /* Caml_string */Block.__(3, [\n                          /* No_padding */0,\n                          /* String_literal */Block.__(11, [\n                              ': unclosed sub-format, expected \"',\n                              /* Char_literal */Block.__(12, [\n                                  /* \"%\" */37,\n                                  /* Char */Block.__(0, [/* String_literal */Block.__(11, [\n                                          '\" at character number ',\n                                          /* Int */Block.__(4, [\n                                              /* Int_d */0,\n                                              /* No_padding */0,\n                                              /* No_precision */0,\n                                              /* End_of_format */0\n                                            ])\n                                        ])])\n                                ])\n                            ])\n                        ])\n                    ]),\n                  'invalid format %S: unclosed sub-format, expected \"%%%c\" at character number %d'\n                ]), str, c, end_ind);\n      }\n      var match = Caml_string.get(str, str_ind);\n      if (match !== 37) {\n        _str_ind = str_ind + 1 | 0;\n        continue ;\n        \n      }\n      else {\n        if ((str_ind + 1 | 0) === end_ind) {\n          invalid_format_message(end_ind, \"unexpected end of format\");\n        }\n        if (Caml_string.get(str, str_ind + 1 | 0) === c) {\n          return str_ind;\n        }\n        else {\n          var match$1 = Caml_string.get(str, str_ind + 1 | 0);\n          var exit = 0;\n          if (match$1 >= 95) {\n            if (match$1 >= 123) {\n              if (match$1 >= 126) {\n                exit = 1;\n              }\n              else {\n                switch (match$1 - 123 | 0) {\n                  case 0 : \n                      var sub_end = search_subformat_end(str_ind + 2 | 0, end_ind, /* \"}\" */125);\n                      _str_ind = sub_end + 2 | 0;\n                      continue ;\n                      case 1 : \n                      exit = 1;\n                      break;\n                  case 2 : \n                      return expected_character(str_ind + 1 | 0, \"character ')'\", /* \"}\" */125);\n                  \n                }\n              }\n            }\n            else if (match$1 >= 96) {\n              exit = 1;\n            }\n            else {\n              if ((str_ind + 2 | 0) === end_ind) {\n                invalid_format_message(end_ind, \"unexpected end of format\");\n              }\n              var match$2 = Caml_string.get(str, str_ind + 2 | 0);\n              if (match$2 !== 40) {\n                if (match$2 !== 123) {\n                  _str_ind = str_ind + 3 | 0;\n                  continue ;\n                  \n                }\n                else {\n                  var sub_end$1 = search_subformat_end(str_ind + 3 | 0, end_ind, /* \"}\" */125);\n                  _str_ind = sub_end$1 + 2 | 0;\n                  continue ;\n                  \n                }\n              }\n              else {\n                var sub_end$2 = search_subformat_end(str_ind + 3 | 0, end_ind, /* \")\" */41);\n                _str_ind = sub_end$2 + 2 | 0;\n                continue ;\n                \n              }\n            }\n          }\n          else if (match$1 !== 40) {\n            if (match$1 !== 41) {\n              exit = 1;\n            }\n            else {\n              return expected_character(str_ind + 1 | 0, \"character '}'\", /* \")\" */41);\n            }\n          }\n          else {\n            var sub_end$3 = search_subformat_end(str_ind + 2 | 0, end_ind, /* \")\" */41);\n            _str_ind = sub_end$3 + 2 | 0;\n            continue ;\n            \n          }\n          if (exit === 1) {\n            _str_ind = str_ind + 2 | 0;\n            continue ;\n            \n          }\n          \n        }\n      }\n    };\n  };\n  var is_int_base = function (symb) {\n    var switcher = symb - 88 | 0;\n    if (switcher > 32 || switcher < 0) {\n      return /* false */0;\n    }\n    else {\n      switch (switcher) {\n        case 1 : \n        case 2 : \n        case 3 : \n        case 4 : \n        case 5 : \n        case 6 : \n        case 7 : \n        case 8 : \n        case 9 : \n        case 10 : \n        case 11 : \n        case 13 : \n        case 14 : \n        case 15 : \n        case 16 : \n        case 18 : \n        case 19 : \n        case 20 : \n        case 21 : \n        case 22 : \n        case 24 : \n        case 25 : \n        case 26 : \n        case 27 : \n        case 28 : \n        case 30 : \n        case 31 : \n            return /* false */0;\n        case 0 : \n        case 12 : \n        case 17 : \n        case 23 : \n        case 29 : \n        case 32 : \n            return /* true */1;\n        \n      }\n    }\n  };\n  var counter_of_char = function (symb) {\n    var exit = 0;\n    if (symb >= 108) {\n      if (symb >= 111) {\n        exit = 1;\n      }\n      else {\n        switch (symb - 108 | 0) {\n          case 0 : \n              return /* Line_counter */0;\n          case 1 : \n              exit = 1;\n              break;\n          case 2 : \n              return /* Char_counter */1;\n          \n        }\n      }\n    }\n    else if (symb !== 76) {\n      exit = 1;\n    }\n    else {\n      return /* Token_counter */2;\n    }\n    if (exit === 1) {\n      throw [\n            Caml_builtin_exceptions.assert_failure,\n            [\n              \"camlinternalFormat.ml\",\n              2683,\n              34\n            ]\n          ];\n    }\n    \n  };\n  var compute_int_conv = function (pct_ind, str_ind, _plus, _sharp, _space, symb) {\n    while(true) {\n      var space = _space;\n      var sharp = _sharp;\n      var plus = _plus;\n      var exit = 0;\n      var exit$1 = 0;\n      if (plus !== 0) {\n        if (sharp !== 0) {\n          exit$1 = 2;\n        }\n        else if (space !== 0) {\n          exit = 1;\n        }\n        else if (symb !== 100) {\n          if (symb !== 105) {\n            exit = 1;\n          }\n          else {\n            return /* Int_pi */4;\n          }\n        }\n        else {\n          return /* Int_pd */1;\n        }\n      }\n      else if (sharp !== 0) {\n        if (space !== 0) {\n          exit$1 = 2;\n        }\n        else if (symb !== 88) {\n          if (symb !== 111) {\n            if (symb !== 120) {\n              exit$1 = 2;\n            }\n            else {\n              return /* Int_Cx */7;\n            }\n          }\n          else {\n            return /* Int_Co */11;\n          }\n        }\n        else {\n          return /* Int_CX */9;\n        }\n      }\n      else if (space !== 0) {\n        if (symb !== 100) {\n          if (symb !== 105) {\n            exit = 1;\n          }\n          else {\n            return /* Int_si */5;\n          }\n        }\n        else {\n          return /* Int_sd */2;\n        }\n      }\n      else {\n        var switcher = symb - 88 | 0;\n        if (switcher > 32 || switcher < 0) {\n          exit = 1;\n        }\n        else {\n          switch (switcher) {\n            case 0 : \n                return /* Int_X */8;\n            case 12 : \n                return /* Int_d */0;\n            case 17 : \n                return /* Int_i */3;\n            case 23 : \n                return /* Int_o */10;\n            case 29 : \n                return /* Int_u */12;\n            case 1 : \n            case 2 : \n            case 3 : \n            case 4 : \n            case 5 : \n            case 6 : \n            case 7 : \n            case 8 : \n            case 9 : \n            case 10 : \n            case 11 : \n            case 13 : \n            case 14 : \n            case 15 : \n            case 16 : \n            case 18 : \n            case 19 : \n            case 20 : \n            case 21 : \n            case 22 : \n            case 24 : \n            case 25 : \n            case 26 : \n            case 27 : \n            case 28 : \n            case 30 : \n            case 31 : \n                exit = 1;\n                break;\n            case 32 : \n                return /* Int_x */6;\n            \n          }\n        }\n      }\n      if (exit$1 === 2) {\n        var exit$2 = 0;\n        var switcher$1 = symb - 88 | 0;\n        if (switcher$1 > 32 || switcher$1 < 0) {\n          exit = 1;\n        }\n        else {\n          switch (switcher$1) {\n            case 0 : \n                if (legacy_behavior$1) {\n                  return /* Int_CX */9;\n                }\n                else {\n                  exit = 1;\n                }\n                break;\n            case 23 : \n                if (legacy_behavior$1) {\n                  return /* Int_Co */11;\n                }\n                else {\n                  exit = 1;\n                }\n                break;\n            case 12 : \n            case 17 : \n            case 29 : \n                exit$2 = 3;\n                break;\n            case 1 : \n            case 2 : \n            case 3 : \n            case 4 : \n            case 5 : \n            case 6 : \n            case 7 : \n            case 8 : \n            case 9 : \n            case 10 : \n            case 11 : \n            case 13 : \n            case 14 : \n            case 15 : \n            case 16 : \n            case 18 : \n            case 19 : \n            case 20 : \n            case 21 : \n            case 22 : \n            case 24 : \n            case 25 : \n            case 26 : \n            case 27 : \n            case 28 : \n            case 30 : \n            case 31 : \n                exit = 1;\n                break;\n            case 32 : \n                if (legacy_behavior$1) {\n                  return /* Int_Cx */7;\n                }\n                else {\n                  exit = 1;\n                }\n                break;\n            \n          }\n        }\n        if (exit$2 === 3) {\n          if (legacy_behavior$1) {\n            _sharp = /* false */0;\n            continue ;\n            \n          }\n          else {\n            return incompatible_flag(pct_ind, str_ind, symb, \"'#'\");\n          }\n        }\n        \n      }\n      if (exit === 1) {\n        if (plus !== 0) {\n          if (space !== 0) {\n            if (legacy_behavior$1) {\n              _space = /* false */0;\n              continue ;\n              \n            }\n            else {\n              return incompatible_flag(pct_ind, str_ind, /* \" \" */32, \"'+'\");\n            }\n          }\n          else if (legacy_behavior$1) {\n            _plus = /* false */0;\n            continue ;\n            \n          }\n          else {\n            return incompatible_flag(pct_ind, str_ind, symb, \"'+'\");\n          }\n        }\n        else if (space !== 0) {\n          if (legacy_behavior$1) {\n            _space = /* false */0;\n            continue ;\n            \n          }\n          else {\n            return incompatible_flag(pct_ind, str_ind, symb, \"' '\");\n          }\n        }\n        else {\n          throw [\n                Caml_builtin_exceptions.assert_failure,\n                [\n                  \"camlinternalFormat.ml\",\n                  2716,\n                  28\n                ]\n              ];\n        }\n      }\n      \n    };\n  };\n  var compute_float_conv = function (pct_ind, str_ind, _plus, _space, symb) {\n    while(true) {\n      var space = _space;\n      var plus = _plus;\n      if (plus !== 0) {\n        if (space !== 0) {\n          if (legacy_behavior$1) {\n            _space = /* false */0;\n            continue ;\n            \n          }\n          else {\n            return incompatible_flag(pct_ind, str_ind, /* \" \" */32, \"'+'\");\n          }\n        }\n        else {\n          var exit = 0;\n          if (symb >= 72) {\n            var switcher = symb - 101 | 0;\n            if (switcher > 2 || switcher < 0) {\n              exit = 1;\n            }\n            else {\n              switch (switcher) {\n                case 0 : \n                    return /* Float_pe */4;\n                case 1 : \n                    return /* Float_pf */1;\n                case 2 : \n                    return /* Float_pg */10;\n                \n              }\n            }\n          }\n          else if (symb >= 69) {\n            switch (symb - 69 | 0) {\n              case 0 : \n                  return /* Float_pE */7;\n              case 1 : \n                  exit = 1;\n                  break;\n              case 2 : \n                  return /* Float_pG */13;\n              \n            }\n          }\n          else {\n            exit = 1;\n          }\n          if (exit === 1) {\n            if (legacy_behavior$1) {\n              _plus = /* false */0;\n              continue ;\n              \n            }\n            else {\n              return incompatible_flag(pct_ind, str_ind, symb, \"'+'\");\n            }\n          }\n          \n        }\n      }\n      else if (space !== 0) {\n        var exit$1 = 0;\n        if (symb >= 72) {\n          var switcher$1 = symb - 101 | 0;\n          if (switcher$1 > 2 || switcher$1 < 0) {\n            exit$1 = 1;\n          }\n          else {\n            switch (switcher$1) {\n              case 0 : \n                  return /* Float_se */5;\n              case 1 : \n                  return /* Float_sf */2;\n              case 2 : \n                  return /* Float_sg */11;\n              \n            }\n          }\n        }\n        else if (symb >= 69) {\n          switch (symb - 69 | 0) {\n            case 0 : \n                return /* Float_sE */8;\n            case 1 : \n                exit$1 = 1;\n                break;\n            case 2 : \n                return /* Float_sG */14;\n            \n          }\n        }\n        else {\n          exit$1 = 1;\n        }\n        if (exit$1 === 1) {\n          if (legacy_behavior$1) {\n            _space = /* false */0;\n            continue ;\n            \n          }\n          else {\n            return incompatible_flag(pct_ind, str_ind, symb, \"' '\");\n          }\n        }\n        \n      }\n      else if (symb >= 72) {\n        var switcher$2 = symb - 101 | 0;\n        if (switcher$2 > 2 || switcher$2 < 0) {\n          throw [\n                Caml_builtin_exceptions.assert_failure,\n                [\n                  \"camlinternalFormat.ml\",\n                  2744,\n                  25\n                ]\n              ];\n        }\n        else {\n          switch (switcher$2) {\n            case 0 : \n                return /* Float_e */3;\n            case 1 : \n                return /* Float_f */0;\n            case 2 : \n                return /* Float_g */9;\n            \n          }\n        }\n      }\n      else if (symb >= 69) {\n        switch (symb - 69 | 0) {\n          case 0 : \n              return /* Float_E */6;\n          case 1 : \n              return /* Float_F */15;\n          case 2 : \n              return /* Float_G */12;\n          \n        }\n      }\n      else {\n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              [\n                \"camlinternalFormat.ml\",\n                2744,\n                25\n              ]\n            ];\n      }\n    };\n  };\n  var incompatible_flag = function (pct_ind, str_ind, symb, option) {\n    var subfmt = $$String.sub(str, pct_ind, str_ind - pct_ind | 0);\n    return Curry._5(failwith_message(/* Format */[\n                    /* String_literal */Block.__(11, [\n                        \"invalid format \",\n                        /* Caml_string */Block.__(3, [\n                            /* No_padding */0,\n                            /* String_literal */Block.__(11, [\n                                \": at character number \",\n                                /* Int */Block.__(4, [\n                                    /* Int_d */0,\n                                    /* No_padding */0,\n                                    /* No_precision */0,\n                                    /* String_literal */Block.__(11, [\n                                        \", \",\n                                        /* String */Block.__(2, [\n                                            /* No_padding */0,\n                                            /* String_literal */Block.__(11, [\n                                                \" is incompatible with '\",\n                                                /* Char */Block.__(0, [/* String_literal */Block.__(11, [\n                                                        \"' in sub-format \",\n                                                        /* Caml_string */Block.__(3, [\n                                                            /* No_padding */0,\n                                                            /* End_of_format */0\n                                                          ])\n                                                      ])])\n                                              ])\n                                          ])\n                                      ])\n                                  ])\n                              ])\n                          ])\n                      ]),\n                    \"invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S\"\n                  ]), str, pct_ind, option, symb, subfmt);\n  };\n  return parse_literal(0, 0, str.length);\n}\n\nfunction format_of_string_fmtty(str, fmtty) {\n  var match = fmt_ebb_of_string(/* None */0, str);\n  try {\n    return /* Format */[\n            type_format(match[0], fmtty),\n            str\n          ];\n  }\n  catch (exn){\n    if (exn === Type_mismatch) {\n      return Curry._2(failwith_message(/* Format */[\n                      /* String_literal */Block.__(11, [\n                          \"bad input: format type mismatch between \",\n                          /* Caml_string */Block.__(3, [\n                              /* No_padding */0,\n                              /* String_literal */Block.__(11, [\n                                  \" and \",\n                                  /* Caml_string */Block.__(3, [\n                                      /* No_padding */0,\n                                      /* End_of_format */0\n                                    ])\n                                ])\n                            ])\n                        ]),\n                      \"bad input: format type mismatch between %S and %S\"\n                    ]), str, string_of_fmtty(fmtty));\n    }\n    else {\n      throw exn;\n    }\n  }\n}\n\nfunction format_of_string_format(str, param) {\n  var match = fmt_ebb_of_string(/* None */0, str);\n  try {\n    return /* Format */[\n            type_format(match[0], fmtty_of_fmt(param[0])),\n            str\n          ];\n  }\n  catch (exn){\n    if (exn === Type_mismatch) {\n      return Curry._2(failwith_message(/* Format */[\n                      /* String_literal */Block.__(11, [\n                          \"bad input: format type mismatch between \",\n                          /* Caml_string */Block.__(3, [\n                              /* No_padding */0,\n                              /* String_literal */Block.__(11, [\n                                  \" and \",\n                                  /* Caml_string */Block.__(3, [\n                                      /* No_padding */0,\n                                      /* End_of_format */0\n                                    ])\n                                ])\n                            ])\n                        ]),\n                      \"bad input: format type mismatch between %S and %S\"\n                    ]), str, param[1]);\n    }\n    else {\n      throw exn;\n    }\n  }\n}\n\nexports.is_in_char_set                 = is_in_char_set;\nexports.rev_char_set                   = rev_char_set;\nexports.create_char_set                = create_char_set;\nexports.add_in_char_set                = add_in_char_set;\nexports.freeze_char_set                = freeze_char_set;\nexports.param_format_of_ignored_format = param_format_of_ignored_format;\nexports.make_printf                    = make_printf;\nexports.output_acc                     = output_acc;\nexports.bufput_acc                     = bufput_acc;\nexports.strput_acc                     = strput_acc;\nexports.type_format                    = type_format;\nexports.fmt_ebb_of_string              = fmt_ebb_of_string;\nexports.format_of_string_fmtty         = format_of_string_fmtty;\nexports.format_of_string_format        = format_of_string_format;\nexports.char_of_iconv                  = char_of_iconv;\nexports.string_of_formatting_lit       = string_of_formatting_lit;\nexports.string_of_formatting_gen       = string_of_formatting_gen;\nexports.string_of_fmtty                = string_of_fmtty;\nexports.string_of_fmt                  = string_of_fmt;\nexports.open_box_of_string             = open_box_of_string;\nexports.symm                           = symm;\nexports.trans                          = trans;\nexports.recast                         = recast;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/camlinternalFormat.js\n ** module id = 24\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/camlinternalFormat.js?");

/***/ },
/* 25 */
/***/ function(module, exports) {

	eval("'use strict';\n\n\nfunction caml_int32_float_of_bits(x) {\n  var int32 = new Int32Array(/* array */[x]);\n  var float32 = new Float32Array(int32.buffer);\n  return float32[0];\n}\n\nfunction caml_int32_bits_of_float(x) {\n  var float32 = new Float32Array(/* float array */[x]);\n  return new Int32Array(float32.buffer)[0];\n}\n\nfunction caml_classify_float(x) {\n  if (isFinite(x)) {\n    if (Math.abs(x) >= 2.2250738585072014e-308) {\n      return /* FP_normal */0;\n    }\n    else if (x !== 0) {\n      return /* FP_subnormal */1;\n    }\n    else {\n      return /* FP_zero */2;\n    }\n  }\n  else if (isNaN(x)) {\n    return /* FP_nan */4;\n  }\n  else {\n    return /* FP_infinite */3;\n  }\n}\n\nfunction caml_modf_float(x) {\n  if (isFinite(x)) {\n    var neg = +(1 / x < 0);\n    var x$1 = Math.abs(x);\n    var i = Math.floor(x$1);\n    var f = x$1 - i;\n    if (neg) {\n      return /* tuple */[\n              -f,\n              -i\n            ];\n    }\n    else {\n      return /* tuple */[\n              f,\n              i\n            ];\n    }\n  }\n  else if (isNaN(x)) {\n    return /* tuple */[\n            NaN,\n            NaN\n          ];\n  }\n  else {\n    return /* tuple */[\n            1 / x,\n            x\n          ];\n  }\n}\n\nvar caml_ldexp_float = ( function (x,exp) {\n    exp |= 0;\n    if (exp > 1023) {\n        exp -= 1023;\n        x *= Math.pow(2, 1023);\n        if (exp > 1023) {  // in case x is subnormal\n            exp -= 1023;\n            x *= Math.pow(2, 1023);\n        }\n    }\n    if (exp < -1023) {\n        exp += 1023;\n        x *= Math.pow(2, -1023);\n    }\n    x *= Math.pow(2, exp);\n    return x;\n}\n);\n\nvar caml_frexp_float = (function (x) {\n    if ((x == 0) || !isFinite(x)) return [ x, 0];\n    var neg = x < 0;\n    if (neg) x = - x;\n    var exp = Math.floor(Math.LOG2E*Math.log(x)) + 1;\n    x *= Math.pow(2,-exp);\n    if (x < 0.5) { x *= 2; exp -= 1; }\n    if (neg) x = - x;\n    return [x, exp];\n}\n);\n\nfunction caml_float_compare(x, y) {\n  if (x === y) {\n    return 0;\n  }\n  else if (x < y) {\n    return -1;\n  }\n  else if (x > y || x === x) {\n    return 1;\n  }\n  else if (y === y) {\n    return -1;\n  }\n  else {\n    return 0;\n  }\n}\n\nfunction caml_copysign_float(x, y) {\n  var x$1 = Math.abs(x);\n  var y$1 = y === 0 ? 1 / y : y;\n  if (y$1 < 0) {\n    return -x$1;\n  }\n  else {\n    return x$1;\n  }\n}\n\nfunction caml_expm1_float(x) {\n  var y = Math.exp(x);\n  var z = y - 1;\n  if (Math.abs(x) > 1) {\n    return z;\n  }\n  else if (z === 0) {\n    return x;\n  }\n  else {\n    return x * z / Math.log(y);\n  }\n}\n\nvar caml_hypot_float = ( function (x, y) {\n    var x0 = Math.abs(x), y0 = Math.abs(y);\n    var a = Math.max(x0, y0), b = Math.min(x0,y0) / (a?a:1);\n    return a * Math.sqrt(1 + b*b);\n}\n);\n\nvar caml_log10_float = ( function  (x) { \n   return Math.LOG10E * Math.log(x); }\n);\n\nexports.caml_int32_float_of_bits = caml_int32_float_of_bits;\nexports.caml_int32_bits_of_float = caml_int32_bits_of_float;\nexports.caml_classify_float      = caml_classify_float;\nexports.caml_modf_float          = caml_modf_float;\nexports.caml_ldexp_float         = caml_ldexp_float;\nexports.caml_frexp_float         = caml_frexp_float;\nexports.caml_float_compare       = caml_float_compare;\nexports.caml_copysign_float      = caml_copysign_float;\nexports.caml_expm1_float         = caml_expm1_float;\nexports.caml_hypot_float         = caml_hypot_float;\nexports.caml_log10_float         = caml_log10_float;\n/* caml_ldexp_float Not a pure module */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/caml_float.js\n ** module id = 25\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/caml_float.js?");

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\n\nfunction get(s, i) {\n  if (i < 0 || i >= s.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"index out of bounds\"\n        ];\n  }\n  else {\n    return s[i];\n  }\n}\n\nexports.get = get;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/caml_bytes.js\n ** module id = 26\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/caml_bytes.js?");

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	eval("// Generated by BUCKLESCRIPT VERSION 1.0.1 , PLEASE EDIT WITH CARE\n'use strict';\n\nvar Caml_obj        = __webpack_require__(8);\nvar Pervasives      = __webpack_require__(7);\nvar Caml_exceptions = __webpack_require__(11);\nvar Curry           = __webpack_require__(2);\nvar Scanf           = __webpack_require__(28);\nvar $$String        = __webpack_require__(23);\nvar Caml_string     = __webpack_require__(16);\n\nfunction getChild(_children, mapper) {\n  while(true) {\n    var children = _children;\n    if (children) {\n      var x = Curry._1(mapper, children[0]);\n      if (x) {\n        return x;\n      }\n      else {\n        _children = children[1];\n        continue ;\n        \n      }\n    }\n    else {\n      return /* None */0;\n    }\n  };\n}\n\nfunction getChildren(_children, mapper) {\n  while(true) {\n    var children = _children;\n    if (children) {\n      var rest = children[1];\n      var match = Curry._1(mapper, children[0]);\n      if (match) {\n        return /* :: */[\n                match[0],\n                getChildren(rest, mapper)\n              ];\n      }\n      else {\n        _children = rest;\n        continue ;\n        \n      }\n    }\n    else {\n      return /* [] */0;\n    }\n  };\n}\n\nfunction getContentsByLabel(children, needle) {\n  return getChild(children, function (param) {\n              var child = param[1];\n              if (Caml_obj.caml_notequal(needle, param[0])) {\n                return /* None */0;\n              }\n              else if (child.tag) {\n                return Pervasives.failwith(\"expected a leaf\");\n              }\n              else {\n                return /* Some */[child[1]];\n              }\n            });\n}\n\nfunction getContentsByType(children, needle) {\n  return getChild(children, function (child) {\n              var match = child[1];\n              if (match.tag) {\n                if (match[0][0] === needle) {\n                  return Pervasives.failwith(\"expected a leaf\");\n                }\n                else {\n                  return /* None */0;\n                }\n              }\n              else if (match[0][0] === needle) {\n                return /* Some */[match[1]];\n              }\n              else {\n                return /* None */0;\n              }\n            });\n}\n\nfunction getPresence(_children, mapper) {\n  while(true) {\n    var children = _children;\n    if (children) {\n      var x = Curry._1(mapper, children[0]);\n      if (x !== 0) {\n        return x;\n      }\n      else {\n        _children = children[1];\n        continue ;\n        \n      }\n    }\n    else {\n      return /* false */0;\n    }\n  };\n}\n\nfunction getPresenceByLabel(children, needle) {\n  return getPresence(children, function (child) {\n              if (Caml_obj.caml_equal(child[0], needle)) {\n                return /* true */1;\n              }\n              else {\n                return /* false */0;\n              }\n            });\n}\n\nfunction getPresenceByType(children, needle) {\n  return getPresence(children, function (child) {\n              if (child[1][0][0] === needle) {\n                return /* true */1;\n              }\n              else {\n                return /* false */0;\n              }\n            });\n}\n\nfunction getNodeByType(children, needle) {\n  return getChild(children, function (param) {\n              var child = param[1];\n              if (param[0] !== \"\") {\n                return /* None */0;\n              }\n              else if (child.tag) {\n                var match = child[0];\n                if (match[0] === needle) {\n                  return /* Some */[/* tuple */[\n                            match[1],\n                            child[1],\n                            child[2]\n                          ]];\n                }\n                else {\n                  return /* None */0;\n                }\n              }\n              else {\n                return /* None */0;\n              }\n            });\n}\n\nfunction getNodesByType(children, needle, nodeMapper) {\n  return getChildren(children, function (param) {\n              var child = param[1];\n              if (child.tag) {\n                var match = child[0];\n                if (match[0] === needle) {\n                  return /* Some */[Curry._1(nodeMapper, /* tuple */[\n                                match[1],\n                                child[1],\n                                child[2]\n                              ])];\n                }\n                else {\n                  return /* None */0;\n                }\n              }\n              else {\n                return /* None */0;\n              }\n            });\n}\n\nfunction getNodesByLabel(children, needle, nodeMapper) {\n  return getChildren(children, function (param) {\n              var child = param[1];\n              if (Caml_obj.caml_equal(param[0], needle) && child.tag) {\n                return /* Some */[Curry._1(nodeMapper, /* tuple */[\n                              child[0][1],\n                              child[1],\n                              child[2]\n                            ])];\n              }\n              else {\n                return /* None */0;\n              }\n            });\n}\n\nfunction getNodeByLabel(children, needle) {\n  return getChild(children, function (param) {\n              var child = param[1];\n              if (param[0] === needle) {\n                if (child.tag) {\n                  return /* Some */[/* tuple */[\n                            child[0],\n                            child[1],\n                            child[2]\n                          ]];\n                }\n                else {\n                  return Pervasives.failwith(\"Expected node for label \" + needle);\n                }\n              }\n              else {\n                return /* None */0;\n              }\n            });\n}\n\nfunction getLeafByType(children, needle) {\n  return getChild(children, function (param) {\n              var child = param[1];\n              if (child.tag) {\n                return /* None */0;\n              }\n              else {\n                var match = child[0];\n                var name = match[0];\n                if (name === needle) {\n                  return /* Some */[/* tuple */[\n                            /* tuple */[\n                              name,\n                              match[1]\n                            ],\n                            child[1],\n                            child[2]\n                          ]];\n                }\n                else {\n                  return /* None */0;\n                }\n              }\n            });\n}\n\nfunction unescapeString(x) {\n  var contents = $$String.sub(x, 1, x.length - 2 | 0);\n  if (contents.length === 1) {\n    return contents;\n  }\n  else {\n    return Scanf.unescaped(contents);\n  }\n}\n\nfunction unescapeChar(x) {\n  if (x.length === 1) {\n    return Caml_string.get(x, 0);\n  }\n  else {\n    return Caml_string.get(unescapeString(x), 0);\n  }\n}\n\nvar ConversionFailure = Caml_exceptions.create(\"ResultUtils.ConversionFailure\");\n\nfunction unwrap(opt) {\n  if (opt) {\n    return opt[0];\n  }\n  else {\n    throw [\n          ConversionFailure,\n          \"Unwrapping none\"\n        ];\n  }\n}\n\nfunction assertEq(one, two) {\n  if (Caml_obj.caml_notequal(one, two)) {\n    throw [\n          ConversionFailure,\n          \"Assertion error\"\n        ];\n  }\n  else {\n    return 0;\n  }\n}\n\nvar P = 0;\n\nexports.P                  = P;\nexports.getChild           = getChild;\nexports.getChildren        = getChildren;\nexports.getContentsByLabel = getContentsByLabel;\nexports.getContentsByType  = getContentsByType;\nexports.getPresence        = getPresence;\nexports.getPresenceByLabel = getPresenceByLabel;\nexports.getPresenceByType  = getPresenceByType;\nexports.getNodeByType      = getNodeByType;\nexports.getNodesByType     = getNodesByType;\nexports.getNodesByLabel    = getNodesByLabel;\nexports.getNodeByLabel     = getNodeByLabel;\nexports.getLeafByType      = getLeafByType;\nexports.unescapeString     = unescapeString;\nexports.unescapeChar       = unescapeChar;\nexports.ConversionFailure  = ConversionFailure;\nexports.unwrap             = unwrap;\nexports.assertEq           = assertEq;\n/* Scanf Not a pure module */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./bs_build/resultUtils.js\n ** module id = 27\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./bs_build/resultUtils.js?");

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_builtin_exceptions  = __webpack_require__(4);\nvar Bytes                    = __webpack_require__(19);\nvar Pervasives               = __webpack_require__(7);\nvar Caml_exceptions          = __webpack_require__(11);\nvar Caml_format              = __webpack_require__(12);\nvar Caml_int32               = __webpack_require__(14);\nvar Block                    = __webpack_require__(1);\nvar Curry                    = __webpack_require__(2);\nvar Printf                   = __webpack_require__(6);\nvar Caml_bytes               = __webpack_require__(26);\nvar CamlinternalFormatBasics = __webpack_require__(17);\nvar Buffer                   = __webpack_require__(18);\nvar $$String                 = __webpack_require__(23);\nvar Caml_string              = __webpack_require__(16);\nvar List                     = __webpack_require__(21);\nvar CamlinternalFormat       = __webpack_require__(24);\n\nfunction next_char(ib) {\n  try {\n    var c = Curry._1(ib[/* get_next_char */6], /* () */0);\n    ib[/* current_char */1] = c;\n    ib[/* current_char_is_valid */2] = /* true */1;\n    ib[/* char_count */3] = ib[/* char_count */3] + 1 | 0;\n    if (c === /* \"\\n\" */10) {\n      ib[/* line_count */4] = ib[/* line_count */4] + 1 | 0;\n    }\n    return c;\n  }\n  catch (exn){\n    if (exn === Caml_builtin_exceptions.end_of_file) {\n      ib[/* current_char */1] = /* \"\\000\" */0;\n      ib[/* current_char_is_valid */2] = /* false */0;\n      ib[/* eof */0] = /* true */1;\n      return /* \"\\000\" */0;\n    }\n    else {\n      throw exn;\n    }\n  }\n}\n\nfunction peek_char(ib) {\n  if (ib[/* current_char_is_valid */2]) {\n    return ib[/* current_char */1];\n  }\n  else {\n    return next_char(ib);\n  }\n}\n\nfunction checked_peek_char(ib) {\n  var c = peek_char(ib);\n  if (ib[/* eof */0]) {\n    throw Caml_builtin_exceptions.end_of_file;\n  }\n  return c;\n}\n\nfunction end_of_input(ib) {\n  peek_char(ib);\n  return ib[/* eof */0];\n}\n\nfunction beginning_of_input(ib) {\n  return +(ib[/* char_count */3] === 0);\n}\n\nfunction name_of_input(ib) {\n  var match = ib[/* input_name */8];\n  if (typeof match === \"number\") {\n    if (match) {\n      return \"unnamed function\";\n    }\n    else {\n      return \"unnamed character string\";\n    }\n  }\n  else if (match.tag) {\n    return \"unnamed pervasives input channel\";\n  }\n  else {\n    return match[0];\n  }\n}\n\nfunction char_count(ib) {\n  if (ib[/* current_char_is_valid */2]) {\n    return ib[/* char_count */3] - 1 | 0;\n  }\n  else {\n    return ib[/* char_count */3];\n  }\n}\n\nfunction token(ib) {\n  var tokbuf = ib[/* tokbuf */7];\n  var tok = Buffer.contents(tokbuf);\n  tokbuf[/* position */1] = 0;\n  ib[/* token_count */5] = ib[/* token_count */5] + 1 | 0;\n  return tok;\n}\n\nfunction ignore_char(width, ib) {\n  var width$1 = width - 1 | 0;\n  ib[/* current_char_is_valid */2] = /* false */0;\n  return width$1;\n}\n\nfunction store_char(width, ib, c) {\n  Buffer.add_char(ib[/* tokbuf */7], c);\n  return ignore_char(width, ib);\n}\n\nfunction create(iname, next) {\n  return /* record */[\n          /* eof : false */0,\n          /* current_char : \"\\000\" */0,\n          /* current_char_is_valid : false */0,\n          /* char_count */0,\n          /* line_count */0,\n          /* token_count */0,\n          /* get_next_char */next,\n          /* tokbuf */Buffer.create(1024),\n          /* input_name */iname\n        ];\n}\n\nfunction from_string(s) {\n  var i = [0];\n  var len = s.length;\n  var next = function () {\n    if (i[0] >= len) {\n      throw Caml_builtin_exceptions.end_of_file;\n    }\n    else {\n      var c = Caml_string.get(s, i[0]);\n      i[0] = i[0] + 1 | 0;\n      return c;\n    }\n  };\n  return create(/* From_string */0, next);\n}\n\nfunction from_function(param) {\n  return create(/* From_function */1, param);\n}\n\nvar file_buffer_size = [1024];\n\nfunction scan_close_at_end() {\n  (function () {\n        throw \"caml_ml_close_channel not implemented by bucklescript yet\\n\";\n      }());\n  throw Caml_builtin_exceptions.end_of_file;\n}\n\nfunction scan_raise_at_end() {\n  throw Caml_builtin_exceptions.end_of_file;\n}\n\nfunction from_ic(scan_close_ic, iname, ic) {\n  var len = file_buffer_size[0];\n  var buf = Caml_string.caml_create_string(len);\n  var i = [0];\n  var lim = [0];\n  var eof = [/* false */0];\n  var next = function () {\n    if (i[0] < lim[0]) {\n      var c = Caml_bytes.get(buf, i[0]);\n      i[0] = i[0] + 1 | 0;\n      return c;\n    }\n    else if (eof[0]) {\n      throw Caml_builtin_exceptions.end_of_file;\n    }\n    else {\n      lim[0] = Pervasives.input(ic, buf, 0, len);\n      if (lim[0]) {\n        i[0] = 1;\n        return Caml_bytes.get(buf, 0);\n      }\n      else {\n        eof[0] = /* true */1;\n        return Curry._1(scan_close_ic, ic);\n      }\n    }\n  };\n  return create(iname, next);\n}\n\nvar stdin = from_ic(scan_raise_at_end, /* From_file */Block.__(0, [\n        \"-\",\n        Pervasives.stdin\n      ]), Pervasives.stdin);\n\nfunction open_in(fname) {\n  if (fname === \"-\") {\n    return stdin;\n  }\n  else {\n    var ic = Pervasives.open_in(fname);\n    return from_ic(scan_close_at_end, /* From_file */Block.__(0, [\n                  fname,\n                  ic\n                ]), ic);\n  }\n}\n\nfunction open_in_bin(fname) {\n  if (fname === \"-\") {\n    return stdin;\n  }\n  else {\n    var ic = Pervasives.open_in_bin(fname);\n    return from_ic(scan_close_at_end, /* From_file */Block.__(0, [\n                  fname,\n                  ic\n                ]), ic);\n  }\n}\n\nvar memo = [/* [] */0];\n\nfunction memo_from_ic(scan_close_ic, ic) {\n  try {\n    return List.assq(ic, memo[0]);\n  }\n  catch (exn){\n    if (exn === Caml_builtin_exceptions.not_found) {\n      var ib = from_ic(scan_close_ic, /* From_channel */Block.__(1, [ic]), ic);\n      memo[0] = /* :: */[\n        /* tuple */[\n          ic,\n          ib\n        ],\n        memo[0]\n      ];\n      return ib;\n    }\n    else {\n      throw exn;\n    }\n  }\n}\n\nfunction from_channel(param) {\n  return memo_from_ic(scan_raise_at_end, param);\n}\n\nfunction close_in(ib) {\n  var match = ib[/* input_name */8];\n  if (typeof match === \"number\") {\n    return /* () */0;\n  }\n  else if (match.tag) {\n    return function () {\n              throw \"caml_ml_close_channel not implemented by bucklescript yet\\n\";\n            }();\n  }\n  else {\n    return function () {\n              throw \"caml_ml_close_channel not implemented by bucklescript yet\\n\";\n            }();\n  }\n}\n\nvar Scan_failure = Caml_exceptions.create(\"Scanf.Scan_failure\");\n\nfunction bad_input_escape(c) {\n  var s = Curry._1(Printf.sprintf(/* Format */[\n            /* String_literal */Block.__(11, [\n                \"illegal escape character \",\n                /* Caml_char */Block.__(1, [/* End_of_format */0])\n              ]),\n            \"illegal escape character %C\"\n          ]), c);\n  throw [\n        Scan_failure,\n        s\n      ];\n}\n\nfunction bad_token_length(message) {\n  var s = Curry._1(Printf.sprintf(/* Format */[\n            /* String_literal */Block.__(11, [\n                \"scanning of \",\n                /* String */Block.__(2, [\n                    /* No_padding */0,\n                    /* String_literal */Block.__(11, [\n                        \" failed: the specified length was too short for token\",\n                        /* End_of_format */0\n                      ])\n                  ])\n              ]),\n            \"scanning of %s failed: the specified length was too short for token\"\n          ]), message);\n  throw [\n        Scan_failure,\n        s\n      ];\n}\n\nfunction character_mismatch_err(c, ci) {\n  return Curry._2(Printf.sprintf(/* Format */[\n                  /* String_literal */Block.__(11, [\n                      \"looking for \",\n                      /* Caml_char */Block.__(1, [/* String_literal */Block.__(11, [\n                              \", found \",\n                              /* Caml_char */Block.__(1, [/* End_of_format */0])\n                            ])])\n                    ]),\n                  \"looking for %C, found %C\"\n                ]), c, ci);\n}\n\nfunction check_char(ib, _c) {\n  while(true) {\n    var c = _c;\n    if (c === /* \" \" */32) {\n      var ib$1 = ib;\n      while(true) {\n        var c$1 = peek_char(ib$1);\n        if (ib$1[/* eof */0]) {\n          return 0;\n        }\n        else {\n          var switcher = c$1 - 9 | 0;\n          if (switcher > 4 || switcher < 0) {\n            if (switcher !== 23) {\n              return /* () */0;\n            }\n            else {\n              ib$1[/* current_char_is_valid */2] = /* false */0;\n              continue ;\n              \n            }\n          }\n          else if (switcher === 3 || switcher === 2) {\n            return /* () */0;\n          }\n          else {\n            ib$1[/* current_char_is_valid */2] = /* false */0;\n            continue ;\n            \n          }\n        }\n      };\n    }\n    else {\n      var ci = checked_peek_char(ib);\n      if (ci === c) {\n        ib[/* current_char_is_valid */2] = /* false */0;\n        return /* () */0;\n      }\n      else if (ci !== 13) {\n        var s = character_mismatch_err(c, ci);\n        throw [\n              Scan_failure,\n              s\n            ];\n      }\n      else if (c === /* \"\\n\" */10) {\n        ib[/* current_char_is_valid */2] = /* false */0;\n        _c = /* \"\\n\" */10;\n        continue ;\n        \n      }\n      else {\n        var s$1 = character_mismatch_err(c, ci);\n        throw [\n              Scan_failure,\n              s$1\n            ];\n      }\n    }\n  };\n}\n\nfunction token_char(ib) {\n  return Caml_string.get(token(ib), 0);\n}\n\nfunction token_bool(ib) {\n  var s = token(ib);\n  switch (s) {\n    case \"false\" : \n        return /* false */0;\n    case \"true\" : \n        return /* true */1;\n    default:\n      var s$1 = Curry._1(Printf.sprintf(/* Format */[\n                /* String_literal */Block.__(11, [\n                    \"invalid boolean \",\n                    /* Caml_string */Block.__(3, [\n                        /* No_padding */0,\n                        /* End_of_format */0\n                      ])\n                  ]),\n                \"invalid boolean %S\"\n              ]), s);\n      throw [\n            Scan_failure,\n            s$1\n          ];\n  }\n}\n\nfunction token_int_literal(conv, ib) {\n  var tok;\n  var exit = 0;\n  var switcher = conv - 88 | 0;\n  if (switcher > 32 || switcher < 0) {\n    exit = 1;\n  }\n  else {\n    switch (switcher) {\n      case 10 : \n          tok = \"0b\" + token(ib);\n          break;\n      case 23 : \n          tok = \"0o\" + token(ib);\n          break;\n      case 12 : \n      case 17 : \n      case 29 : \n          tok = token(ib);\n          break;\n      case 1 : \n      case 2 : \n      case 3 : \n      case 4 : \n      case 5 : \n      case 6 : \n      case 7 : \n      case 8 : \n      case 9 : \n      case 11 : \n      case 13 : \n      case 14 : \n      case 15 : \n      case 16 : \n      case 18 : \n      case 19 : \n      case 20 : \n      case 21 : \n      case 22 : \n      case 24 : \n      case 25 : \n      case 26 : \n      case 27 : \n      case 28 : \n      case 30 : \n      case 31 : \n          exit = 1;\n          break;\n      case 0 : \n      case 32 : \n          tok = \"0x\" + token(ib);\n          break;\n      \n    }\n  }\n  if (exit === 1) {\n    throw [\n          Caml_builtin_exceptions.assert_failure,\n          [\n            \"scanf.ml\",\n            507,\n            11\n          ]\n        ];\n  }\n  var l = tok.length;\n  if (l === 0 || Caml_string.get(tok, 0) !== /* \"+\" */43) {\n    return tok;\n  }\n  else {\n    return $$String.sub(tok, 1, l - 1 | 0);\n  }\n}\n\nfunction token_float(ib) {\n  return Caml_format.caml_float_of_string(token(ib));\n}\n\nfunction scan_decimal_digits(_width, ib) {\n  while(true) {\n    var width = _width;\n    if (width) {\n      var c = peek_char(ib);\n      if (ib[/* eof */0]) {\n        return width;\n      }\n      else if (c >= 58) {\n        if (c !== 95) {\n          return width;\n        }\n        else {\n          var width$1 = ignore_char(width, ib);\n          _width = width$1;\n          continue ;\n          \n        }\n      }\n      else if (c >= 48) {\n        var width$2 = store_char(width, ib, c);\n        _width = width$2;\n        continue ;\n        \n      }\n      else {\n        return width;\n      }\n    }\n    else {\n      return width;\n    }\n  };\n}\n\nfunction scan_decimal_digits_plus(width, ib) {\n  if (width) {\n    var c = checked_peek_char(ib);\n    if (c > 57 || c < 48) {\n      var s = Curry._1(Printf.sprintf(/* Format */[\n                /* String_literal */Block.__(11, [\n                    \"character \",\n                    /* Caml_char */Block.__(1, [/* String_literal */Block.__(11, [\n                            \" is not a decimal digit\",\n                            /* End_of_format */0\n                          ])])\n                  ]),\n                \"character %C is not a decimal digit\"\n              ]), c);\n      throw [\n            Scan_failure,\n            s\n          ];\n    }\n    else {\n      var width$1 = store_char(width, ib, c);\n      return scan_decimal_digits(width$1, ib);\n    }\n  }\n  else {\n    return bad_token_length(\"decimal digits\");\n  }\n}\n\nfunction scan_digits_plus(basis, digitp, width, ib) {\n  if (width) {\n    var c = checked_peek_char(ib);\n    if (Curry._1(digitp, c)) {\n      var _width = store_char(width, ib, c);\n      while(true) {\n        var width$1 = _width;\n        if (width$1) {\n          var c$1 = peek_char(ib);\n          if (ib[/* eof */0]) {\n            return width$1;\n          }\n          else if (Curry._1(digitp, c$1)) {\n            _width = store_char(width$1, ib, c$1);\n            continue ;\n            \n          }\n          else if (c$1 !== 95) {\n            return width$1;\n          }\n          else {\n            _width = ignore_char(width$1, ib);\n            continue ;\n            \n          }\n        }\n        else {\n          return width$1;\n        }\n      };\n    }\n    else {\n      var s = Curry._2(Printf.sprintf(/* Format */[\n                /* String_literal */Block.__(11, [\n                    \"character \",\n                    /* Caml_char */Block.__(1, [/* String_literal */Block.__(11, [\n                            \" is not a valid \",\n                            /* String */Block.__(2, [\n                                /* No_padding */0,\n                                /* String_literal */Block.__(11, [\n                                    \" digit\",\n                                    /* End_of_format */0\n                                  ])\n                              ])\n                          ])])\n                  ]),\n                \"character %C is not a valid %s digit\"\n              ]), c, basis);\n      throw [\n            Scan_failure,\n            s\n          ];\n    }\n  }\n  else {\n    return bad_token_length(\"digits\");\n  }\n}\n\nfunction is_binary_digit(param) {\n  if (param === 49 || param === 48) {\n    return /* true */1;\n  }\n  else {\n    return /* false */0;\n  }\n}\n\nfunction scan_binary_int(param, param$1) {\n  return scan_digits_plus(\"binary\", is_binary_digit, param, param$1);\n}\n\nfunction is_octal_digit(param) {\n  if (param > 55 || param < 48) {\n    return /* false */0;\n  }\n  else {\n    return /* true */1;\n  }\n}\n\nfunction scan_octal_int(param, param$1) {\n  return scan_digits_plus(\"octal\", is_octal_digit, param, param$1);\n}\n\nfunction is_hexa_digit(param) {\n  var switcher = param - 48 | 0;\n  if (switcher > 22 || switcher < 0) {\n    if (switcher > 54 || switcher < 49) {\n      return /* false */0;\n    }\n    else {\n      return /* true */1;\n    }\n  }\n  else if (switcher > 16 || switcher < 10) {\n    return /* true */1;\n  }\n  else {\n    return /* false */0;\n  }\n}\n\nfunction scan_hexadecimal_int(param, param$1) {\n  return scan_digits_plus(\"hexadecimal\", is_hexa_digit, param, param$1);\n}\n\nfunction scan_sign(width, ib) {\n  var c = checked_peek_char(ib);\n  var switcher = c - 43 | 0;\n  if (switcher > 2 || switcher < 0) {\n    return width;\n  }\n  else {\n    switch (switcher) {\n      case 1 : \n          return width;\n      case 0 : \n      case 2 : \n          return store_char(width, ib, c);\n      \n    }\n  }\n}\n\nfunction scan_optionally_signed_decimal_int(width, ib) {\n  var width$1 = scan_sign(width, ib);\n  return scan_decimal_digits_plus(width$1, ib);\n}\n\nfunction scan_int_conv(conv, width, ib) {\n  var exit = 0;\n  var switcher = conv - 88 | 0;\n  if (switcher > 32 || switcher < 0) {\n    exit = 1;\n  }\n  else {\n    switch (switcher) {\n      case 10 : \n          return scan_binary_int(width, ib);\n      case 12 : \n          return scan_optionally_signed_decimal_int(width, ib);\n      case 17 : \n          var width$1 = width;\n          var ib$1 = ib;\n          var width$2 = scan_sign(width$1, ib$1);\n          var width$3 = width$2;\n          var ib$2 = ib$1;\n          var c = checked_peek_char(ib$2);\n          if (c !== 48) {\n            return scan_decimal_digits_plus(width$3, ib$2);\n          }\n          else {\n            var width$4 = store_char(width$3, ib$2, c);\n            if (width$4) {\n              var c$1 = peek_char(ib$2);\n              if (ib$2[/* eof */0]) {\n                return width$4;\n              }\n              else if (c$1 >= 99) {\n                if (c$1 !== 111) {\n                  if (c$1 !== 120) {\n                    return scan_decimal_digits(width$4, ib$2);\n                  }\n                  else {\n                    return scan_hexadecimal_int(store_char(width$4, ib$2, c$1), ib$2);\n                  }\n                }\n                else {\n                  return scan_octal_int(store_char(width$4, ib$2, c$1), ib$2);\n                }\n              }\n              else if (c$1 !== 88) {\n                if (c$1 >= 98) {\n                  return scan_binary_int(store_char(width$4, ib$2, c$1), ib$2);\n                }\n                else {\n                  return scan_decimal_digits(width$4, ib$2);\n                }\n              }\n              else {\n                return scan_hexadecimal_int(store_char(width$4, ib$2, c$1), ib$2);\n              }\n            }\n            else {\n              return width$4;\n            }\n          }\n      case 23 : \n          return scan_octal_int(width, ib);\n      case 29 : \n          return scan_decimal_digits_plus(width, ib);\n      case 1 : \n      case 2 : \n      case 3 : \n      case 4 : \n      case 5 : \n      case 6 : \n      case 7 : \n      case 8 : \n      case 9 : \n      case 11 : \n      case 13 : \n      case 14 : \n      case 15 : \n      case 16 : \n      case 18 : \n      case 19 : \n      case 20 : \n      case 21 : \n      case 22 : \n      case 24 : \n      case 25 : \n      case 26 : \n      case 27 : \n      case 28 : \n      case 30 : \n      case 31 : \n          exit = 1;\n          break;\n      case 0 : \n      case 32 : \n          return scan_hexadecimal_int(width, ib);\n      \n    }\n  }\n  if (exit === 1) {\n    throw [\n          Caml_builtin_exceptions.assert_failure,\n          [\n            \"scanf.ml\",\n            674,\n            9\n          ]\n        ];\n  }\n  \n}\n\nfunction scan_frac_part(width, ib) {\n  if (width) {\n    var c = peek_char(ib);\n    if (ib[/* eof */0] || c > 57 || c < 48) {\n      return width;\n    }\n    else {\n      return scan_decimal_digits(store_char(width, ib, c), ib);\n    }\n  }\n  else {\n    return width;\n  }\n}\n\nfunction scan_exp_part(width, ib) {\n  if (width) {\n    var c = peek_char(ib);\n    if (ib[/* eof */0] || c !== 69 && c !== 101) {\n      return width;\n    }\n    else {\n      return scan_optionally_signed_decimal_int(store_char(width, ib, c), ib);\n    }\n  }\n  else {\n    return width;\n  }\n}\n\nfunction scan_int_part(width, ib) {\n  var width$1 = scan_sign(width, ib);\n  return scan_decimal_digits(width$1, ib);\n}\n\nfunction scan_float(width, precision, ib) {\n  var width$1 = scan_int_part(width, ib);\n  if (width$1) {\n    var c = peek_char(ib);\n    if (ib[/* eof */0]) {\n      return /* tuple */[\n              width$1,\n              precision\n            ];\n    }\n    else if (c !== 46) {\n      return /* tuple */[\n              scan_exp_part(width$1, ib),\n              precision\n            ];\n    }\n    else {\n      var width$2 = store_char(width$1, ib, c);\n      var precision$1 = Pervasives.min(width$2, precision);\n      var width$3 = width$2 - (precision$1 - scan_frac_part(precision$1, ib) | 0) | 0;\n      return /* tuple */[\n              scan_exp_part(width$3, ib),\n              precision$1\n            ];\n    }\n  }\n  else {\n    return /* tuple */[\n            width$1,\n            precision\n          ];\n  }\n}\n\nfunction scan_caml_float(width, precision, ib) {\n  var width$1 = scan_optionally_signed_decimal_int(width, ib);\n  if (width$1) {\n    var c = peek_char(ib);\n    if (ib[/* eof */0]) {\n      throw [\n            Scan_failure,\n            \"no dot or exponent part found in float token\"\n          ];\n    }\n    else {\n      var switcher = c - 69 | 0;\n      if (switcher > 32 || switcher < 0) {\n        if (switcher !== -23) {\n          throw [\n                Scan_failure,\n                \"no dot or exponent part found in float token\"\n              ];\n        }\n        else {\n          var width$2 = store_char(width$1, ib, c);\n          var precision$1 = Pervasives.min(width$2, precision);\n          var width$3 = width$2 - (precision$1 - scan_frac_part(precision$1, ib) | 0) | 0;\n          return scan_exp_part(width$3, ib);\n        }\n      }\n      else if (switcher > 31 || switcher < 1) {\n        return scan_exp_part(width$1, ib);\n      }\n      else {\n        throw [\n              Scan_failure,\n              \"no dot or exponent part found in float token\"\n            ];\n      }\n    }\n  }\n  else {\n    throw [\n          Scan_failure,\n          \"no dot or exponent part found in float token\"\n        ];\n  }\n}\n\nfunction scan_string(stp, width, ib) {\n  var _width = width;\n  while(true) {\n    var width$1 = _width;\n    if (width$1) {\n      var c = peek_char(ib);\n      if (ib[/* eof */0]) {\n        return width$1;\n      }\n      else if (stp) {\n        if (c === stp[0]) {\n          ib[/* current_char_is_valid */2] = /* false */0;\n          return width$1;\n        }\n        else {\n          _width = store_char(width$1, ib, c);\n          continue ;\n          \n        }\n      }\n      else {\n        var switcher = c - 9 | 0;\n        if (switcher > 4 || switcher < 0) {\n          if (switcher !== 23) {\n            _width = store_char(width$1, ib, c);\n            continue ;\n            \n          }\n          else {\n            return width$1;\n          }\n        }\n        else if (switcher === 3 || switcher === 2) {\n          _width = store_char(width$1, ib, c);\n          continue ;\n          \n        }\n        else {\n          return width$1;\n        }\n      }\n    }\n    else {\n      return width$1;\n    }\n  };\n}\n\nfunction scan_char(width, ib) {\n  return store_char(width, ib, checked_peek_char(ib));\n}\n\nfunction char_for_backslash(c) {\n  if (c >= 110) {\n    if (c >= 117) {\n      return c;\n    }\n    else {\n      switch (c - 110 | 0) {\n        case 0 : \n            return /* \"\\n\" */10;\n        case 4 : \n            return /* \"\\r\" */13;\n        case 1 : \n        case 2 : \n        case 3 : \n        case 5 : \n            return c;\n        case 6 : \n            return /* \"\\t\" */9;\n        \n      }\n    }\n  }\n  else if (c !== 98) {\n    return c;\n  }\n  else {\n    return /* \"\\b\" */8;\n  }\n}\n\nfunction char_for_decimal_code(c0, c1, c2) {\n  var c = (Caml_int32.imul(100, c0 - /* \"0\" */48 | 0) + Caml_int32.imul(10, c1 - /* \"0\" */48 | 0) | 0) + (c2 - /* \"0\" */48 | 0) | 0;\n  if (c < 0 || c > 255) {\n    var s = Curry._3(Printf.sprintf(/* Format */[\n              /* String_literal */Block.__(11, [\n                  \"bad character decimal encoding \\\\\",\n                  /* Char */Block.__(0, [/* Char */Block.__(0, [/* Char */Block.__(0, [/* End_of_format */0])])])\n                ]),\n              \"bad character decimal encoding \\\\%c%c%c\"\n            ]), c0, c1, c2);\n    throw [\n          Scan_failure,\n          s\n        ];\n  }\n  else {\n    return Pervasives.char_of_int(c);\n  }\n}\n\nfunction hexadecimal_value_of_char(c) {\n  if (c >= /* \"a\" */97) {\n    return c - 87 | 0;\n  }\n  else if (c >= /* \"A\" */65) {\n    return c - 55 | 0;\n  }\n  else {\n    return c - /* \"0\" */48 | 0;\n  }\n}\n\nfunction char_for_hexadecimal_code(c1, c2) {\n  var c = (hexadecimal_value_of_char(c1) << 4) + hexadecimal_value_of_char(c2) | 0;\n  if (c < 0 || c > 255) {\n    var s = Curry._2(Printf.sprintf(/* Format */[\n              /* String_literal */Block.__(11, [\n                  \"bad character hexadecimal encoding \\\\\",\n                  /* Char */Block.__(0, [/* Char */Block.__(0, [/* End_of_format */0])])\n                ]),\n              \"bad character hexadecimal encoding \\\\%c%c\"\n            ]), c1, c2);\n    throw [\n          Scan_failure,\n          s\n        ];\n  }\n  else {\n    return Pervasives.char_of_int(c);\n  }\n}\n\nfunction check_next_char(message, width, ib) {\n  if (width) {\n    var c = peek_char(ib);\n    if (ib[/* eof */0]) {\n      var message$1 = message;\n      var s = Curry._1(Printf.sprintf(/* Format */[\n                /* String_literal */Block.__(11, [\n                    \"scanning of \",\n                    /* String */Block.__(2, [\n                        /* No_padding */0,\n                        /* String_literal */Block.__(11, [\n                            \" failed: premature end of file occurred before end of token\",\n                            /* End_of_format */0\n                          ])\n                      ])\n                  ]),\n                \"scanning of %s failed: premature end of file occurred before end of token\"\n              ]), message$1);\n      throw [\n            Scan_failure,\n            s\n          ];\n    }\n    else {\n      return c;\n    }\n  }\n  else {\n    return bad_token_length(message);\n  }\n}\n\nfunction scan_backslash_char(width, ib) {\n  var c = check_next_char(\"a Char\", width, ib);\n  var exit = 0;\n  if (c >= 40) {\n    if (c >= 58) {\n      var switcher = c - 92 | 0;\n      if (switcher > 28 || switcher < 0) {\n        return bad_input_escape(c);\n      }\n      else {\n        switch (switcher) {\n          case 0 : \n          case 6 : \n          case 18 : \n          case 22 : \n          case 24 : \n              exit = 1;\n              break;\n          case 1 : \n          case 2 : \n          case 3 : \n          case 4 : \n          case 5 : \n          case 7 : \n          case 8 : \n          case 9 : \n          case 10 : \n          case 11 : \n          case 12 : \n          case 13 : \n          case 14 : \n          case 15 : \n          case 16 : \n          case 17 : \n          case 19 : \n          case 20 : \n          case 21 : \n          case 23 : \n          case 25 : \n          case 26 : \n          case 27 : \n              return bad_input_escape(c);\n          case 28 : \n              var get_digit = function () {\n                var c = next_char(ib);\n                var switcher = c - 48 | 0;\n                if (switcher > 22 || switcher < 0) {\n                  if (switcher > 54 || switcher < 49) {\n                    return bad_input_escape(c);\n                  }\n                  else {\n                    return c;\n                  }\n                }\n                else if (switcher > 16 || switcher < 10) {\n                  return c;\n                }\n                else {\n                  return bad_input_escape(c);\n                }\n              };\n              var c1 = get_digit(/* () */0);\n              var c2 = get_digit(/* () */0);\n              return store_char(width - 2 | 0, ib, char_for_hexadecimal_code(c1, c2));\n          \n        }\n      }\n    }\n    else if (c >= 48) {\n      var get_digit$1 = function () {\n        var c = next_char(ib);\n        if (c > 57 || c < 48) {\n          return bad_input_escape(c);\n        }\n        else {\n          return c;\n        }\n      };\n      var c1$1 = get_digit$1(/* () */0);\n      var c2$1 = get_digit$1(/* () */0);\n      return store_char(width - 2 | 0, ib, char_for_decimal_code(c, c1$1, c2$1));\n    }\n    else {\n      return bad_input_escape(c);\n    }\n  }\n  else if (c !== 34) {\n    if (c >= 39) {\n      exit = 1;\n    }\n    else {\n      return bad_input_escape(c);\n    }\n  }\n  else {\n    exit = 1;\n  }\n  if (exit === 1) {\n    return store_char(width, ib, char_for_backslash(c));\n  }\n  \n}\n\nfunction scan_caml_char(width, ib) {\n  var find_stop = function (width) {\n    var c = check_next_char(\"a Char\", width, ib);\n    if (c !== 39) {\n      var s = character_mismatch_err(/* \"'\" */39, c);\n      throw [\n            Scan_failure,\n            s\n          ];\n    }\n    else {\n      return ignore_char(width, ib);\n    }\n  };\n  var width$1 = width;\n  var c = checked_peek_char(ib);\n  if (c !== 39) {\n    var s = character_mismatch_err(/* \"'\" */39, c);\n    throw [\n          Scan_failure,\n          s\n        ];\n  }\n  else {\n    var width$2 = ignore_char(width$1, ib);\n    var c$1 = check_next_char(\"a Char\", width$2, ib);\n    if (c$1 !== 92) {\n      return find_stop(store_char(width$2, ib, c$1));\n    }\n    else {\n      return find_stop(scan_backslash_char(ignore_char(width$2, ib), ib));\n    }\n  }\n}\n\nfunction scan_caml_string(width, ib) {\n  var find_stop = function (_width) {\n    while(true) {\n      var width = _width;\n      var c = check_next_char(\"a String\", width, ib);\n      if (c !== 34) {\n        if (c !== 92) {\n          _width = store_char(width, ib, c);\n          continue ;\n          \n        }\n        else {\n          var width$1 = ignore_char(width, ib);\n          var match = check_next_char(\"a String\", width$1, ib);\n          if (match !== 10) {\n            if (match !== 13) {\n              return find_stop(scan_backslash_char(width$1, ib));\n            }\n            else {\n              var width$2 = ignore_char(width$1, ib);\n              var match$1 = check_next_char(\"a String\", width$2, ib);\n              if (match$1 !== 10) {\n                return find_stop(store_char(width$2, ib, /* \"\\r\" */13));\n              }\n              else {\n                return skip_spaces(ignore_char(width$2, ib));\n              }\n            }\n          }\n          else {\n            return skip_spaces(ignore_char(width$1, ib));\n          }\n        }\n      }\n      else {\n        return ignore_char(width, ib);\n      }\n    };\n  };\n  var skip_spaces = function (_width) {\n    while(true) {\n      var width = _width;\n      var match = check_next_char(\"a String\", width, ib);\n      if (match !== 32) {\n        return find_stop(width);\n      }\n      else {\n        _width = ignore_char(width, ib);\n        continue ;\n        \n      }\n    };\n  };\n  var width$1 = width;\n  var c = checked_peek_char(ib);\n  if (c !== 34) {\n    var s = character_mismatch_err(/* \"\\\"\" */34, c);\n    throw [\n          Scan_failure,\n          s\n        ];\n  }\n  else {\n    return find_stop(ignore_char(width$1, ib));\n  }\n}\n\nfunction scan_bool(ib) {\n  var c = checked_peek_char(ib);\n  var m;\n  if (c !== 102) {\n    if (c !== 116) {\n      var s = Curry._1(Printf.sprintf(/* Format */[\n                /* String_literal */Block.__(11, [\n                    \"the character \",\n                    /* Caml_char */Block.__(1, [/* String_literal */Block.__(11, [\n                            \" cannot start a boolean\",\n                            /* End_of_format */0\n                          ])])\n                  ]),\n                \"the character %C cannot start a boolean\"\n              ]), c);\n      throw [\n            Scan_failure,\n            s\n          ];\n    }\n    else {\n      m = 4;\n    }\n  }\n  else {\n    m = 5;\n  }\n  return scan_string(/* None */0, m, ib);\n}\n\nfunction scan_chars_in_char_set(char_set, scan_indic, width, ib) {\n  var scan_chars = function (_i, stp) {\n    while(true) {\n      var i = _i;\n      var c = peek_char(ib);\n      if (i > 0 && !ib[/* eof */0] && CamlinternalFormat.is_in_char_set(char_set, c) && c !== stp) {\n        store_char(Pervasives.max_int, ib, c);\n        _i = i - 1 | 0;\n        continue ;\n        \n      }\n      else {\n        return 0;\n      }\n    };\n  };\n  if (scan_indic) {\n    var c = scan_indic[0];\n    scan_chars(width, c);\n    if (ib[/* eof */0]) {\n      return 0;\n    }\n    else {\n      var ci = peek_char(ib);\n      if (c === ci) {\n        ib[/* current_char_is_valid */2] = /* false */0;\n        return /* () */0;\n      }\n      else {\n        var s = character_mismatch_err(c, ci);\n        throw [\n              Scan_failure,\n              s\n            ];\n      }\n    }\n  }\n  else {\n    return scan_chars(width, -1);\n  }\n}\n\nfunction scanf_bad_input(ib, x) {\n  var exit = 0;\n  var s;\n  if (x[0] === Scan_failure) {\n    s = x[1];\n    exit = 1;\n  }\n  else if (x[0] === Caml_builtin_exceptions.failure) {\n    s = x[1];\n    exit = 1;\n  }\n  else {\n    throw x;\n  }\n  if (exit === 1) {\n    var i = char_count(ib);\n    var s$1 = Curry._2(Printf.sprintf(/* Format */[\n              /* String_literal */Block.__(11, [\n                  \"scanf: bad input at char number \",\n                  /* Int */Block.__(4, [\n                      /* Int_i */3,\n                      /* No_padding */0,\n                      /* No_precision */0,\n                      /* String_literal */Block.__(11, [\n                          \": \",\n                          /* Caml_string */Block.__(3, [\n                              /* No_padding */0,\n                              /* End_of_format */0\n                            ])\n                        ])\n                    ])\n                ]),\n              \"scanf: bad input at char number %i: %S\"\n            ]), i, s);\n    throw [\n          Scan_failure,\n          s$1\n        ];\n  }\n  \n}\n\nfunction get_counter(ib, counter) {\n  switch (counter) {\n    case 0 : \n        return ib[/* line_count */4];\n    case 1 : \n        return char_count(ib);\n    case 2 : \n        return ib[/* token_count */5];\n    \n  }\n}\n\nfunction width_of_pad_opt(pad_opt) {\n  if (pad_opt) {\n    return pad_opt[0];\n  }\n  else {\n    return Pervasives.max_int;\n  }\n}\n\nfunction stopper_of_formatting_lit(fmting) {\n  if (fmting === /* Escaped_percent */6) {\n    return /* tuple */[\n            /* \"%\" */37,\n            \"\"\n          ];\n  }\n  else {\n    var str = CamlinternalFormat.string_of_formatting_lit(fmting);\n    var stp = Caml_string.get(str, 1);\n    var sub_str = $$String.sub(str, 2, str.length - 2 | 0);\n    return /* tuple */[\n            stp,\n            sub_str\n          ];\n  }\n}\n\nfunction take_format_readers(k, _fmt) {\n  while(true) {\n    var fmt = _fmt;\n    if (typeof fmt === \"number\") {\n      return Curry._1(k, /* Nil */0);\n    }\n    else {\n      switch (fmt.tag | 0) {\n        case 4 : \n        case 5 : \n        case 6 : \n        case 7 : \n        case 8 : \n            _fmt = fmt[3];\n            continue ;\n            case 14 : \n            return take_fmtty_format_readers(k, CamlinternalFormatBasics.erase_rel(CamlinternalFormat.symm(fmt[1])), fmt[2]);\n        case 18 : \n            var match = fmt[0];\n            if (match.tag) {\n              _fmt = CamlinternalFormatBasics.concat_fmt(match[0][0], fmt[1]);\n              continue ;\n              \n            }\n            else {\n              _fmt = CamlinternalFormatBasics.concat_fmt(match[0][0], fmt[1]);\n              continue ;\n              \n            }\n            break;\n        case 19 : \n            var fmt_rest = fmt[0];\n            return (function(fmt_rest){\n            return function (reader) {\n              var new_k = function (readers_rest) {\n                return Curry._1(k, /* Cons */[\n                            reader,\n                            readers_rest\n                          ]);\n              };\n              return take_format_readers(new_k, fmt_rest);\n            }\n            }(fmt_rest));\n        case 2 : \n        case 3 : \n        case 11 : \n        case 12 : \n        case 17 : \n        case 21 : \n            _fmt = fmt[1];\n            continue ;\n            case 0 : \n        case 1 : \n        case 9 : \n        case 10 : \n        case 15 : \n        case 16 : \n        case 22 : \n            _fmt = fmt[0];\n            continue ;\n            case 23 : \n            var k$1 = k;\n            var ign = fmt[0];\n            var fmt$1 = fmt[1];\n            if (typeof ign === \"number\") {\n              switch (ign) {\n                case 3 : \n                    return (function(k$1,fmt$1){\n                    return function (reader) {\n                      var new_k = function (readers_rest) {\n                        return Curry._1(k$1, /* Cons */[\n                                    reader,\n                                    readers_rest\n                                  ]);\n                      };\n                      return take_format_readers(new_k, fmt$1);\n                    }\n                    }(k$1,fmt$1));\n                case 0 : \n                case 1 : \n                case 2 : \n                case 4 : \n                    return take_format_readers(k$1, fmt$1);\n                \n              }\n            }\n            else {\n              switch (ign.tag | 0) {\n                case 8 : \n                    return take_fmtty_format_readers(k$1, ign[1], fmt$1);\n                case 0 : \n                case 1 : \n                case 2 : \n                case 3 : \n                case 4 : \n                case 5 : \n                case 6 : \n                case 7 : \n                case 9 : \n                case 10 : \n                    return take_format_readers(k$1, fmt$1);\n                \n              }\n            }\n        case 13 : \n        case 20 : \n        case 24 : \n            _fmt = fmt[2];\n            continue ;\n            \n      }\n    }\n  };\n}\n\nfunction take_fmtty_format_readers(k, _fmtty, fmt) {\n  while(true) {\n    var fmtty = _fmtty;\n    if (typeof fmtty === \"number\") {\n      return take_format_readers(k, fmt);\n    }\n    else {\n      switch (fmtty.tag | 0) {\n        case 8 : \n            _fmtty = fmtty[1];\n            continue ;\n            case 9 : \n            var ty = CamlinternalFormat.trans(CamlinternalFormat.symm(fmtty[0]), fmtty[1]);\n            _fmtty = CamlinternalFormatBasics.concat_fmtty(ty, fmtty[2]);\n            continue ;\n            case 0 : \n        case 1 : \n        case 2 : \n        case 3 : \n        case 4 : \n        case 5 : \n        case 6 : \n        case 7 : \n        case 10 : \n        case 11 : \n        case 12 : \n            _fmtty = fmtty[0];\n            continue ;\n            case 13 : \n            var fmt_rest = fmtty[0];\n            return (function(fmt_rest){\n            return function (reader) {\n              var new_k = function (readers_rest) {\n                return Curry._1(k, /* Cons */[\n                            reader,\n                            readers_rest\n                          ]);\n              };\n              return take_fmtty_format_readers(new_k, fmt_rest, fmt);\n            }\n            }(fmt_rest));\n        case 14 : \n            var fmt_rest$1 = fmtty[0];\n            return (function(fmt_rest$1){\n            return function (reader) {\n              var new_k = function (readers_rest) {\n                return Curry._1(k, /* Cons */[\n                            reader,\n                            readers_rest\n                          ]);\n              };\n              return take_fmtty_format_readers(new_k, fmt_rest$1, fmt);\n            }\n            }(fmt_rest$1));\n        \n      }\n    }\n  };\n}\n\nfunction make_scanf(ib, _fmt, readers) {\n  while(true) {\n    var fmt = _fmt;\n    if (typeof fmt === \"number\") {\n      return /* Nil */0;\n    }\n    else {\n      switch (fmt.tag | 0) {\n        case 0 : \n            scan_char(0, ib);\n            var c = token_char(ib);\n            return /* Cons */[\n                    c,\n                    make_scanf(ib, fmt[0], readers)\n                  ];\n        case 1 : \n            scan_caml_char(0, ib);\n            var c$1 = token_char(ib);\n            return /* Cons */[\n                    c$1,\n                    make_scanf(ib, fmt[0], readers)\n                  ];\n        case 2 : \n            var rest = fmt[1];\n            var pad = fmt[0];\n            var exit = 0;\n            if (typeof rest === \"number\") {\n              exit = 1;\n            }\n            else {\n              switch (rest.tag | 0) {\n                case 17 : \n                    var match = stopper_of_formatting_lit(rest[0]);\n                    var stp = match[0];\n                    var scan = (function(stp){\n                    return function (width, _, ib) {\n                      return scan_string(/* Some */[stp], width, ib);\n                    }\n                    }(stp));\n                    var str_rest_000 = match[1];\n                    var str_rest_001 = rest[1];\n                    var str_rest = /* String_literal */Block.__(11, [\n                        str_rest_000,\n                        str_rest_001\n                      ]);\n                    return pad_prec_scanf(ib, str_rest, readers, pad, /* No_precision */0, scan, token);\n                case 18 : \n                    var match$1 = rest[0];\n                    if (match$1.tag) {\n                      var scan$1 = function (width, _, ib) {\n                        return scan_string(/* Some */[/* \"[\" */91], width, ib);\n                      };\n                      return pad_prec_scanf(ib, CamlinternalFormatBasics.concat_fmt(match$1[0][0], rest[1]), readers, pad, /* No_precision */0, scan$1, token);\n                    }\n                    else {\n                      var scan$2 = function (width, _, ib) {\n                        return scan_string(/* Some */[/* \"{\" */123], width, ib);\n                      };\n                      return pad_prec_scanf(ib, CamlinternalFormatBasics.concat_fmt(match$1[0][0], rest[1]), readers, pad, /* No_precision */0, scan$2, token);\n                    }\n                    break;\n                default:\n                  exit = 1;\n              }\n            }\n            if (exit === 1) {\n              var scan$3 = function (width, _, ib) {\n                return scan_string(/* None */0, width, ib);\n              };\n              return pad_prec_scanf(ib, rest, readers, pad, /* No_precision */0, scan$3, token);\n            }\n            break;\n        case 3 : \n            var scan$4 = function (width, _, ib) {\n              return scan_caml_string(width, ib);\n            };\n            return pad_prec_scanf(ib, fmt[1], readers, fmt[0], /* No_precision */0, scan$4, token);\n        case 4 : \n            var c$2 = CamlinternalFormat.char_of_iconv(fmt[0]);\n            var scan$5 = (function(c$2){\n            return function (width, _, ib) {\n              return scan_int_conv(c$2, width, ib);\n            }\n            }(c$2));\n            return pad_prec_scanf(ib, fmt[3], readers, fmt[1], fmt[2], scan$5, (function(c$2){\n                      return function (param) {\n                        return Caml_format.caml_int_of_string(token_int_literal(c$2, param));\n                      }\n                      }(c$2)));\n        case 5 : \n            var c$3 = CamlinternalFormat.char_of_iconv(fmt[0]);\n            var scan$6 = (function(c$3){\n            return function (width, _, ib) {\n              return scan_int_conv(c$3, width, ib);\n            }\n            }(c$3));\n            return pad_prec_scanf(ib, fmt[3], readers, fmt[1], fmt[2], scan$6, (function(c$3){\n                      return function (param) {\n                        return Caml_format.caml_int32_of_string(token_int_literal(c$3, param));\n                      }\n                      }(c$3)));\n        case 6 : \n            var c$4 = CamlinternalFormat.char_of_iconv(fmt[0]);\n            var scan$7 = (function(c$4){\n            return function (width, _, ib) {\n              return scan_int_conv(c$4, width, ib);\n            }\n            }(c$4));\n            return pad_prec_scanf(ib, fmt[3], readers, fmt[1], fmt[2], scan$7, (function(c$4){\n                      return function (param) {\n                        return Caml_format.caml_nativeint_of_string(token_int_literal(c$4, param));\n                      }\n                      }(c$4)));\n        case 7 : \n            var c$5 = CamlinternalFormat.char_of_iconv(fmt[0]);\n            var scan$8 = (function(c$5){\n            return function (width, _, ib) {\n              return scan_int_conv(c$5, width, ib);\n            }\n            }(c$5));\n            return pad_prec_scanf(ib, fmt[3], readers, fmt[1], fmt[2], scan$8, (function(c$5){\n                      return function (param) {\n                        return Caml_format.caml_int64_of_string(token_int_literal(c$5, param));\n                      }\n                      }(c$5)));\n        case 8 : \n            if (fmt[0] >= 15) {\n              return pad_prec_scanf(ib, fmt[3], readers, fmt[1], fmt[2], scan_caml_float, token_float);\n            }\n            else {\n              return pad_prec_scanf(ib, fmt[3], readers, fmt[1], fmt[2], scan_float, token_float);\n            }\n        case 9 : \n            scan_bool(ib);\n            var b = token_bool(ib);\n            return /* Cons */[\n                    b,\n                    make_scanf(ib, fmt[0], readers)\n                  ];\n        case 10 : \n            if (end_of_input(ib)) {\n              _fmt = fmt[0];\n              continue ;\n              \n            }\n            else {\n              throw [\n                    Scan_failure,\n                    \"end of input not found\"\n                  ];\n            }\n            break;\n        case 11 : \n            var f = function (param) {\n              return check_char(ib, param);\n            };\n            Bytes.iter(f, Caml_string.bytes_of_string(fmt[0]));\n            _fmt = fmt[1];\n            continue ;\n            case 12 : \n            check_char(ib, fmt[0]);\n            _fmt = fmt[1];\n            continue ;\n            case 13 : \n            scan_caml_string(width_of_pad_opt(fmt[0]), ib);\n            var s = token(ib);\n            var fmt$1;\n            try {\n              fmt$1 = CamlinternalFormat.format_of_string_fmtty(s, fmt[1]);\n            }\n            catch (exn){\n              if (exn[0] === Caml_builtin_exceptions.failure) {\n                throw [\n                      Scan_failure,\n                      exn[1]\n                    ];\n              }\n              else {\n                throw exn;\n              }\n            }\n            return /* Cons */[\n                    fmt$1,\n                    make_scanf(ib, fmt[2], readers)\n                  ];\n        case 14 : \n            var fmtty = fmt[1];\n            scan_caml_string(width_of_pad_opt(fmt[0]), ib);\n            var s$1 = token(ib);\n            var match$2;\n            try {\n              var match$3 = CamlinternalFormat.fmt_ebb_of_string(/* None */0, s$1);\n              var match$4 = CamlinternalFormat.fmt_ebb_of_string(/* None */0, s$1);\n              match$2 = /* tuple */[\n                CamlinternalFormat.type_format(match$3[0], CamlinternalFormatBasics.erase_rel(fmtty)),\n                CamlinternalFormat.type_format(match$4[0], CamlinternalFormatBasics.erase_rel(CamlinternalFormat.symm(fmtty)))\n              ];\n            }\n            catch (exn$1){\n              if (exn$1[0] === Caml_builtin_exceptions.failure) {\n                throw [\n                      Scan_failure,\n                      exn$1[1]\n                    ];\n              }\n              else {\n                throw exn$1;\n              }\n            }\n            return /* Cons */[\n                    /* Format */[\n                      match$2[0],\n                      s$1\n                    ],\n                    make_scanf(ib, CamlinternalFormatBasics.concat_fmt(match$2[1], fmt[2]), readers)\n                  ];\n        case 15 : \n            throw [\n                  Caml_builtin_exceptions.invalid_argument,\n                  'scanf: bad conversion \"%a\"'\n                ];\n        case 16 : \n            throw [\n                  Caml_builtin_exceptions.invalid_argument,\n                  'scanf: bad conversion \"%t\"'\n                ];\n        case 17 : \n            var s$2 = CamlinternalFormat.string_of_formatting_lit(fmt[0]);\n            var f$1 = function (param) {\n              return check_char(ib, param);\n            };\n            Bytes.iter(f$1, Caml_string.bytes_of_string(s$2));\n            _fmt = fmt[1];\n            continue ;\n            case 18 : \n            var match$5 = fmt[0];\n            check_char(ib, /* \"@\" */64);\n            if (match$5.tag) {\n              check_char(ib, /* \"[\" */91);\n              _fmt = CamlinternalFormatBasics.concat_fmt(match$5[0][0], fmt[1]);\n              continue ;\n              \n            }\n            else {\n              check_char(ib, /* \"{\" */123);\n              _fmt = CamlinternalFormatBasics.concat_fmt(match$5[0][0], fmt[1]);\n              continue ;\n              \n            }\n            break;\n        case 19 : \n            var x = Curry._1(readers[0], ib);\n            return /* Cons */[\n                    x,\n                    make_scanf(ib, fmt[0], readers[1])\n                  ];\n        case 20 : \n            var rest$1 = fmt[2];\n            var char_set = fmt[1];\n            var width_opt = fmt[0];\n            var exit$1 = 0;\n            if (typeof rest$1 === \"number\") {\n              exit$1 = 1;\n            }\n            else if (rest$1.tag === 17) {\n              var match$6 = stopper_of_formatting_lit(rest$1[0]);\n              var width = width_of_pad_opt(width_opt);\n              scan_chars_in_char_set(char_set, /* Some */[match$6[0]], width, ib);\n              var s$3 = token(ib);\n              var str_rest_000$1 = match$6[1];\n              var str_rest_001$1 = rest$1[1];\n              var str_rest$1 = /* String_literal */Block.__(11, [\n                  str_rest_000$1,\n                  str_rest_001$1\n                ]);\n              return /* Cons */[\n                      s$3,\n                      make_scanf(ib, str_rest$1, readers)\n                    ];\n            }\n            else {\n              exit$1 = 1;\n            }\n            if (exit$1 === 1) {\n              var width$1 = width_of_pad_opt(width_opt);\n              scan_chars_in_char_set(char_set, /* None */0, width$1, ib);\n              var s$4 = token(ib);\n              return /* Cons */[\n                      s$4,\n                      make_scanf(ib, rest$1, readers)\n                    ];\n            }\n            break;\n        case 21 : \n            var count = get_counter(ib, fmt[0]);\n            return /* Cons */[\n                    count,\n                    make_scanf(ib, fmt[1], readers)\n                  ];\n        case 22 : \n            var c$6 = checked_peek_char(ib);\n            return /* Cons */[\n                    c$6,\n                    make_scanf(ib, fmt[0], readers)\n                  ];\n        case 23 : \n            var match$7 = CamlinternalFormat.param_format_of_ignored_format(fmt[0], fmt[1]);\n            var match$8 = make_scanf(ib, match$7[0], readers);\n            if (match$8) {\n              return match$8[1];\n            }\n            else {\n              throw [\n                    Caml_builtin_exceptions.assert_failure,\n                    [\n                      \"scanf.ml\",\n                      1258,\n                      13\n                    ]\n                  ];\n            }\n            break;\n        case 24 : \n            throw [\n                  Caml_builtin_exceptions.invalid_argument,\n                  'scanf: bad conversion \"%?\" (custom converter)'\n                ];\n        \n      }\n    }\n  };\n}\n\nfunction pad_prec_scanf(ib, fmt, readers, pad, prec, scan, token) {\n  if (typeof pad === \"number\") {\n    if (typeof prec === \"number\") {\n      if (prec !== 0) {\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              'scanf: bad conversion \"%*\"'\n            ];\n      }\n      else {\n        Curry._3(scan, Pervasives.max_int, Pervasives.max_int, ib);\n        var x = Curry._1(token, ib);\n        return /* Cons */[\n                x,\n                make_scanf(ib, fmt, readers)\n              ];\n      }\n    }\n    else {\n      Curry._3(scan, Pervasives.max_int, prec[0], ib);\n      var x$1 = Curry._1(token, ib);\n      return /* Cons */[\n              x$1,\n              make_scanf(ib, fmt, readers)\n            ];\n    }\n  }\n  else if (pad.tag) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          'scanf: bad conversion \"%*\"'\n        ];\n  }\n  else if (pad[0] !== 0) {\n    var w = pad[1];\n    if (typeof prec === \"number\") {\n      if (prec !== 0) {\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              'scanf: bad conversion \"%*\"'\n            ];\n      }\n      else {\n        Curry._3(scan, w, Pervasives.max_int, ib);\n        var x$2 = Curry._1(token, ib);\n        return /* Cons */[\n                x$2,\n                make_scanf(ib, fmt, readers)\n              ];\n      }\n    }\n    else {\n      Curry._3(scan, w, prec[0], ib);\n      var x$3 = Curry._1(token, ib);\n      return /* Cons */[\n              x$3,\n              make_scanf(ib, fmt, readers)\n            ];\n    }\n  }\n  else {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          'scanf: bad conversion \"%-\"'\n        ];\n  }\n}\n\nfunction kscanf(ib, ef, param) {\n  var str = param[1];\n  var fmt = param[0];\n  var k = function (readers, f) {\n    Buffer.reset(ib[/* tokbuf */7]);\n    var match;\n    try {\n      match = /* Args */Block.__(0, [make_scanf(ib, fmt, readers)]);\n    }\n    catch (exc){\n      if (exc[0] === Scan_failure) {\n        match = /* Exc */Block.__(1, [exc]);\n      }\n      else if (exc[0] === Caml_builtin_exceptions.failure) {\n        match = /* Exc */Block.__(1, [exc]);\n      }\n      else if (exc === Caml_builtin_exceptions.end_of_file) {\n        match = /* Exc */Block.__(1, [exc]);\n      }\n      else if (exc[0] === Caml_builtin_exceptions.invalid_argument) {\n        var s = exc[1] + (' in format \"' + ($$String.escaped(str) + '\"'));\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              s\n            ];\n      }\n      else {\n        throw exc;\n      }\n    }\n    if (match.tag) {\n      return Curry._2(ef, ib, match[0]);\n    }\n    else {\n      var _f = f;\n      var _args = match[0];\n      while(true) {\n        var args = _args;\n        var f$1 = _f;\n        if (args) {\n          _args = args[1];\n          _f = Curry._1(f$1, args[0]);\n          continue ;\n          \n        }\n        else {\n          return f$1;\n        }\n      };\n    }\n  };\n  return take_format_readers(k, fmt);\n}\n\nfunction ksscanf(s, ef, fmt) {\n  return kscanf(from_string(s), ef, fmt);\n}\n\nfunction kfscanf(ic, ef, fmt) {\n  return kscanf(memo_from_ic(scan_raise_at_end, ic), ef, fmt);\n}\n\nfunction bscanf(ib, fmt) {\n  return kscanf(ib, scanf_bad_input, fmt);\n}\n\nfunction fscanf(ic, fmt) {\n  return kscanf(memo_from_ic(scan_raise_at_end, ic), scanf_bad_input, fmt);\n}\n\nfunction sscanf(s, fmt) {\n  return kscanf(from_string(s), scanf_bad_input, fmt);\n}\n\nfunction scanf(fmt) {\n  return kscanf(stdin, scanf_bad_input, fmt);\n}\n\nfunction bscanf_format(ib, format, f) {\n  scan_caml_string(Pervasives.max_int, ib);\n  var str = token(ib);\n  var $js;\n  try {\n    $js = CamlinternalFormat.format_of_string_format(str, format);\n  }\n  catch (exn){\n    if (exn[0] === Caml_builtin_exceptions.failure) {\n      throw [\n            Scan_failure,\n            exn[1]\n          ];\n    }\n    else {\n      throw exn;\n    }\n  }\n  return Curry._1(f, $js);\n}\n\nfunction sscanf_format(s, format, f) {\n  return bscanf_format(from_string(s), format, f);\n}\n\nfunction string_to_String(s) {\n  var l = s.length;\n  var b = Buffer.create(l + 2 | 0);\n  Buffer.add_char(b, /* \"\\\"\" */34);\n  for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n    var c = Caml_string.get(s, i);\n    if (c === /* \"\\\"\" */34) {\n      Buffer.add_char(b, /* \"\\\\\" */92);\n    }\n    Buffer.add_char(b, c);\n  }\n  Buffer.add_char(b, /* \"\\\"\" */34);\n  return Buffer.contents(b);\n}\n\nfunction format_from_string(s, fmt) {\n  return sscanf_format(string_to_String(s), fmt, function (x) {\n              return x;\n            });\n}\n\nfunction unescaped(s) {\n  return Curry._1(sscanf('\"' + (s + '\"'), /* Format */[\n                  /* Caml_string */Block.__(3, [\n                      /* No_padding */0,\n                      /* Flush */Block.__(10, [/* End_of_format */0])\n                    ]),\n                  \"%S%!\"\n                ]), function (x) {\n              return x;\n            });\n}\n\nvar Scanning = [\n  stdin,\n  open_in,\n  open_in_bin,\n  close_in,\n  open_in,\n  open_in_bin,\n  from_string,\n  from_function,\n  from_channel,\n  end_of_input,\n  beginning_of_input,\n  name_of_input,\n  stdin\n];\n\nexports.Scanning           = Scanning;\nexports.Scan_failure       = Scan_failure;\nexports.bscanf             = bscanf;\nexports.fscanf             = fscanf;\nexports.sscanf             = sscanf;\nexports.scanf              = scanf;\nexports.kscanf             = kscanf;\nexports.ksscanf            = ksscanf;\nexports.kfscanf            = kfscanf;\nexports.bscanf_format      = bscanf_format;\nexports.sscanf_format      = sscanf_format;\nexports.format_from_string = format_from_string;\nexports.unescaped          = unescaped;\n/* stdin Not a pure module */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/scanf.js\n ** module id = 28\n ** module chunks = 0 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/scanf.js?");

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	eval("// Generated by BUCKLESCRIPT VERSION 1.0.1 , PLEASE EDIT WITH CARE\n'use strict';\n\nvar Block = __webpack_require__(1);\n\nvar grammar = /* record */[\n  /* lineComment : Some */[\";\"],\n  /* blockComment : Some */[/* tuple */[\n      \"/*\",\n      \"*/\"\n    ]],\n  /* rules : :: */[\n    /* tuple */[\n      \"Start\",\n      /* record */[\n        /* passThrough : false */0,\n        /* ignoreNewlines : Inherit */2,\n        /* leaf : false */0,\n        /* choices : :: */[\n          /* tuple */[\n            \"\",\n            \"\",\n            /* :: */[\n              /* Star */Block.__(0, [/* NonTerminal */Block.__(10, [\n                      \"Rule\",\n                      /* None */0\n                    ])]),\n              /* [] */0\n            ]\n          ],\n          /* [] */0\n        ]\n      ]\n    ],\n    /* :: */[\n      /* tuple */[\n        \"Decorator\",\n        /* record */[\n          /* passThrough : false */0,\n          /* ignoreNewlines : Inherit */2,\n          /* leaf : false */0,\n          /* choices : :: */[\n            /* tuple */[\n              \"\",\n              \"\",\n              /* :: */[\n                /* Terminal */Block.__(11, [\n                    \"@\",\n                    /* None */0\n                  ]),\n                /* :: */[\n                  /* NonTerminal */Block.__(10, [\n                      \"ident\",\n                      /* Some */[\"name\"]\n                    ]),\n                  /* :: */[\n                    /* Optional */Block.__(2, [/* Group */Block.__(6, [/* :: */[\n                              /* Terminal */Block.__(11, [\n                                  \"(\",\n                                  /* None */0\n                                ]),\n                              /* :: */[\n                                /* Star */Block.__(0, [/* Group */Block.__(6, [/* :: */[\n                                          /* NonTerminal */Block.__(10, [\n                                              \"decarg\",\n                                              /* Some */[\"args\"]\n                                            ]),\n                                          /* :: */[\n                                            /* Terminal */Block.__(11, [\n                                                \",\",\n                                                /* None */0\n                                              ]),\n                                            /* [] */0\n                                          ]\n                                        ]])]),\n                                /* :: */[\n                                  /* Optional */Block.__(2, [/* NonTerminal */Block.__(10, [\n                                          \"decarg\",\n                                          /* Some */[\"args\"]\n                                        ])]),\n                                  /* :: */[\n                                    /* Terminal */Block.__(11, [\n                                        \")\",\n                                        /* None */0\n                                      ]),\n                                    /* [] */0\n                                  ]\n                                ]\n                              ]\n                            ]])]),\n                    /* :: */[\n                      /* CommentEOL */1,\n                      /* [] */0\n                    ]\n                  ]\n                ]\n              ]\n            ],\n            /* [] */0\n          ]\n        ]\n      ],\n      /* :: */[\n        /* tuple */[\n          \"decarg\",\n          /* record */[\n            /* passThrough : false */0,\n            /* ignoreNewlines : Inherit */2,\n            /* leaf : false */0,\n            /* choices : :: */[\n              /* tuple */[\n                \"bool\",\n                \"\",\n                /* :: */[\n                  /* NonTerminal */Block.__(10, [\n                      \"bool\",\n                      /* None */0\n                    ]),\n                  /* [] */0\n                ]\n              ],\n              /* :: */[\n                /* tuple */[\n                  \"string\",\n                  \"\",\n                  /* :: */[\n                    /* NonTerminal */Block.__(10, [\n                        \"string\",\n                        /* None */0\n                      ]),\n                    /* [] */0\n                  ]\n                ],\n                /* :: */[\n                  /* tuple */[\n                    \"number\",\n                    \"\",\n                    /* :: */[\n                      /* NonTerminal */Block.__(10, [\n                          \"number\",\n                          /* None */0\n                        ]),\n                      /* [] */0\n                    ]\n                  ],\n                  /* [] */0\n                ]\n              ]\n            ]\n          ]\n        ],\n        /* :: */[\n          /* tuple */[\n            \"bool\",\n            /* record */[\n              /* passThrough : false */0,\n              /* ignoreNewlines : Inherit */2,\n              /* leaf : true */1,\n              /* choices : :: */[\n                /* tuple */[\n                  \"\",\n                  \"\",\n                  /* :: */[\n                    /* Terminal */Block.__(11, [\n                        \"true\",\n                        /* None */0\n                      ]),\n                    /* [] */0\n                  ]\n                ],\n                /* :: */[\n                  /* tuple */[\n                    \"\",\n                    \"\",\n                    /* :: */[\n                      /* Terminal */Block.__(11, [\n                          \"false\",\n                          /* None */0\n                        ]),\n                      /* [] */0\n                    ]\n                  ],\n                  /* [] */0\n                ]\n              ]\n            ]\n          ],\n          /* :: */[\n            /* tuple */[\n              \"Rule\",\n              /* record */[\n                /* passThrough : false */0,\n                /* ignoreNewlines : Inherit */2,\n                /* leaf : false */0,\n                /* choices : :: */[\n                  /* tuple */[\n                    \"\",\n                    \"\",\n                    /* :: */[\n                      /* Star */Block.__(0, [/* NonTerminal */Block.__(10, [\n                              \"Decorator\",\n                              /* Some */[\"decorators\"]\n                            ])]),\n                      /* :: */[\n                        /* NonTerminal */Block.__(10, [\n                            \"ident\",\n                            /* Some */[\"name\"]\n                          ]),\n                        /* :: */[\n                          /* Terminal */Block.__(11, [\n                              \"=\",\n                              /* None */0\n                            ]),\n                          /* :: */[\n                            /* NonTerminal */Block.__(10, [\n                                \"Choice\",\n                                /* Some */[\"choices\"]\n                              ]),\n                            /* :: */[\n                              /* CommentEOL */1,\n                              /* [] */0\n                            ]\n                          ]\n                        ]\n                      ]\n                    ]\n                  ],\n                  /* :: */[\n                    /* tuple */[\n                      \"\",\n                      \"\",\n                      /* :: */[\n                        /* Star */Block.__(0, [/* NonTerminal */Block.__(10, [\n                                \"Decorator\",\n                                /* Some */[\"decorators\"]\n                              ])]),\n                        /* :: */[\n                          /* NonTerminal */Block.__(10, [\n                              \"ident\",\n                              /* Some */[\"name\"]\n                            ]),\n                          /* :: */[\n                            /* Terminal */Block.__(11, [\n                                \"=\",\n                                /* None */0\n                              ]),\n                            /* :: */[\n                              /* CommentEOL */1,\n                              /* :: */[\n                                /* Plus */Block.__(1, [/* Group */Block.__(6, [/* :: */[\n                                          /* Terminal */Block.__(11, [\n                                              \"|\",\n                                              /* None */0\n                                            ]),\n                                          /* :: */[\n                                            /* NonTerminal */Block.__(10, [\n                                                \"Choice\",\n                                                /* Some */[\"choices\"]\n                                              ]),\n                                            /* :: */[\n                                              /* CommentEOL */1,\n                                              /* [] */0\n                                            ]\n                                          ]\n                                        ]])]),\n                                /* [] */0\n                              ]\n                            ]\n                          ]\n                        ]\n                      ]\n                    ],\n                    /* [] */0\n                  ]\n                ]\n              ]\n            ],\n            /* :: */[\n              /* tuple */[\n                \"Choice\",\n                /* record */[\n                  /* passThrough : false */0,\n                  /* ignoreNewlines : Inherit */2,\n                  /* leaf : false */0,\n                  /* choices : :: */[\n                    /* tuple */[\n                      \"\",\n                      \"\",\n                      /* :: */[\n                        /* Plus */Block.__(1, [/* NonTerminal */Block.__(10, [\n                                \"Item\",\n                                /* None */0\n                              ])]),\n                        /* :: */[\n                          /* Optional */Block.__(2, [/* Group */Block.__(6, [/* :: */[\n                                    /* Terminal */Block.__(11, [\n                                        \"--\",\n                                        /* None */0\n                                      ]),\n                                    /* :: */[\n                                      /* NonTerminal */Block.__(10, [\n                                          \"ident\",\n                                          /* Some */[\"name\"]\n                                        ]),\n                                      /* [] */0\n                                    ]\n                                  ]])]),\n                          /* :: */[\n                            /* Optional */Block.__(2, [/* Group */Block.__(6, [/* :: */[\n                                      /* Terminal */Block.__(11, [\n                                          \";\",\n                                          /* None */0\n                                        ]),\n                                      /* :: */[\n                                        /* NonTerminal */Block.__(10, [\n                                            \"rest_of_line\",\n                                            /* Some */[\"comment\"]\n                                          ]),\n                                        /* [] */0\n                                      ]\n                                    ]])]),\n                            /* [] */0\n                          ]\n                        ]\n                      ]\n                    ],\n                    /* [] */0\n                  ]\n                ]\n              ],\n              /* :: */[\n                /* tuple */[\n                  \"Item\",\n                  /* record */[\n                    /* passThrough : false */0,\n                    /* ignoreNewlines : Inherit */2,\n                    /* leaf : false */0,\n                    /* choices : :: */[\n                      /* tuple */[\n                        \"\",\n                        \"\",\n                        /* :: */[\n                          /* Optional */Block.__(2, [/* NoSpaceAfter */Block.__(4, [/* Terminal */Block.__(11, [\n                                      \"~\",\n                                      /* Some */[\"neg\"]\n                                    ])])]),\n                          /* :: */[\n                            /* Optional */Block.__(2, [/* NoSpaceAfter */Block.__(4, [/* Terminal */Block.__(11, [\n                                        \"#\",\n                                        /* Some */[\"lexify\"]\n                                      ])])]),\n                            /* :: */[\n                              /* Optional */Block.__(2, [/* NoSpaceAfter */Block.__(4, [/* Group */Block.__(6, [/* :: */[\n                                            /* NoSpaceAfter */Block.__(4, [/* Terminal */Block.__(11, [\n                                                    \"[\",\n                                                    /* None */0\n                                                  ])]),\n                                            /* :: */[\n                                              /* Optional */Block.__(2, [/* NoSpaceAfter */Block.__(4, [/* NonTerminal */Block.__(10, [\n                                                          \"flag\",\n                                                          /* Some */[\"flag\"]\n                                                        ])])]),\n                                              /* :: */[\n                                                /* NoSpaceAfter */Block.__(4, [/* NonTerminal */Block.__(10, [\n                                                        \"ident\",\n                                                        /* Some */[\"name\"]\n                                                      ])]),\n                                                /* :: */[\n                                                  /* Terminal */Block.__(11, [\n                                                      \"]\",\n                                                      /* None */0\n                                                    ]),\n                                                  /* [] */0\n                                                ]\n                                              ]\n                                            ]\n                                          ]])])]),\n                              /* :: */[\n                                /* Optional */Block.__(2, [/* NoSpaceAfter */Block.__(4, [/* NonTerminal */Block.__(10, [\n                                            \"noSpace\",\n                                            /* Some */[\"noSpaceBefore\"]\n                                          ])])]),\n                                /* :: */[\n                                  /* NonTerminal */Block.__(10, [\n                                      \"ItemInner\",\n                                      /* Some */[\"inner\"]\n                                    ]),\n                                  /* :: */[\n                                    /* Optional */Block.__(2, [/* NoSpaceBefore */Block.__(5, [/* NonTerminal */Block.__(10, [\n                                                \"noSpace\",\n                                                /* Some */[\"noSpaceAfter\"]\n                                              ])])]),\n                                    /* :: */[\n                                      /* Optional */Block.__(2, [/* NoSpaceBefore */Block.__(5, [/* NonTerminal */Block.__(10, [\n                                                  \"suffix\",\n                                                  /* Some */[\"suffix\"]\n                                                ])])]),\n                                      /* [] */0\n                                    ]\n                                  ]\n                                ]\n                              ]\n                            ]\n                          ]\n                        ]\n                      ],\n                      /* [] */0\n                    ]\n                  ]\n                ],\n                /* :: */[\n                  /* tuple */[\n                    \"noSpace\",\n                    /* record */[\n                      /* passThrough : false */0,\n                      /* ignoreNewlines : Inherit */2,\n                      /* leaf : true */1,\n                      /* choices : :: */[\n                        /* tuple */[\n                          \"\",\n                          \"\",\n                          /* :: */[\n                            /* Terminal */Block.__(11, [\n                                \"&\",\n                                /* None */0\n                              ]),\n                            /* [] */0\n                          ]\n                        ],\n                        /* [] */0\n                      ]\n                    ]\n                  ],\n                  /* :: */[\n                    /* tuple */[\n                      \"ItemInner\",\n                      /* record */[\n                        /* passThrough : false */0,\n                        /* ignoreNewlines : Inherit */2,\n                        /* leaf : false */0,\n                        /* choices : :: */[\n                          /* tuple */[\n                            \"\",\n                            \"\",\n                            /* :: */[\n                              /* NonTerminal */Block.__(10, [\n                                  \"string\",\n                                  /* None */0\n                                ]),\n                              /* [] */0\n                            ]\n                          ],\n                          /* :: */[\n                            /* tuple */[\n                              \"\",\n                              \"\",\n                              /* :: */[\n                                /* NonTerminal */Block.__(10, [\n                                    \"ident\",\n                                    /* None */0\n                                  ]),\n                                /* [] */0\n                              ]\n                            ],\n                            /* :: */[\n                              /* tuple */[\n                                \"nested\",\n                                \"\",\n                                /* :: */[\n                                  /* Terminal */Block.__(11, [\n                                      \"(\",\n                                      /* None */0\n                                    ]),\n                                  /* :: */[\n                                    /* NonTerminal */Block.__(10, [\n                                        \"NestedItems\",\n                                        /* None */0\n                                      ]),\n                                    /* :: */[\n                                      /* Terminal */Block.__(11, [\n                                          \")\",\n                                          /* None */0\n                                        ]),\n                                      /* [] */0\n                                    ]\n                                  ]\n                                ]\n                              ],\n                              /* :: */[\n                                /* tuple */[\n                                  \"\",\n                                  \"\",\n                                  /* :: */[\n                                    /* NonTerminal */Block.__(10, [\n                                        \"char_range\",\n                                        /* None */0\n                                      ]),\n                                    /* [] */0\n                                  ]\n                                ],\n                                /* :: */[\n                                  /* tuple */[\n                                    \"\",\n                                    \"\",\n                                    /* :: */[\n                                      /* NonTerminal */Block.__(10, [\n                                          \"char\",\n                                          /* None */0\n                                        ]),\n                                      /* [] */0\n                                    ]\n                                  ],\n                                  /* [] */0\n                                ]\n                              ]\n                            ]\n                          ]\n                        ]\n                      ]\n                    ],\n                    /* :: */[\n                      /* tuple */[\n                        \"NestedItems\",\n                        /* record */[\n                          /* passThrough : true */1,\n                          /* ignoreNewlines : Yes */0,\n                          /* leaf : false */0,\n                          /* choices : :: */[\n                            /* tuple */[\n                              \"\",\n                              \"\",\n                              /* :: */[\n                                /* Plus */Block.__(1, [/* NonTerminal */Block.__(10, [\n                                        \"Item\",\n                                        /* Some */[\"nested\"]\n                                      ])]),\n                                /* [] */0\n                              ]\n                            ],\n                            /* [] */0\n                          ]\n                        ]\n                      ],\n                      /* :: */[\n                        /* tuple */[\n                          \"char_range\",\n                          /* record */[\n                            /* passThrough : false */0,\n                            /* ignoreNewlines : Inherit */2,\n                            /* leaf : false */0,\n                            /* choices : :: */[\n                              /* tuple */[\n                                \"\",\n                                \"\",\n                                /* :: */[\n                                  /* Terminal */Block.__(11, [\n                                      \"'\",\n                                      /* None */0\n                                    ]),\n                                  /* :: */[\n                                    /* NonTerminal */Block.__(10, [\n                                        \"single\",\n                                        /* Some */[\"start\"]\n                                      ]),\n                                    /* :: */[\n                                      /* Terminal */Block.__(11, [\n                                          \"..\",\n                                          /* None */0\n                                        ]),\n                                      /* :: */[\n                                        /* NonTerminal */Block.__(10, [\n                                            \"single\",\n                                            /* Some */[\"end\"]\n                                          ]),\n                                        /* :: */[\n                                          /* Terminal */Block.__(11, [\n                                              \"'\",\n                                              /* None */0\n                                            ]),\n                                          /* [] */0\n                                        ]\n                                      ]\n                                    ]\n                                  ]\n                                ]\n                              ],\n                              /* [] */0\n                            ]\n                          ]\n                        ],\n                        /* :: */[\n                          /* tuple */[\n                            \"char\",\n                            /* record */[\n                              /* passThrough : false */0,\n                              /* ignoreNewlines : Inherit */2,\n                              /* leaf : false */0,\n                              /* choices : :: */[\n                                /* tuple */[\n                                  \"\",\n                                  \"\",\n                                  /* :: */[\n                                    /* Terminal */Block.__(11, [\n                                        \"'\",\n                                        /* None */0\n                                      ]),\n                                    /* :: */[\n                                      /* NonTerminal */Block.__(10, [\n                                          \"single\",\n                                          /* Some */[\"char\"]\n                                        ]),\n                                      /* :: */[\n                                        /* Terminal */Block.__(11, [\n                                            \"'\",\n                                            /* None */0\n                                          ]),\n                                        /* [] */0\n                                      ]\n                                    ]\n                                  ]\n                                ],\n                                /* [] */0\n                              ]\n                            ]\n                          ],\n                          /* :: */[\n                            /* tuple */[\n                              \"single\",\n                              /* record */[\n                                /* passThrough : false */0,\n                                /* ignoreNewlines : Inherit */2,\n                                /* leaf : true */1,\n                                /* choices : :: */[\n                                  /* tuple */[\n                                    \"\",\n                                    \"\",\n                                    /* :: */[\n                                      /* Terminal */Block.__(11, [\n                                          \"\\\\\",\n                                          /* None */0\n                                        ]),\n                                      /* :: */[\n                                        /* Any */Block.__(3, [/* None */0]),\n                                        /* [] */0\n                                      ]\n                                    ]\n                                  ],\n                                  /* :: */[\n                                    /* tuple */[\n                                      \"\",\n                                      \"\",\n                                      /* :: */[\n                                        /* Not */Block.__(8, [/* Terminal */Block.__(11, [\n                                                \"'\",\n                                                /* None */0\n                                              ])]),\n                                        /* :: */[\n                                          /* Not */Block.__(8, [/* Terminal */Block.__(11, [\n                                                  \"\\n\",\n                                                  /* None */0\n                                                ])]),\n                                          /* :: */[\n                                            /* Any */Block.__(3, [/* None */0]),\n                                            /* [] */0\n                                          ]\n                                        ]\n                                      ]\n                                    ],\n                                    /* [] */0\n                                  ]\n                                ]\n                              ]\n                            ],\n                            /* :: */[\n                              /* tuple */[\n                                \"string\",\n                                /* record */[\n                                  /* passThrough : false */0,\n                                  /* ignoreNewlines : Inherit */2,\n                                  /* leaf : true */1,\n                                  /* choices : :: */[\n                                    /* tuple */[\n                                      \"\",\n                                      \"\",\n                                      /* :: */[\n                                        /* Terminal */Block.__(11, [\n                                            '\"',\n                                            /* None */0\n                                          ]),\n                                        /* :: */[\n                                          /* Star */Block.__(0, [/* NonTerminal */Block.__(10, [\n                                                  \"strchar\",\n                                                  /* Some */[\"contents\"]\n                                                ])]),\n                                          /* :: */[\n                                            /* Terminal */Block.__(11, [\n                                                '\"',\n                                                /* None */0\n                                              ]),\n                                            /* [] */0\n                                          ]\n                                        ]\n                                      ]\n                                    ],\n                                    /* [] */0\n                                  ]\n                                ]\n                              ],\n                              /* :: */[\n                                /* tuple */[\n                                  \"strchar\",\n                                  /* record */[\n                                    /* passThrough : false */0,\n                                    /* ignoreNewlines : Inherit */2,\n                                    /* leaf : false */0,\n                                    /* choices : :: */[\n                                      /* tuple */[\n                                        \"\",\n                                        \"\",\n                                        /* :: */[\n                                          /* Terminal */Block.__(11, [\n                                              \"\\\\\",\n                                              /* None */0\n                                            ]),\n                                          /* :: */[\n                                            /* Any */Block.__(3, [/* None */0]),\n                                            /* [] */0\n                                          ]\n                                        ]\n                                      ],\n                                      /* :: */[\n                                        /* tuple */[\n                                          \"\",\n                                          \"\",\n                                          /* :: */[\n                                            /* Not */Block.__(8, [/* Terminal */Block.__(11, [\n                                                    '\"',\n                                                    /* None */0\n                                                  ])]),\n                                            /* :: */[\n                                              /* Not */Block.__(8, [/* Terminal */Block.__(11, [\n                                                      \"\\n\",\n                                                      /* None */0\n                                                    ])]),\n                                              /* :: */[\n                                                /* Any */Block.__(3, [/* None */0]),\n                                                /* [] */0\n                                              ]\n                                            ]\n                                          ]\n                                        ],\n                                        /* [] */0\n                                      ]\n                                    ]\n                                  ]\n                                ],\n                                /* :: */[\n                                  /* tuple */[\n                                    \"flag\",\n                                    /* record */[\n                                      /* passThrough : false */0,\n                                      /* ignoreNewlines : Inherit */2,\n                                      /* leaf : false */0,\n                                      /* choices : :: */[\n                                        /* tuple */[\n                                          \"bool\",\n                                          \"exists\",\n                                          /* :: */[\n                                            /* Terminal */Block.__(11, [\n                                                \"?\",\n                                                /* None */0\n                                              ]),\n                                            /* [] */0\n                                          ]\n                                        ],\n                                        /* :: */[\n                                          /* tuple */[\n                                            \"array\",\n                                            \"\",\n                                            /* :: */[\n                                              /* Terminal */Block.__(11, [\n                                                  \":\",\n                                                  /* None */0\n                                                ]),\n                                              /* [] */0\n                                            ]\n                                          ],\n                                          /* :: */[\n                                            /* tuple */[\n                                              \"string\",\n                                              \"contents\",\n                                              /* :: */[\n                                                /* Terminal */Block.__(11, [\n                                                    \"@\",\n                                                    /* None */0\n                                                  ]),\n                                                /* [] */0\n                                              ]\n                                            ],\n                                            /* [] */0\n                                          ]\n                                        ]\n                                      ]\n                                    ]\n                                  ],\n                                  /* :: */[\n                                    /* tuple */[\n                                      \"suffix\",\n                                      /* record */[\n                                        /* passThrough : false */0,\n                                        /* ignoreNewlines : Inherit */2,\n                                        /* leaf : false */0,\n                                        /* choices : :: */[\n                                          /* tuple */[\n                                            \"plus\",\n                                            \"\",\n                                            /* :: */[\n                                              /* Terminal */Block.__(11, [\n                                                  \"+\",\n                                                  /* None */0\n                                                ]),\n                                              /* [] */0\n                                            ]\n                                          ],\n                                          /* :: */[\n                                            /* tuple */[\n                                              \"star\",\n                                              \"\",\n                                              /* :: */[\n                                                /* Terminal */Block.__(11, [\n                                                    \"*\",\n                                                    /* None */0\n                                                  ]),\n                                                /* [] */0\n                                              ]\n                                            ],\n                                            /* :: */[\n                                              /* tuple */[\n                                                \"opt\",\n                                                \"\",\n                                                /* :: */[\n                                                  /* Terminal */Block.__(11, [\n                                                      \"?\",\n                                                      /* None */0\n                                                    ]),\n                                                  /* [] */0\n                                                ]\n                                              ],\n                                              /* [] */0\n                                            ]\n                                          ]\n                                        ]\n                                      ]\n                                    ],\n                                    /* :: */[\n                                      /* tuple */[\n                                        \"ident\",\n                                        /* record */[\n                                          /* passThrough : false */0,\n                                          /* ignoreNewlines : Inherit */2,\n                                          /* leaf : true */1,\n                                          /* choices : :: */[\n                                            /* tuple */[\n                                              \"\",\n                                              \"\",\n                                              /* :: */[\n                                                /* Not */Block.__(8, [/* NonTerminal */Block.__(10, [\n                                                        \"digit\",\n                                                        /* None */0\n                                                      ])]),\n                                                /* :: */[\n                                                  /* Plus */Block.__(1, [/* NonTerminal */Block.__(10, [\n                                                          \"identchar\",\n                                                          /* None */0\n                                                        ])]),\n                                                  /* [] */0\n                                                ]\n                                              ]\n                                            ],\n                                            /* [] */0\n                                          ]\n                                        ]\n                                      ],\n                                      /* :: */[\n                                        /* tuple */[\n                                          \"identchar\",\n                                          /* record */[\n                                            /* passThrough : false */0,\n                                            /* ignoreNewlines : Inherit */2,\n                                            /* leaf : false */0,\n                                            /* choices : :: */[\n                                              /* tuple */[\n                                                \"\",\n                                                \"\",\n                                                /* :: */[\n                                                  /* Chars */Block.__(12, [\n                                                      /* \"a\" */97,\n                                                      /* \"z\" */122,\n                                                      /* None */0\n                                                    ]),\n                                                  /* [] */0\n                                                ]\n                                              ],\n                                              /* :: */[\n                                                /* tuple */[\n                                                  \"\",\n                                                  \"\",\n                                                  /* :: */[\n                                                    /* Chars */Block.__(12, [\n                                                        /* \"A\" */65,\n                                                        /* \"Z\" */90,\n                                                        /* None */0\n                                                      ]),\n                                                    /* [] */0\n                                                  ]\n                                                ],\n                                                /* :: */[\n                                                  /* tuple */[\n                                                    \"\",\n                                                    \"\",\n                                                    /* :: */[\n                                                      /* Chars */Block.__(12, [\n                                                          /* \"0\" */48,\n                                                          /* \"9\" */57,\n                                                          /* None */0\n                                                        ]),\n                                                      /* [] */0\n                                                    ]\n                                                  ],\n                                                  /* :: */[\n                                                    /* tuple */[\n                                                      \"\",\n                                                      \"\",\n                                                      /* :: */[\n                                                        /* Terminal */Block.__(11, [\n                                                            \"_\",\n                                                            /* None */0\n                                                          ]),\n                                                        /* [] */0\n                                                      ]\n                                                    ],\n                                                    /* [] */0\n                                                  ]\n                                                ]\n                                              ]\n                                            ]\n                                          ]\n                                        ],\n                                        /* :: */[\n                                          /* tuple */[\n                                            \"number\",\n                                            /* record */[\n                                              /* passThrough : false */0,\n                                              /* ignoreNewlines : Inherit */2,\n                                              /* leaf : true */1,\n                                              /* choices : :: */[\n                                                /* tuple */[\n                                                  \"\",\n                                                  \"\",\n                                                  /* :: */[\n                                                    /* Terminal */Block.__(11, [\n                                                        \"0\",\n                                                        /* None */0\n                                                      ]),\n                                                    /* :: */[\n                                                      /* Not */Block.__(8, [/* NonTerminal */Block.__(10, [\n                                                              \"identchar\",\n                                                              /* None */0\n                                                            ])]),\n                                                      /* [] */0\n                                                    ]\n                                                  ]\n                                                ],\n                                                /* :: */[\n                                                  /* tuple */[\n                                                    \"\",\n                                                    \"\",\n                                                    /* :: */[\n                                                      /* Not */Block.__(8, [/* Terminal */Block.__(11, [\n                                                              \"0\",\n                                                              /* None */0\n                                                            ])]),\n                                                      /* :: */[\n                                                        /* Plus */Block.__(1, [/* NonTerminal */Block.__(10, [\n                                                                \"digit\",\n                                                                /* None */0\n                                                              ])]),\n                                                        /* :: */[\n                                                          /* Not */Block.__(8, [/* NonTerminal */Block.__(10, [\n                                                                  \"identchar\",\n                                                                  /* None */0\n                                                                ])]),\n                                                          /* [] */0\n                                                        ]\n                                                      ]\n                                                    ]\n                                                  ],\n                                                  /* [] */0\n                                                ]\n                                              ]\n                                            ]\n                                          ],\n                                          /* :: */[\n                                            /* tuple */[\n                                              \"digit\",\n                                              /* record */[\n                                                /* passThrough : false */0,\n                                                /* ignoreNewlines : Inherit */2,\n                                                /* leaf : false */0,\n                                                /* choices : :: */[\n                                                  /* tuple */[\n                                                    \"\",\n                                                    \"\",\n                                                    /* :: */[\n                                                      /* Chars */Block.__(12, [\n                                                          /* \"0\" */48,\n                                                          /* \"9\" */57,\n                                                          /* None */0\n                                                        ]),\n                                                      /* [] */0\n                                                    ]\n                                                  ],\n                                                  /* [] */0\n                                                ]\n                                              ]\n                                            ],\n                                            /* :: */[\n                                              /* tuple */[\n                                                \"rest_of_line\",\n                                                /* record */[\n                                                  /* passThrough : false */0,\n                                                  /* ignoreNewlines : Inherit */2,\n                                                  /* leaf : true */1,\n                                                  /* choices : :: */[\n                                                    /* tuple */[\n                                                      \"\",\n                                                      \"\",\n                                                      /* :: */[\n                                                        /* Star */Block.__(0, [/* Group */Block.__(6, [/* :: */[\n                                                                  /* Not */Block.__(8, [/* Terminal */Block.__(11, [\n                                                                          \"\\n\",\n                                                                          /* None */0\n                                                                        ])]),\n                                                                  /* :: */[\n                                                                    /* Any */Block.__(3, [/* None */0]),\n                                                                    /* [] */0\n                                                                  ]\n                                                                ]])]),\n                                                        /* [] */0\n                                                      ]\n                                                    ],\n                                                    /* [] */0\n                                                  ]\n                                                ]\n                                              ],\n                                              /* :: */[\n                                                /* tuple */[\n                                                  \"eol\",\n                                                  /* record */[\n                                                    /* passThrough : false */0,\n                                                    /* ignoreNewlines : Inherit */2,\n                                                    /* leaf : false */0,\n                                                    /* choices : :: */[\n                                                      /* tuple */[\n                                                        \"\",\n                                                        \"\",\n                                                        /* :: */[\n                                                          /* Star */Block.__(0, [/* NonTerminal */Block.__(10, [\n                                                                  \"white\",\n                                                                  /* None */0\n                                                                ])]),\n                                                          /* :: */[\n                                                            /* NonTerminal */Block.__(10, [\n                                                                \"eee\",\n                                                                /* None */0\n                                                              ]),\n                                                            /* [] */0\n                                                          ]\n                                                        ]\n                                                      ],\n                                                      /* [] */0\n                                                    ]\n                                                  ]\n                                                ],\n                                                /* :: */[\n                                                  /* tuple */[\n                                                    \"eee\",\n                                                    /* record */[\n                                                      /* passThrough : false */0,\n                                                      /* ignoreNewlines : Inherit */2,\n                                                      /* leaf : false */0,\n                                                      /* choices : :: */[\n                                                        /* tuple */[\n                                                          \"\",\n                                                          \"\",\n                                                          /* :: */[\n                                                            /* Plus */Block.__(1, [/* NonTerminal */Block.__(10, [\n                                                                    \"eolchar\",\n                                                                    /* None */0\n                                                                  ])]),\n                                                            /* [] */0\n                                                          ]\n                                                        ],\n                                                        /* :: */[\n                                                          /* tuple */[\n                                                            \"\",\n                                                            \"\",\n                                                            /* :: */[\n                                                              /* EOF */0,\n                                                              /* [] */0\n                                                            ]\n                                                          ],\n                                                          /* [] */0\n                                                        ]\n                                                      ]\n                                                    ]\n                                                  ],\n                                                  /* :: */[\n                                                    /* tuple */[\n                                                      \"eolchar\",\n                                                      /* record */[\n                                                        /* passThrough : false */0,\n                                                        /* ignoreNewlines : Inherit */2,\n                                                        /* leaf : false */0,\n                                                        /* choices : :: */[\n                                                          /* tuple */[\n                                                            \"\",\n                                                            \"\",\n                                                            /* :: */[\n                                                              /* Terminal */Block.__(11, [\n                                                                  \"\\n\",\n                                                                  /* None */0\n                                                                ]),\n                                                              /* [] */0\n                                                            ]\n                                                          ],\n                                                          /* :: */[\n                                                            /* tuple */[\n                                                              \"\",\n                                                              \"\",\n                                                              /* :: */[\n                                                                /* Terminal */Block.__(11, [\n                                                                    \"\\r\",\n                                                                    /* None */0\n                                                                  ]),\n                                                                /* [] */0\n                                                              ]\n                                                            ],\n                                                            /* [] */0\n                                                          ]\n                                                        ]\n                                                      ]\n                                                    ],\n                                                    /* :: */[\n                                                      /* tuple */[\n                                                        \"white\",\n                                                        /* record */[\n                                                          /* passThrough : false */0,\n                                                          /* ignoreNewlines : Inherit */2,\n                                                          /* leaf : false */0,\n                                                          /* choices : :: */[\n                                                            /* tuple */[\n                                                              \"\",\n                                                              \"\",\n                                                              /* :: */[\n                                                                /* Terminal */Block.__(11, [\n                                                                    \" \",\n                                                                    /* None */0\n                                                                  ]),\n                                                                /* [] */0\n                                                              ]\n                                                            ],\n                                                            /* :: */[\n                                                              /* tuple */[\n                                                                \"\",\n                                                                \"\",\n                                                                /* :: */[\n                                                                  /* Terminal */Block.__(11, [\n                                                                      \"\\t\",\n                                                                      /* None */0\n                                                                    ]),\n                                                                  /* [] */0\n                                                                ]\n                                                              ],\n                                                              /* [] */0\n                                                            ]\n                                                          ]\n                                                        ]\n                                                      ],\n                                                      /* [] */0\n                                                    ]\n                                                  ]\n                                                ]\n                                              ]\n                                            ]\n                                          ]\n                                        ]\n                                      ]\n                                    ]\n                                  ]\n                                ]\n                              ]\n                            ]\n                          ]\n                        ]\n                      ]\n                    ]\n                  ]\n                ]\n              ]\n            ]\n          ]\n        ]\n      ]\n    ]\n  ]\n];\n\nexports.grammar = grammar;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./bs_build/grammarGrammar.js\n ** module id = 29\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./bs_build/grammarGrammar.js?");

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	eval("// Generated by BUCKLESCRIPT VERSION 1.0.1 , PLEASE EDIT WITH CARE\n'use strict';\n\nvar Caml_obj                = __webpack_require__(8);\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Pervasives              = __webpack_require__(7);\nvar Caml_int32              = __webpack_require__(14);\nvar Block                   = __webpack_require__(1);\nvar Char                    = __webpack_require__(20);\nvar Curry                   = __webpack_require__(2);\nvar Printf                  = __webpack_require__(6);\nvar $$String                = __webpack_require__(23);\nvar List                    = __webpack_require__(21);\nvar Caml_string             = __webpack_require__(16);\n\nvar Output = /* module */[];\n\nfunction pad(num, base) {\n  var txt = \"\";\n  for(var i = 0; i <= num; ++i){\n    txt = txt + base;\n  }\n  return txt;\n}\n\nfunction outputToString(config, indentLevel, output) {\n  if (typeof output === \"number\") {\n    if (output) {\n      return Pervasives.failwith(\"unhandled nospace\");\n    }\n    else {\n      return /* tuple */[\n              \"\\n\" + pad(indentLevel - 1 | 0, config[/* indentStr */2]),\n              /* true */1\n            ];\n    }\n  }\n  else {\n    switch (output.tag | 0) {\n      case 0 : \n          return /* tuple */[\n                  output[0],\n                  /* false */0\n                ];\n      case 1 : \n          var loop = function (items) {\n            if (items) {\n              var child = items[0];\n              var exit = 0;\n              if (typeof child === \"number\") {\n                if (child !== 0) {\n                  var match = loop(items[1]);\n                  return /* tuple */[\n                          /* :: */[\n                            /* NoSpace */0,\n                            match[0]\n                          ],\n                          match[1],\n                          match[2]\n                        ];\n                }\n                else {\n                  exit = 1;\n                }\n              }\n              else {\n                exit = 1;\n              }\n              if (exit === 1) {\n                var match$1 = loop(items[1]);\n                var multis = match$1[2];\n                var match$2 = outputToString(config, indentLevel + 1 | 0, child);\n                var res = match$2[0];\n                return /* tuple */[\n                        /* :: */[\n                          /* Text */[res],\n                          match$1[0]\n                        ],\n                        match$1[1] + res.length | 0,\n                        match$2[1] !== 0 ? multis + 1 | 0 : multis\n                      ];\n              }\n              \n            }\n            else {\n              return /* tuple */[\n                      /* [] */0,\n                      0,\n                      0\n                    ];\n            }\n          };\n          var match = loop(output[0]);\n          var items = match[0];\n          if (match[2] > 1 || (match[1] + Caml_int32.imul(config[/* indentWidth */1], indentLevel) | 0) > config[/* maxWidth */0] && List.length(items) > 1) {\n            var padt = \"\\n\" + pad(indentLevel + 0 | 0, config[/* indentStr */2]);\n            var loop$1 = function (_items) {\n              while(true) {\n                var items = _items;\n                if (items) {\n                  var match = items[0];\n                  if (match) {\n                    var rest = items[1];\n                    var child = match[0];\n                    if (rest) {\n                      if (rest[0]) {\n                        return child + (padt + loop$1(rest));\n                      }\n                      else {\n                        return child + loop$1(rest[1]);\n                      }\n                    }\n                    else {\n                      return child;\n                    }\n                  }\n                  else {\n                    _items = items[1];\n                    continue ;\n                    \n                  }\n                }\n                else {\n                  return \"\";\n                }\n              };\n            };\n            return /* tuple */[\n                    padt + (loop$1(items) + (\"\\n\" + pad(indentLevel - 1 | 0, config[/* indentStr */2]))),\n                    /* true */1\n                  ];\n          }\n          else {\n            var loop$2 = function (_items) {\n              while(true) {\n                var items = _items;\n                if (items) {\n                  var match = items[0];\n                  if (match) {\n                    var rest = items[1];\n                    var child = match[0];\n                    if (rest) {\n                      if (rest[0]) {\n                        return child + (\" \" + loop$2(rest));\n                      }\n                      else {\n                        return child + loop$2(rest[1]);\n                      }\n                    }\n                    else {\n                      return child;\n                    }\n                  }\n                  else {\n                    _items = items[1];\n                    continue ;\n                    \n                  }\n                }\n                else {\n                  return \"\";\n                }\n              };\n            };\n            return /* tuple */[\n                    loop$2(items),\n                    /* false */0\n                  ];\n          }\n          break;\n      case 2 : \n          var padt$1 = \"\\n\" + pad(indentLevel + 0 | 0, config[/* indentStr */2]);\n          var loop$3 = function (_items) {\n            while(true) {\n              var items = _items;\n              if (items) {\n                var child = items[0];\n                var exit = 0;\n                if (typeof child === \"number\") {\n                  if (child !== 0) {\n                    _items = items[1];\n                    continue ;\n                    \n                  }\n                  else {\n                    exit = 1;\n                  }\n                }\n                else {\n                  exit = 1;\n                }\n                if (exit === 1) {\n                  var rest = items[1];\n                  var exit$1 = 0;\n                  if (rest) {\n                    var match = rest[0];\n                    if (typeof match === \"number\") {\n                      if (match !== 0) {\n                        var match$1 = loop$3(rest[1]);\n                        var match$2 = outputToString(config, indentLevel + 1 | 0, child);\n                        return /* tuple */[\n                                match$2[0] + match$1[0],\n                                +(match$1[1] || match$2[1])\n                              ];\n                      }\n                      else {\n                        exit$1 = 2;\n                      }\n                    }\n                    else {\n                      exit$1 = 2;\n                    }\n                  }\n                  else {\n                    return outputToString(config, indentLevel + 1 | 0, child);\n                  }\n                  if (exit$1 === 2) {\n                    var match$3 = loop$3(rest);\n                    var match$4 = outputToString(config, indentLevel + 1 | 0, child);\n                    return /* tuple */[\n                            match$4[0] + (padt$1 + match$3[0]),\n                            +(match$3[1] || match$4[1])\n                          ];\n                  }\n                  \n                }\n                \n              }\n              else {\n                return /* tuple */[\n                        \"\",\n                        /* false */0\n                      ];\n              }\n            };\n          };\n          var match$1 = loop$3(output[0]);\n          return /* tuple */[\n                  padt$1 + (match$1[0] + (\"\\n\" + pad(indentLevel - 1 | 0, config[/* indentStr */2]))),\n                  match$1[1]\n                ];\n      case 3 : \n          return /* tuple */[\n                  $$String.concat(\"\", List.map(function (x) {\n                            return outputToString(config, 0, x)[0];\n                          }, output[0])),\n                  /* false */0\n                ];\n      case 4 : \n          var loop$4 = function (_items) {\n            while(true) {\n              var items = _items;\n              if (items) {\n                var child = items[0];\n                var exit = 0;\n                if (typeof child === \"number\") {\n                  if (child !== 0) {\n                    _items = items[1];\n                    continue ;\n                    \n                  }\n                  else {\n                    exit = 1;\n                  }\n                }\n                else {\n                  exit = 1;\n                }\n                if (exit === 1) {\n                  var rest = items[1];\n                  var exit$1 = 0;\n                  if (rest) {\n                    var match = rest[0];\n                    if (typeof match === \"number\") {\n                      if (match !== 0) {\n                        var match$1 = loop$4(rest[1]);\n                        var match$2 = outputToString(config, indentLevel, child);\n                        return /* tuple */[\n                                match$2[0] + match$1[0],\n                                +(match$1[1] || match$2[1])\n                              ];\n                      }\n                      else {\n                        exit$1 = 2;\n                      }\n                    }\n                    else {\n                      exit$1 = 2;\n                    }\n                  }\n                  else {\n                    return outputToString(config, indentLevel, child);\n                  }\n                  if (exit$1 === 2) {\n                    var match$3 = loop$4(rest);\n                    var match$4 = outputToString(config, indentLevel, child);\n                    return /* tuple */[\n                            match$4[0] + (\" \" + match$3[0]),\n                            +(match$3[1] || match$4[1])\n                          ];\n                  }\n                  \n                }\n                \n              }\n              else {\n                return /* tuple */[\n                        \"\",\n                        /* false */0\n                      ];\n              }\n            };\n          };\n          return loop$4(output[0]);\n      \n    }\n  }\n}\n\nfunction maybeFind(children, check) {\n  if (children) {\n    var rest = children[1];\n    var child = children[0];\n    var x = Curry._1(check, child);\n    if (x) {\n      return /* tuple */[\n              x,\n              rest\n            ];\n    }\n    else {\n      var match = maybeFind(rest, check);\n      return /* tuple */[\n              match[0],\n              /* :: */[\n                child,\n                match[1]\n              ]\n            ];\n    }\n  }\n  else {\n    return /* tuple */[\n            /* None */0,\n            /* [] */0\n          ];\n  }\n}\n\nfunction findByLabel(children, needle) {\n  return maybeFind(children, function (param) {\n              var match = Caml_obj.caml_equal(param[0], needle);\n              if (match !== 0) {\n                return /* Some */[param[1]];\n              }\n              else {\n                return /* None */0;\n              }\n            });\n}\n\nfunction findByType(children, needle) {\n  return maybeFind(children, function (param) {\n              var child = param[1];\n              if (param[0] === \"\" && child[0][0] === needle) {\n                return /* Some */[child];\n              }\n              else {\n                return /* None */0;\n              }\n            });\n}\n\nfunction greedy(loop, p, children, min, max) {\n  if (max) {\n    var match = Curry._2(loop, /* :: */[\n          p,\n          /* [] */0\n        ], children);\n    var unused = match[2];\n    var res = match[1];\n    if (match[0]) {\n      if (Caml_obj.caml_equal(children, unused)) {\n        return /* tuple */[\n                /* true */1,\n                res,\n                unused\n              ];\n      }\n      else {\n        var match$1 = greedy(loop, p, unused, min - 1 | 0, max - 1 | 0);\n        if (match$1[0]) {\n          return /* tuple */[\n                  /* true */1,\n                  List.concat(/* :: */[\n                        res,\n                        /* :: */[\n                          match$1[1],\n                          /* [] */0\n                        ]\n                      ]),\n                  match$1[2]\n                ];\n        }\n        else if (min <= 1) {\n          return /* tuple */[\n                  /* true */1,\n                  res,\n                  unused\n                ];\n        }\n        else {\n          return /* tuple */[\n                  /* false */0,\n                  /* [] */0,\n                  children\n                ];\n        }\n      }\n    }\n    else {\n      return /* tuple */[\n              +(min <= 0),\n              /* [] */0,\n              children\n            ];\n    }\n  }\n  else {\n    return /* tuple */[\n            /* true */1,\n            /* [] */0,\n            children\n          ];\n  }\n}\n\nfunction passThroughChildren(grammar, name) {\n  var rule;\n  try {\n    rule = List.assoc(name, grammar[/* rules */2]);\n  }\n  catch (exn){\n    if (exn === Caml_builtin_exceptions.not_found) {\n      rule = Pervasives.failwith(\"Undefined rule name: \" + name);\n    }\n    else {\n      throw exn;\n    }\n  }\n  if (rule[/* passThrough */0]) {\n    var match = List.hd(rule[/* choices */3]);\n    return /* Some */[/* tuple */[\n              match[2],\n              rule[/* ignoreNewlines */1]\n            ]];\n  }\n  else {\n    return /* None */0;\n  }\n}\n\nfunction makeStraightWithEOLs(res) {\n  var loop = function (_items) {\n    while(true) {\n      var items = _items;\n      if (items) {\n        var item = items[0];\n        var exit = 0;\n        if (typeof item === \"number\") {\n          if (item !== 0) {\n            exit = 1;\n          }\n          else {\n            _items = items[1];\n            continue ;\n            \n          }\n        }\n        else {\n          exit = 1;\n        }\n        if (exit === 1) {\n          var rest = items[1];\n          var exit$1 = 0;\n          if (rest) {\n            var match = rest[0];\n            if (typeof match === \"number\") {\n              if (match !== 0) {\n                exit$1 = 2;\n              }\n              else {\n                return /* :: */[\n                        /* :: */[\n                          item,\n                          /* [] */0\n                        ],\n                        loop(rest[1])\n                      ];\n              }\n            }\n            else {\n              exit$1 = 2;\n            }\n          }\n          else {\n            exit$1 = 2;\n          }\n          if (exit$1 === 2) {\n            var match$1 = loop(rest);\n            if (match$1) {\n              return /* :: */[\n                      /* :: */[\n                        item,\n                        match$1[0]\n                      ],\n                      match$1[1]\n                    ];\n            }\n            else {\n              return /* :: */[\n                      /* :: */[\n                        item,\n                        /* [] */0\n                      ],\n                      /* [] */0\n                    ];\n            }\n          }\n          \n        }\n        \n      }\n      else {\n        return /* [] */0;\n      }\n    };\n  };\n  var res$1 = loop(res);\n  if (res$1) {\n    if (res$1[1]) {\n      return /* Newlined */Block.__(2, [List.map(function (x) {\n                      return /* Straight */Block.__(4, [x]);\n                    }, res$1)]);\n    }\n    else {\n      return /* Straight */Block.__(4, [res$1[0]]);\n    }\n  }\n  else {\n    return /* Straight */Block.__(4, [/* [] */0]);\n  }\n}\n\nfunction resultToOutput(ignoringNewlines, grammar, result) {\n  if (result.tag) {\n    var match = result[0];\n    return nodeToOutput(ignoringNewlines, grammar, /* tuple */[\n                match[0],\n                match[1]\n              ], result[1]);\n  }\n  else {\n    return /* Some */[/* Text */Block.__(0, [result[1]])];\n  }\n}\n\nfunction processNonTerminal(grammar, name, label, children, ignoringNewlines, rest, loop) {\n  var match = passThroughChildren(grammar, name);\n  if (match) {\n    var match$1 = match[0];\n    var ignoreNewlines = match$1[1];\n    var newIgnore;\n    switch (ignoreNewlines) {\n      case 0 : \n          newIgnore = /* true */1;\n          break;\n      case 1 : \n          newIgnore = /* false */0;\n          break;\n      case 2 : \n          newIgnore = ignoringNewlines;\n          break;\n      \n    }\n    var match$2 = Curry._3(loop, newIgnore, match$1[0], children);\n    var res = match$2[1];\n    if (match$2[0]) {\n      var match$3 = Curry._3(loop, ignoringNewlines, rest, match$2[2]);\n      var r2 = match$3[1];\n      var output;\n      var exit = 0;\n      if (res && !res[1]) {\n        output = res[0];\n      }\n      else {\n        exit = 1;\n      }\n      if (exit === 1) {\n        output = ignoreNewlines ? makeStraightWithEOLs(res) : /* MaybeNewlined */Block.__(1, [res]);\n      }\n      var children$1;\n      children$1 = typeof output === \"number\" ? /* :: */[\n          output,\n          r2\n        ] : (\n          output.tag === 2 ? /* :: */[\n              /* NoSpace */1,\n              /* :: */[\n                output,\n                /* :: */[\n                  /* NoSpace */1,\n                  r2\n                ]\n              ]\n            ] : /* :: */[\n              output,\n              r2\n            ]\n        );\n      return /* tuple */[\n              match$3[0],\n              children$1,\n              match$3[2]\n            ];\n    }\n    else {\n      return /* tuple */[\n              /* false */0,\n              /* [] */0,\n              children\n            ];\n    }\n  }\n  else {\n    var match$4 = label ? findByLabel(children, label[0]) : findByType(children, name);\n    var child = match$4[0];\n    if (child) {\n      var match$5 = resultToOutput(ignoringNewlines, grammar, child[0]);\n      if (match$5) {\n        var output$1 = match$5[0];\n        var match$6 = Curry._3(loop, ignoringNewlines, rest, match$4[1]);\n        var res$1 = match$6[1];\n        var children$2;\n        children$2 = typeof output$1 === \"number\" ? /* :: */[\n            output$1,\n            res$1\n          ] : (\n            output$1.tag === 2 ? /* :: */[\n                /* NoSpace */1,\n                /* :: */[\n                  output$1,\n                  /* :: */[\n                    /* NoSpace */1,\n                    res$1\n                  ]\n                ]\n              ] : /* :: */[\n                output$1,\n                res$1\n              ]\n          );\n        return /* tuple */[\n                match$6[0],\n                children$2,\n                match$6[2]\n              ];\n      }\n      else {\n        return /* tuple */[\n                /* false */0,\n                /* [] */0,\n                children\n              ];\n      }\n    }\n    else {\n      return /* tuple */[\n              /* false */0,\n              /* [] */0,\n              children\n            ];\n    }\n  }\n}\n\nfunction nodeToOutput(ignoringNewlines, grammar, param, children) {\n  var sub = param[1];\n  var name = param[0];\n  var rule = List.assoc(name, grammar[/* rules */2]);\n  var match;\n  try {\n    match = List.find(function (param) {\n          return +(param[0] === sub);\n        }, rule[/* choices */3]);\n  }\n  catch (exn){\n    if (exn === Caml_builtin_exceptions.not_found) {\n      match = Pervasives.failwith(\"Unknown rule sub \" + (name + (\" :: \" + sub)));\n    }\n    else {\n      throw exn;\n    }\n  }\n  var match$1 = rule[/* ignoreNewlines */1];\n  var ignoringNewlines$1;\n  switch (match$1) {\n    case 0 : \n        ignoringNewlines$1 = /* true */1;\n        break;\n    case 1 : \n        ignoringNewlines$1 = /* false */0;\n        break;\n    case 2 : \n        ignoringNewlines$1 = ignoringNewlines;\n        break;\n    \n  }\n  var isLexical = +(Char.uppercase(Caml_string.get(name, 0)) !== Caml_string.get(name, 0));\n  var loop = function (ignoringNewlines, _items, children) {\n    while(true) {\n      var items = _items;\n      if (items) {\n        var rest = items[1];\n        var item = items[0];\n        if (typeof item === \"number\") {\n          if (item === 1) {\n            var match = loop(ignoringNewlines, rest, children);\n            return /* tuple */[\n                    match[0],\n                    /* :: */[\n                      /* EOL */0,\n                      match[1]\n                    ],\n                    match[2]\n                  ];\n          }\n          else {\n            _items = rest;\n            continue ;\n            \n          }\n        }\n        else {\n          switch (item.tag | 0) {\n            case 0 : \n                var match$1 = greedy(function (param, param$1) {\n                      return loop(ignoringNewlines, param, param$1);\n                    }, item[0], children, 0, -1);\n                var unused = match$1[2];\n                var res = match$1[1];\n                var success = match$1[0];\n                if (success) {\n                  var match$2 = loop(ignoringNewlines, rest, unused);\n                  return /* tuple */[\n                          match$2[0],\n                          List.concat(/* :: */[\n                                res,\n                                /* :: */[\n                                  match$2[1],\n                                  /* [] */0\n                                ]\n                              ]),\n                          match$2[2]\n                        ];\n                }\n                else {\n                  return /* tuple */[\n                          success,\n                          res,\n                          unused\n                        ];\n                }\n                break;\n            case 1 : \n                var match$3 = greedy(function (param, param$1) {\n                      return loop(ignoringNewlines, param, param$1);\n                    }, item[0], children, 1, -1);\n                var unused$1 = match$3[2];\n                var res$1 = match$3[1];\n                var success$1 = match$3[0];\n                if (success$1) {\n                  var match$4 = loop(ignoringNewlines, rest, unused$1);\n                  return /* tuple */[\n                          match$4[0],\n                          List.concat(/* :: */[\n                                res$1,\n                                /* :: */[\n                                  match$4[1],\n                                  /* [] */0\n                                ]\n                              ]),\n                          match$4[2]\n                        ];\n                }\n                else {\n                  return /* tuple */[\n                          success$1,\n                          res$1,\n                          unused$1\n                        ];\n                }\n                break;\n            case 2 : \n                var match$5 = greedy(function (param, param$1) {\n                      return loop(ignoringNewlines, param, param$1);\n                    }, item[0], children, 0, 1);\n                var unused$2 = match$5[2];\n                var res$2 = match$5[1];\n                var success$2 = match$5[0];\n                if (success$2) {\n                  var match$6 = loop(ignoringNewlines, rest, unused$2);\n                  var u2 = match$6[2];\n                  var r2 = match$6[1];\n                  var s2 = match$6[0];\n                  if (Caml_obj.caml_equal(unused$2, children)) {\n                    return /* tuple */[\n                            s2,\n                            r2,\n                            u2\n                          ];\n                  }\n                  else {\n                    return /* tuple */[\n                            s2,\n                            List.concat(/* :: */[\n                                  res$2,\n                                  /* :: */[\n                                    r2,\n                                    /* [] */0\n                                  ]\n                                ]),\n                            u2\n                          ];\n                  }\n                }\n                else {\n                  return /* tuple */[\n                          success$2,\n                          res$2,\n                          unused$2\n                        ];\n                }\n                break;\n            case 4 : \n                var match$7 = loop(ignoringNewlines, /* :: */[\n                      item[0],\n                      /* [] */0\n                    ], children);\n                var unused$3 = match$7[2];\n                var res$3 = match$7[1];\n                var success$3 = match$7[0];\n                if (success$3) {\n                  var match$8 = loop(ignoringNewlines, rest, unused$3);\n                  return /* tuple */[\n                          match$8[0],\n                          List.concat(/* :: */[\n                                res$3,\n                                /* :: */[\n                                  /* :: */[\n                                    /* NoSpace */1,\n                                    /* [] */0\n                                  ],\n                                  /* :: */[\n                                    match$8[1],\n                                    /* [] */0\n                                  ]\n                                ]\n                              ]),\n                          match$8[2]\n                        ];\n                }\n                else {\n                  return /* tuple */[\n                          success$3,\n                          res$3,\n                          unused$3\n                        ];\n                }\n                break;\n            case 5 : \n                var match$9 = loop(ignoringNewlines, /* :: */[\n                      item[0],\n                      /* [] */0\n                    ], children);\n                var unused$4 = match$9[2];\n                var res$4 = match$9[1];\n                var success$4 = match$9[0];\n                if (success$4) {\n                  var match$10 = loop(ignoringNewlines, rest, unused$4);\n                  return /* tuple */[\n                          match$10[0],\n                          List.concat(/* :: */[\n                                /* :: */[\n                                  /* NoSpace */1,\n                                  /* [] */0\n                                ],\n                                /* :: */[\n                                  res$4,\n                                  /* :: */[\n                                    match$10[1],\n                                    /* [] */0\n                                  ]\n                                ]\n                              ]),\n                          match$10[2]\n                        ];\n                }\n                else {\n                  return /* tuple */[\n                          success$4,\n                          res$4,\n                          unused$4\n                        ];\n                }\n                break;\n            case 6 : \n                var match$11 = loop(ignoringNewlines, item[0], children);\n                var unused$5 = match$11[2];\n                var res$5 = match$11[1];\n                var success$5 = match$11[0];\n                if (success$5) {\n                  var match$12 = loop(ignoringNewlines, rest, unused$5);\n                  return /* tuple */[\n                          match$12[0],\n                          List.concat(/* :: */[\n                                res$5,\n                                /* :: */[\n                                  match$12[1],\n                                  /* [] */0\n                                ]\n                              ]),\n                          match$12[2]\n                        ];\n                }\n                else {\n                  return /* tuple */[\n                          success$5,\n                          res$5,\n                          unused$5\n                        ];\n                }\n                break;\n            case 9 : \n                _items = /* :: */[\n                  item[0],\n                  rest\n                ];\n                continue ;\n                case 10 : \n                return processNonTerminal(grammar, item[0], item[1], children, ignoringNewlines, rest, loop);\n            case 11 : \n                var match$13 = item[1];\n                var text = item[0];\n                if (match$13) {\n                  var match$14 = findByLabel(children, match$13[0]);\n                  if (match$14[0]) {\n                    var match$15 = loop(ignoringNewlines, rest, match$14[1]);\n                    return /* tuple */[\n                            match$15[0],\n                            /* :: */[\n                              /* Text */Block.__(0, [text]),\n                              match$15[1]\n                            ],\n                            match$15[2]\n                          ];\n                  }\n                  else {\n                    return /* tuple */[\n                            /* false */0,\n                            /* [] */0,\n                            children\n                          ];\n                  }\n                }\n                else {\n                  var match$16 = loop(ignoringNewlines, rest, children);\n                  return /* tuple */[\n                          match$16[0],\n                          /* :: */[\n                            /* Text */Block.__(0, [text]),\n                            match$16[1]\n                          ],\n                          match$16[2]\n                        ];\n                }\n                break;\n            case 3 : \n            case 12 : \n                return Pervasives.failwith(\"Chars shouldn't be at the top level\");\n            default:\n              _items = rest;\n              continue ;\n              \n          }\n        }\n      }\n      else {\n        return /* tuple */[\n                /* true */1,\n                /* [] */0,\n                children\n              ];\n      }\n    };\n  };\n  var match$2 = loop(ignoringNewlines$1, match[2], children);\n  var res = match$2[1];\n  if (match$2[2]) {\n    Curry._2(Printf.eprintf(/* Format */[\n              /* String_literal */Block.__(11, [\n                  \"Failed to print \",\n                  /* String */Block.__(2, [\n                      /* No_padding */0,\n                      /* String_literal */Block.__(11, [\n                          \" : \",\n                          /* String */Block.__(2, [\n                              /* No_padding */0,\n                              /* Char_literal */Block.__(12, [\n                                  /* \"\\n\" */10,\n                                  /* End_of_format */0\n                                ])\n                            ])\n                        ])\n                    ])\n                ]),\n              \"Failed to print %s : %s\\n\"\n            ]), name, sub);\n    return /* None */0;\n  }\n  else {\n    var $js;\n    var exit = 0;\n    if (res) {\n      var sub$1 = res[0];\n      if (typeof sub$1 === \"number\") {\n        if (sub$1 !== 0) {\n          if (res[1]) {\n            exit = 1;\n          }\n          else {\n            $js = sub$1;\n          }\n        }\n        else if (res[1]) {\n          exit = 1;\n        }\n        else {\n          $js = /* NoSpace */1;\n        }\n      }\n      else if (res[1]) {\n        exit = 1;\n      }\n      else {\n        $js = sub$1;\n      }\n    }\n    else {\n      exit = 1;\n    }\n    if (exit === 1) {\n      $js = isLexical ? /* Lexical */Block.__(3, [res]) : (\n          rule[/* ignoreNewlines */1] ? makeStraightWithEOLs(res) : /* MaybeNewlined */Block.__(1, [res])\n        );\n    }\n    return /* Some */[$js];\n  }\n}\n\nfunction toString($staropt$star, grammar, result) {\n  var maxWidth = $staropt$star ? $staropt$star[0] : 50;\n  var match = resultToOutput(/* false */0, grammar, result);\n  if (match) {\n    return /* Some */[$$String.trim(outputToString(/* record */[\n                        /* maxWidth */maxWidth,\n                        /* indentWidth */2,\n                        /* indentStr */\"  \"\n                      ], -1, match[0])[0])];\n  }\n  else {\n    return /* None */0;\n  }\n}\n\nvar P = 0;\n\nexports.P                    = P;\nexports.Output               = Output;\nexports.pad                  = pad;\nexports.outputToString       = outputToString;\nexports.maybeFind            = maybeFind;\nexports.findByLabel          = findByLabel;\nexports.findByType           = findByType;\nexports.greedy               = greedy;\nexports.passThroughChildren  = passThroughChildren;\nexports.makeStraightWithEOLs = makeStraightWithEOLs;\nexports.resultToOutput       = resultToOutput;\nexports.processNonTerminal   = processNonTerminal;\nexports.nodeToOutput         = nodeToOutput;\nexports.toString             = toString;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./bs_build/prettyPrint.js\n ** module id = 30\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./bs_build/prettyPrint.js?");

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	eval("// Generated by BUCKLESCRIPT VERSION 1.0.1 , PLEASE EDIT WITH CARE\n'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Caml_obj                = __webpack_require__(8);\nvar Caml_exceptions         = __webpack_require__(11);\nvar Pervasives              = __webpack_require__(7);\nvar Hashtbl                 = __webpack_require__(32);\nvar Block                   = __webpack_require__(1);\nvar PackTypes               = __webpack_require__(46);\nvar Char                    = __webpack_require__(20);\nvar Curry                   = __webpack_require__(2);\nvar Printf                  = __webpack_require__(6);\nvar $$Set                   = __webpack_require__(47);\nvar $$String                = __webpack_require__(23);\nvar Caml_string             = __webpack_require__(16);\nvar List                    = __webpack_require__(21);\n\nvar StringSet = $$Set.Make([$$String.compare]);\n\nfunction show_ans(message, param) {\n  var match = param[2];\n  return Curry._3(Printf.eprintf(/* Format */[\n                  /* String */Block.__(2, [\n                      /* No_padding */0,\n                      /* String_literal */Block.__(11, [\n                          \" :: (\",\n                          /* Int */Block.__(4, [\n                              /* Int_d */0,\n                              /* No_padding */0,\n                              /* No_precision */0,\n                              /* String_literal */Block.__(11, [\n                                  \")\\n\",\n                                  /* String */Block.__(2, [\n                                      /* No_padding */0,\n                                      /* Char_literal */Block.__(12, [\n                                          /* \"\\n\" */10,\n                                          /* End_of_format */0\n                                        ])\n                                    ])\n                                ])\n                            ])\n                        ])\n                    ]),\n                  \"%s :: (%d)\\n%s\\n\"\n                ]), message, match[0], Curry._1(PackTypes.$$Error[/* errorsText */6], match[1]));\n}\n\nfunction show_ansorlr(message, ansor) {\n  if (ansor.tag) {\n    return show_ans(message + \"[lr seed]\", ansor[0][/* seed */0]);\n  }\n  else {\n    return show_ans(message, ansor[0]);\n  }\n}\n\nvar Found = Caml_exceptions.create(\"Runtime.Found\");\n\nfunction emptyResult(pos, name, _) {\n  return /* tuple */[\n          /* Leaf */Block.__(0, [\n              /* tuple */[\n                name,\n                \"\"\n              ],\n              \"\",\n              /* tuple */[\n                pos,\n                pos\n              ]\n            ]),\n          /* false */0\n        ];\n}\n\nfunction unwrap(opt) {\n  if (opt) {\n    return opt[0];\n  }\n  else {\n    return Pervasives.failwith(\"Expected Some(x)\");\n  }\n}\n\nfunction tfst(param) {\n  return param[0];\n}\n\nfunction skipWhite(_i, text, len, ignoreNewlines) {\n  while(true) {\n    var i = _i;\n    if (i >= len) {\n      return i;\n    }\n    else {\n      var match = Caml_string.get(text, i);\n      var switcher = match - 9 | 0;\n      if (switcher === 0 || switcher === 1) {\n        if (switcher !== 0) {\n          if (ignoreNewlines) {\n            _i = i + 1 | 0;\n            continue ;\n            \n          }\n          else {\n            return i;\n          }\n        }\n        else {\n          _i = i + 1 | 0;\n          continue ;\n          \n        }\n      }\n      else if (switcher !== 23) {\n        return i;\n      }\n      else {\n        _i = i + 1 | 0;\n        continue ;\n        \n      }\n    }\n  };\n}\n\nfunction skipALineComment(i, start, text, len) {\n  var sl = start.length;\n  if ((sl + i | 0) < len && $$String.sub(text, i, sl) === start) {\n    try {\n      return $$String.index_from(text, i, /* \"\\n\" */10);\n    }\n    catch (exn){\n      if (exn === Caml_builtin_exceptions.not_found) {\n        return len;\n      }\n      else {\n        throw exn;\n      }\n    }\n  }\n  else {\n    return i;\n  }\n}\n\nfunction skipABlockComment(i, param, text, len) {\n  var last = param[1];\n  var first = param[0];\n  var fl = first.length;\n  if ((fl + i | 0) < len && $$String.sub(text, i, fl) === first) {\n    var fc = Caml_string.get(last, 0);\n    var ll = last.length;\n    var _i = i;\n    while(true) {\n      var i$1 = _i;\n      if ((i$1 + ll | 0) >= len) {\n        return Pervasives.failwith(\"Unterminated comment\");\n      }\n      else if (Caml_string.get(text, i$1) === fc && $$String.sub(text, i$1, ll) === last) {\n        return i$1 + ll | 0;\n      }\n      else {\n        _i = i$1 + 1 | 0;\n        continue ;\n        \n      }\n    };\n  }\n  else {\n    return i;\n  }\n}\n\nfunction optOr(orr, opt) {\n  if (opt) {\n    return opt[0];\n  }\n  else {\n    return orr;\n  }\n}\n\nfunction skipLineComments(_i, start, text, len) {\n  while(true) {\n    var i = _i;\n    var i$prime = skipALineComment(i, start, text, len);\n    if (i$prime === len || i === i$prime) {\n      return i$prime;\n    }\n    else {\n      var i$prime$prime = skipWhite(i$prime, text, len, /* true */1);\n      if (i$prime$prime > i$prime) {\n        _i = i$prime$prime;\n        continue ;\n        \n      }\n      else {\n        return i$prime$prime;\n      }\n    }\n  };\n}\n\nfunction skipBlockComments(_i, ends, text, len, skipNewlines) {\n  while(true) {\n    var i = _i;\n    var i$prime = skipABlockComment(i, ends, text, len);\n    if (i$prime === len || i === i$prime) {\n      return i$prime;\n    }\n    else {\n      var i$prime$prime = skipWhite(i$prime, text, len, skipNewlines);\n      if (i$prime$prime > i$prime) {\n        _i = i$prime$prime;\n        continue ;\n        \n      }\n      else {\n        return i$prime$prime;\n      }\n    }\n  };\n}\n\nfunction skipBlockAndLineComments(_i, ends, line, text, len) {\n  while(true) {\n    var i = _i;\n    var i$prime = skipABlockComment(i, ends, text, len);\n    var i$prime$1 = skipWhite(i$prime, text, len, /* true */1);\n    var i$prime$2 = skipALineComment(i$prime$1, line, text, len);\n    if (i$prime$2 === i) {\n      return i$prime$2;\n    }\n    else {\n      _i = i$prime$2;\n      continue ;\n      \n    }\n  };\n}\n\nfunction mergeErrs(param, param$1) {\n  var errs2 = param$1[1];\n  var i2 = param$1[0];\n  var errs1 = param[1];\n  var i1 = param[0];\n  if (Caml_obj.caml_equal(i1, i2)) {\n    return /* tuple */[\n            i1,\n            List.concat(/* :: */[\n                  errs1,\n                  /* :: */[\n                    errs2,\n                    /* [] */0\n                  ]\n                ])\n          ];\n  }\n  else if (Caml_obj.caml_lessthan(i1, i2)) {\n    return /* tuple */[\n            i2,\n            errs2\n          ];\n  }\n  else {\n    return /* tuple */[\n            i1,\n            errs1\n          ];\n  }\n}\n\nfunction greedy(loop, min, max, subr, i, path, greedyCount, isNegated) {\n  var exit = 0;\n  if (max) {\n    if (max[0] !== 0) {\n      exit = 1;\n    }\n    else {\n      return /* tuple */[\n              i,\n              /* [] */0,\n              /* tuple */[\n                -1,\n                /* [] */0\n              ]\n            ];\n    }\n  }\n  else {\n    exit = 1;\n  }\n  if (exit === 1) {\n    if (min > 0) {\n      var match = Curry._5(loop, i, /* :: */[\n            subr,\n            /* [] */0\n          ], /* :: */[\n            /* Iter */Block.__(1, [greedyCount]),\n            path\n          ], 0, isNegated);\n      var err = match[2];\n      var i$prime = match[0];\n      if (i$prime >= i) {\n        var match$1 = greedy(loop, min - 1 | 0, max, subr, i$prime, path, greedyCount + 1 | 0, isNegated);\n        return /* tuple */[\n                match$1[0],\n                List.concat(/* :: */[\n                      match[1],\n                      /* :: */[\n                        match$1[1],\n                        /* [] */0\n                      ]\n                    ]),\n                mergeErrs(err, match$1[2])\n              ];\n      }\n      else {\n        return /* tuple */[\n                -1,\n                /* [] */0,\n                err\n              ];\n      }\n    }\n    else {\n      var match$2 = Curry._5(loop, i, /* :: */[\n            subr,\n            /* [] */0\n          ], /* :: */[\n            /* Iter */Block.__(1, [greedyCount]),\n            path\n          ], 0, isNegated);\n      var err$1 = match$2[2];\n      var i$prime$1 = match$2[0];\n      if (i$prime$1 > i) {\n        var max$1 = max ? /* Some */[max[0] - 1 | 0] : /* None */0;\n        var match$3 = greedy(loop, 0, max$1, subr, i$prime$1, path, greedyCount + 1 | 0, isNegated);\n        return /* tuple */[\n                match$3[0],\n                List.concat(/* :: */[\n                      match$2[1],\n                      /* :: */[\n                        match$3[1],\n                        /* [] */0\n                      ]\n                    ]),\n                mergeErrs(err$1, match$3[2])\n              ];\n      }\n      else {\n        return /* tuple */[\n                i,\n                /* [] */0,\n                err$1\n              ];\n      }\n    }\n  }\n  \n}\n\nfunction apply_rule(grammar, state, rulename, i, ignoringNewlines, isNegated, path) {\n  var isLexical = +(Char.uppercase(Caml_string.get(rulename, 0)) !== Caml_string.get(rulename, 0));\n  var match = recall(grammar, state, rulename, i, isLexical, ignoringNewlines, isNegated, path);\n  if (match) {\n    var memoentry = match[0];\n    state[/* cpos */3] = memoentry[/* pos */1];\n    var match$1 = memoentry[/* ans */0];\n    if (match$1.tag) {\n      var lr = match$1[0];\n      setup_lr(state, rulename, lr);\n      return lr[/* seed */0];\n    }\n    else {\n      return match$1[0];\n    }\n  }\n  else {\n    var lr$1 = /* record */[\n      /* seed : tuple */[\n        -1,\n        emptyResult(i, rulename, isLexical),\n        /* tuple */[\n          -1,\n          /* [] */0\n        ]\n      ],\n      /* rulename */rulename,\n      /* head : None */0\n    ];\n    state[/* lrstack */0] = /* :: */[\n      lr$1,\n      state[/* lrstack */0]\n    ];\n    var memoentry$1 = /* record */[\n      /* ans : LR */Block.__(1, [lr$1]),\n      /* pos */i\n    ];\n    Hashtbl.add(state[/* memo */1], /* tuple */[\n          rulename,\n          i\n        ], memoentry$1);\n    var answer = parse(grammar, state, rulename, i, isLexical, ignoringNewlines, isNegated, path);\n    state[/* lrstack */0] = List.tl(state[/* lrstack */0]);\n    memoentry$1[/* pos */1] = state[/* cpos */3];\n    if (lr$1[/* head */2] !== /* None */0) {\n      lr$1[/* seed */0] = answer;\n      return lr_answer(grammar, state, rulename, i, memoentry$1, isLexical, ignoringNewlines, isNegated, path);\n    }\n    else {\n      memoentry$1[/* ans */0] = /* Answer */Block.__(0, [answer]);\n      return answer;\n    }\n  }\n}\n\nfunction setup_lr(state, rulename, lr) {\n  if (!lr[/* head */2]) {\n    lr[/* head */2] = /* Some */[/* record */[\n        /* hrule */rulename,\n        /* involved_set */StringSet[/* empty */0],\n        /* eval_set */StringSet[/* empty */0]\n      ]];\n  }\n  var lr_head = unwrap(lr[/* head */2]);\n  var _param = state[/* lrstack */0];\n  while(true) {\n    var param = _param;\n    if (param) {\n      var l = param[0];\n      if (Caml_obj.caml_equal(l[/* head */2], /* Some */[lr_head])) {\n        return /* () */0;\n      }\n      else {\n        l[/* head */2] = /* Some */[lr_head];\n        lr_head[/* involved_set */1] = Curry._2(StringSet[/* add */3], l[/* rulename */1], lr_head[/* involved_set */1]);\n        _param = param[1];\n        continue ;\n        \n      }\n    }\n    else {\n      return /* () */0;\n    }\n  };\n}\n\nfunction lr_answer(grammar, state, rulename, i, memoentry, isLexical, ignoringNewlines, isNegated, path) {\n  var match = memoentry[/* ans */0];\n  var lr;\n  if (match.tag) {\n    lr = match[0];\n  }\n  else {\n    throw [\n          Caml_builtin_exceptions.assert_failure,\n          [\n            \"bs_build/runtime.re\",\n            248,\n            18\n          ]\n        ];\n  }\n  var match$1 = lr[/* head */2];\n  var head;\n  if (match$1) {\n    head = match$1[0];\n  }\n  else {\n    throw [\n          Caml_builtin_exceptions.assert_failure,\n          [\n            \"bs_build/runtime.re\",\n            253,\n            14\n          ]\n        ];\n  }\n  if (head[/* hrule */0] !== rulename) {\n    return lr[/* seed */0];\n  }\n  else {\n    memoentry[/* ans */0] = /* Answer */Block.__(0, [lr[/* seed */0]]);\n    if (tfst(lr[/* seed */0]) === -1) {\n      return lr[/* seed */0];\n    }\n    else {\n      return grow_lr(grammar, state, rulename, i, memoentry, head, isLexical, ignoringNewlines, isNegated, path);\n    }\n  }\n}\n\nfunction recall(grammar, state, rulename, i, isLexical, ignoringNewlines, isNegated, path) {\n  var maybeEntry;\n  try {\n    maybeEntry = /* Some */[Hashtbl.find(state[/* memo */1], /* tuple */[\n            rulename,\n            i\n          ])];\n  }\n  catch (exn){\n    if (exn === Caml_builtin_exceptions.not_found) {\n      maybeEntry = /* None */0;\n    }\n    else {\n      throw exn;\n    }\n  }\n  var maybeHead;\n  try {\n    maybeHead = /* Some */[Hashtbl.find(state[/* heads */2], i)];\n  }\n  catch (exn$1){\n    if (exn$1 === Caml_builtin_exceptions.not_found) {\n      maybeHead = /* None */0;\n    }\n    else {\n      throw exn$1;\n    }\n  }\n  if (maybeHead) {\n    var head = maybeHead[0];\n    if (maybeEntry === /* None */0 && !Curry._2(StringSet[/* mem */2], rulename, Curry._2(StringSet[/* add */3], head[/* hrule */0], head[/* involved_set */1]))) {\n      return /* Some */[/* record */[\n                /* ans : Answer */Block.__(0, [/* tuple */[\n                      -1,\n                      emptyResult(i, rulename, isLexical),\n                      /* tuple */[\n                        -1,\n                        /* [] */0\n                      ]\n                    ]]),\n                /* pos */i\n              ]];\n    }\n    else {\n      if (Curry._2(StringSet[/* mem */2], rulename, head[/* eval_set */2])) {\n        head[/* eval_set */2] = Curry._2(StringSet[/* remove */5], rulename, head[/* eval_set */2]);\n        var answer = parse(grammar, state, rulename, i, isLexical, ignoringNewlines, isNegated, path);\n        var memoentry = unwrap(maybeEntry);\n        memoentry[/* ans */0] = /* Answer */Block.__(0, [answer]);\n        memoentry[/* pos */1] = state[/* cpos */3];\n      }\n      return maybeEntry;\n    }\n  }\n  else {\n    return maybeEntry;\n  }\n}\n\nfunction grow_lr(grammar, state, rulename, i, memoentry, head, isLexical, ignoringNewlines, isNegated, path) {\n  Hashtbl.replace(state[/* heads */2], i, head);\n  var loop = function (_param) {\n    while(true) {\n      state[/* cpos */3] = i;\n      head[/* eval_set */2] = head[/* involved_set */1];\n      var ans = parse(grammar, state, rulename, i, isLexical, ignoringNewlines, isNegated, path);\n      var match = memoentry[/* ans */0];\n      var oans;\n      oans = match.tag ? -1 : match[0][0];\n      if (tfst(ans) === -1 || state[/* cpos */3] <= memoentry[/* pos */1] && tfst(ans) <= oans) {\n        var match$1 = memoentry[/* ans */0];\n        if (!match$1.tag) {\n          var match$2 = match$1[0];\n          memoentry[/* ans */0] = /* Answer */Block.__(0, [/* tuple */[\n                match$2[0],\n                match$2[1],\n                mergeErrs(match$2[2], ans[2])\n              ]]);\n        }\n        return /* () */0;\n      }\n      else {\n        memoentry[/* ans */0] = /* Answer */Block.__(0, [ans]);\n        memoentry[/* pos */1] = state[/* cpos */3];\n        _param = /* () */0;\n        continue ;\n        \n      }\n    };\n  };\n  loop(/* () */0);\n  Hashtbl.remove(state[/* heads */2], i);\n  state[/* cpos */3] = memoentry[/* pos */1];\n  var match = memoentry[/* ans */0];\n  if (match.tag) {\n    throw [\n          Caml_builtin_exceptions.assert_failure,\n          [\n            \"bs_build/runtime.re\",\n            333,\n            14\n          ]\n        ];\n  }\n  else {\n    return match[0];\n  }\n}\n\nfunction parse(grammar, state, rulename, i, isLexical, ignoringNewlines, isNegated, path) {\n  var match;\n  try {\n    match = List.assoc(rulename, grammar[/* rules */2]);\n  }\n  catch (exn){\n    if (exn === Caml_builtin_exceptions.not_found) {\n      Curry._1(Printf.eprintf(/* Format */[\n                /* String_literal */Block.__(11, [\n                    \"error in grammar: unknown rulename '\",\n                    /* String */Block.__(2, [\n                        /* No_padding */0,\n                        /* String_literal */Block.__(11, [\n                            \"'\\n\",\n                            /* End_of_format */0\n                          ])\n                      ])\n                  ]),\n                \"error in grammar: unknown rulename '%s'\\n\"\n              ]), rulename);\n      match = Pervasives.exit(1);\n    }\n    else {\n      throw exn;\n    }\n  }\n  var choices = match[/* choices */3];\n  var leaf = match[/* leaf */2];\n  var passThrough = match[/* passThrough */0];\n  var ignoringNewlines$1;\n  switch (match[/* ignoreNewlines */1]) {\n    case 0 : \n        ignoringNewlines$1 = /* true */1;\n        break;\n    case 1 : \n        ignoringNewlines$1 = /* false */0;\n        break;\n    case 2 : \n        ignoringNewlines$1 = ignoringNewlines;\n        break;\n    \n  }\n  var numChoices = List.length(choices);\n  var _choices = choices;\n  var _prevErrors = /* tuple */[\n    -1,\n    /* [] */0\n  ];\n  var _choiceIndex = 0;\n  while(true) {\n    var choiceIndex = _choiceIndex;\n    var prevErrors = _prevErrors;\n    var choices$1 = _choices;\n    if (choices$1) {\n      var match$1 = choices$1[0];\n      var sub_name = match$1[0];\n      var loop = function (_i, _items, path, _loopIndex, isNegated) {\n        while(true) {\n          var loopIndex = _loopIndex;\n          var items = _items;\n          var i = _i;\n          var match;\n          if (isLexical) {\n            match = /* tuple */[\n              i,\n              items\n            ];\n          }\n          else {\n            var exit = 0;\n            if (items) {\n              var match$1 = items[0];\n              if (typeof match$1 === \"number\" || match$1.tag !== 9) {\n                exit = 1;\n              }\n              else {\n                match = /* tuple */[\n                  i,\n                  /* :: */[\n                    match$1[0],\n                    items[1]\n                  ]\n                ];\n              }\n            }\n            else {\n              exit = 1;\n            }\n            if (exit === 1) {\n              var i$1 = skipWhite(i, state[/* input */5], state[/* len */4], ignoringNewlines$1);\n              var match$2 = grammar[/* blockComment */1];\n              var match$3 = grammar[/* lineComment */0];\n              var i$prime;\n              if (ignoringNewlines$1 !== 0) {\n                if (match$2) {\n                  var x = match$2[0];\n                  i$prime = match$3 ? skipBlockAndLineComments(i$1, x, match$3[0], state[/* input */5], state[/* len */4]) : skipBlockComments(i$1, x, state[/* input */5], state[/* len */4], /* true */1);\n                }\n                else {\n                  i$prime = match$3 ? skipLineComments(i$1, match$3[0], state[/* input */5], state[/* len */4]) : i$1;\n                }\n              }\n              else {\n                i$prime = match$2 ? skipBlockComments(i$1, match$2[0], state[/* input */5], state[/* len */4], /* false */0) : i$1;\n              }\n              match = /* tuple */[\n                i$prime,\n                items\n              ];\n            }\n            \n          }\n          var items$1 = match[1];\n          var i$2 = match[0];\n          if (items$1) {\n            var item = items$1[0];\n            if (typeof item === \"number\") {\n              switch (item) {\n                case 0 : \n                    if (i$2 >= state[/* len */4]) {\n                      return /* tuple */[\n                              i$2,\n                              /* [] */0,\n                              /* tuple */[\n                                -1,\n                                /* [] */0\n                              ]\n                            ];\n                    }\n                    else {\n                      return /* tuple */[\n                              -1,\n                              /* [] */0,\n                              /* tuple */[\n                                i$2,\n                                /* :: */[\n                                  /* tuple */[\n                                    /* true */1,\n                                    /* :: */[\n                                      /* Item */Block.__(0, [\n                                          /* EOF */0,\n                                          loopIndex\n                                        ]),\n                                      path\n                                    ]\n                                  ],\n                                  /* [] */0\n                                ]\n                              ]\n                            ];\n                    }\n                case 1 : \n                    var rest = items$1[1];\n                    var match$4 = grammar[/* lineComment */0];\n                    if (match$4) {\n                      var lineComment = match$4[0];\n                      var i$prime$1 = skipLineComments(i$2, lineComment, state[/* input */5], state[/* len */4]);\n                      var i$prime$2;\n                      if (i$prime$1 > i$2 || i$prime$1 >= state[/* len */4] || Caml_string.get(state[/* input */5], i$2) !== /* \"\\n\" */10) {\n                        i$prime$2 = i$prime$1;\n                      }\n                      else {\n                        var i$prime$3 = skipWhite(i$prime$1, state[/* input */5], state[/* len */4], /* true */1);\n                        i$prime$2 = skipLineComments(i$prime$3, lineComment, state[/* input */5], state[/* len */4]);\n                      }\n                      if (i$prime$2 > i$2 || i$prime$2 >= state[/* len */4]) {\n                        var match$5 = loop(i$prime$2, rest, path, loopIndex + 1 | 0, isNegated);\n                        return /* tuple */[\n                                match$5[0],\n                                match$5[1],\n                                match$5[2]\n                              ];\n                      }\n                      else {\n                        return /* tuple */[\n                                -1,\n                                /* [] */0,\n                                /* tuple */[\n                                  i$2,\n                                  /* :: */[\n                                    /* tuple */[\n                                      /* true */1,\n                                      /* :: */[\n                                        /* Item */Block.__(0, [\n                                            item,\n                                            loopIndex\n                                          ]),\n                                        path\n                                      ]\n                                    ],\n                                    /* [] */0\n                                  ]\n                                ]\n                              ];\n                      }\n                    }\n                    else if (i$2 >= state[/* len */4] || Caml_string.get(state[/* input */5], i$2) === /* \"\\n\" */10) {\n                      var i$prime$4 = skipWhite(i$2, state[/* input */5], state[/* len */4], /* true */1);\n                      var match$6 = loop(i$prime$4, rest, path, loopIndex + 1 | 0, isNegated);\n                      return /* tuple */[\n                              match$6[0],\n                              match$6[1],\n                              match$6[2]\n                            ];\n                    }\n                    else {\n                      return /* tuple */[\n                              -1,\n                              /* [] */0,\n                              /* tuple */[\n                                i$2,\n                                /* :: */[\n                                  /* tuple */[\n                                    /* true */1,\n                                    /* :: */[\n                                      /* Item */Block.__(0, [\n                                          item,\n                                          loopIndex\n                                        ]),\n                                      path\n                                    ]\n                                  ],\n                                  /* [] */0\n                                ]\n                              ]\n                            ];\n                    }\n                    break;\n                case 2 : \n                    _loopIndex = loopIndex + 1 | 0;\n                    _items = items$1[1];\n                    _i = i$2;\n                    continue ;\n                    default:\n                  _items = /* :: */[\n                    item[0],\n                    items$1[1]\n                  ];\n                  _i = i$2;\n                  continue ;\n                  \n              }\n            }\n            else {\n              switch (item.tag | 0) {\n                case 0 : \n                    var match$7 = greedy(loop, 0, /* None */0, item[0], i$2, /* :: */[\n                          /* Item */Block.__(0, [\n                              item,\n                              loopIndex\n                            ]),\n                          path\n                        ], 0, isNegated);\n                    var errs = match$7[2];\n                    var i$prime$5 = match$7[0];\n                    if (i$prime$5 >= i$2) {\n                      var match$8 = loop(i$prime$5, items$1[1], path, loopIndex + 1 | 0, isNegated);\n                      return /* tuple */[\n                              match$8[0],\n                              List.concat(/* :: */[\n                                    match$7[1],\n                                    /* :: */[\n                                      match$8[1],\n                                      /* [] */0\n                                    ]\n                                  ]),\n                              mergeErrs(errs, match$8[2])\n                            ];\n                    }\n                    else {\n                      return /* tuple */[\n                              -1,\n                              /* [] */0,\n                              errs\n                            ];\n                    }\n                    break;\n                case 1 : \n                    var match$9 = greedy(loop, 1, /* None */0, item[0], i$2, /* :: */[\n                          /* Item */Block.__(0, [\n                              item,\n                              loopIndex\n                            ]),\n                          path\n                        ], 0, isNegated);\n                    var errs$1 = match$9[2];\n                    var i$prime$6 = match$9[0];\n                    if (i$prime$6 >= i$2) {\n                      var match$10 = loop(i$prime$6, items$1[1], path, loopIndex + 1 | 0, isNegated);\n                      return /* tuple */[\n                              match$10[0],\n                              List.concat(/* :: */[\n                                    match$9[1],\n                                    /* :: */[\n                                      match$10[1],\n                                      /* [] */0\n                                    ]\n                                  ]),\n                              mergeErrs(errs$1, match$10[2])\n                            ];\n                    }\n                    else {\n                      return /* tuple */[\n                              -1,\n                              /* [] */0,\n                              errs$1\n                            ];\n                    }\n                    break;\n                case 2 : \n                    var match$11 = greedy(loop, 0, /* Some */[1], item[0], i$2, /* :: */[\n                          /* Item */Block.__(0, [\n                              item,\n                              loopIndex\n                            ]),\n                          path\n                        ], 0, isNegated);\n                    var errs$2 = match$11[2];\n                    var i$prime$7 = match$11[0];\n                    if (i$prime$7 >= i$2) {\n                      var match$12 = loop(i$prime$7, items$1[1], path, loopIndex + 1 | 0, isNegated);\n                      return /* tuple */[\n                              match$12[0],\n                              List.concat(/* :: */[\n                                    match$11[1],\n                                    /* :: */[\n                                      match$12[1],\n                                      /* [] */0\n                                    ]\n                                  ]),\n                              mergeErrs(errs$2, match$12[2])\n                            ];\n                    }\n                    else {\n                      return /* tuple */[\n                              -1,\n                              /* [] */0,\n                              errs$2\n                            ];\n                    }\n                    break;\n                case 3 : \n                    var label = item[0];\n                    if (i$2 >= state[/* len */4]) {\n                      return /* tuple */[\n                              -1,\n                              /* [] */0,\n                              /* tuple */[\n                                i$2,\n                                /* :: */[\n                                  /* tuple */[\n                                    /* true */1,\n                                    /* :: */[\n                                      /* Item */Block.__(0, [\n                                          item,\n                                          loopIndex\n                                        ]),\n                                      path\n                                    ]\n                                  ],\n                                  /* [] */0\n                                ]\n                              ]\n                            ];\n                    }\n                    else {\n                      var match$13 = loop(i$2 + 1 | 0, items$1[1], path, loopIndex + 1 | 0, isNegated);\n                      var children = match$13[1];\n                      var contents = $$String.sub(state[/* input */5], i$2, 1);\n                      var children$1 = label ? /* :: */[\n                          /* tuple */[\n                            label[0],\n                            /* Leaf */Block.__(0, [\n                                /* tuple */[\n                                  \"\",\n                                  contents\n                                ],\n                                contents,\n                                /* tuple */[\n                                  i$2,\n                                  i$2 + 1 | 0\n                                ]\n                              ])\n                          ],\n                          children\n                        ] : children;\n                      return /* tuple */[\n                              match$13[0],\n                              children$1,\n                              match$13[2]\n                            ];\n                    }\n                    break;\n                case 6 : \n                    _items = List.concat(/* :: */[\n                          item[0],\n                          /* :: */[\n                            items$1[1],\n                            /* [] */0\n                          ]\n                        ]);\n                    _i = i$2;\n                    continue ;\n                    case 7 : \n                    var match$14 = loop(i$2, /* :: */[\n                          item[0],\n                          /* [] */0\n                        ], path, loopIndex + 1 | 0, isNegated);\n                    if (match$14[0] >= i$2) {\n                      _loopIndex = loopIndex + 1 | 0;\n                      _items = items$1[1];\n                      _i = i$2;\n                      continue ;\n                      \n                    }\n                    else {\n                      return /* tuple */[\n                              -1,\n                              /* [] */0,\n                              match$14[2]\n                            ];\n                    }\n                    break;\n                case 8 : \n                    var p = item[0];\n                    var match$15 = loop(i$2, /* :: */[\n                          p,\n                          /* [] */0\n                        ], /* :: */[\n                          /* Item */Block.__(0, [\n                              /* Not */Block.__(8, [p]),\n                              loopIndex\n                            ]),\n                          path\n                        ], 0, !isNegated);\n                    if (match$15[0] >= i$2) {\n                      return /* tuple */[\n                              -1,\n                              /* [] */0,\n                              match$15[2]\n                            ];\n                    }\n                    else {\n                      _loopIndex = loopIndex + 1 | 0;\n                      _items = items$1[1];\n                      _i = i$2;\n                      continue ;\n                      \n                    }\n                    break;\n                case 10 : \n                    var match$16 = apply_rule(grammar, state, item[0], i$2, ignoringNewlines$1, isNegated, /* :: */[\n                          /* Item */Block.__(0, [\n                              item,\n                              loopIndex\n                            ]),\n                          path\n                        ]);\n                    var errs$3 = match$16[2];\n                    var match$17 = match$16[1];\n                    var result = match$17[0];\n                    var i$prime$8 = match$16[0];\n                    if (i$prime$8 >= i$2) {\n                      var match$18 = loop(i$prime$8, items$1[1], path, loopIndex + 1 | 0, isNegated);\n                      var children$2 = match$18[1];\n                      var children$3 = match$17[1] !== 0 ? (\n                          result.tag ? List.concat(/* :: */[\n                                  result[1],\n                                  /* :: */[\n                                    children$2,\n                                    /* [] */0\n                                  ]\n                                ]) : Pervasives.failwith(\"Passthrough can't have a leaf node\")\n                        ) : /* :: */[\n                          /* tuple */[\n                            optOr(\"\", item[1]),\n                            result\n                          ],\n                          children$2\n                        ];\n                      return /* tuple */[\n                              match$18[0],\n                              children$3,\n                              mergeErrs(errs$3, match$18[2])\n                            ];\n                    }\n                    else {\n                      return /* tuple */[\n                              -1,\n                              /* [] */0,\n                              errs$3\n                            ];\n                    }\n                    break;\n                case 11 : \n                    var label$1 = item[1];\n                    var target_string = item[0];\n                    var slen = target_string.length;\n                    if ((i$2 + slen | 0) > state[/* len */4]) {\n                      return /* tuple */[\n                              -1,\n                              /* [] */0,\n                              /* tuple */[\n                                i$2,\n                                /* :: */[\n                                  /* tuple */[\n                                    /* true */1,\n                                    /* :: */[\n                                      /* Item */Block.__(0, [\n                                          item,\n                                          loopIndex\n                                        ]),\n                                      path\n                                    ]\n                                  ],\n                                  /* [] */0\n                                ]\n                              ]\n                            ];\n                    }\n                    else {\n                      var sub = $$String.sub(state[/* input */5], i$2, slen);\n                      if (sub === target_string) {\n                        var match$19 = loop(i$2 + slen | 0, items$1[1], path, loopIndex + 1 | 0, isNegated);\n                        var children$4 = match$19[1];\n                        var children$5 = label$1 ? /* :: */[\n                            /* tuple */[\n                              label$1[0],\n                              /* Leaf */Block.__(0, [\n                                  /* tuple */[\n                                    \"\",\n                                    target_string\n                                  ],\n                                  target_string,\n                                  /* tuple */[\n                                    i$2,\n                                    i$2 + slen | 0\n                                  ]\n                                ])\n                            ],\n                            children$4\n                          ] : children$4;\n                        return /* tuple */[\n                                match$19[0],\n                                children$5,\n                                match$19[2]\n                              ];\n                      }\n                      else {\n                        return /* tuple */[\n                                -1,\n                                /* [] */0,\n                                /* tuple */[\n                                  i$2,\n                                  /* :: */[\n                                    /* tuple */[\n                                      /* true */1,\n                                      /* :: */[\n                                        /* Item */Block.__(0, [\n                                            item,\n                                            loopIndex\n                                          ]),\n                                        path\n                                      ]\n                                    ],\n                                    /* [] */0\n                                  ]\n                                ]\n                              ];\n                      }\n                    }\n                    break;\n                case 12 : \n                    var label$2 = item[2];\n                    if (i$2 >= state[/* len */4]) {\n                      return /* tuple */[\n                              -1,\n                              /* [] */0,\n                              /* tuple */[\n                                i$2,\n                                /* :: */[\n                                  /* tuple */[\n                                    /* true */1,\n                                    /* :: */[\n                                      /* Item */Block.__(0, [\n                                          item,\n                                          loopIndex\n                                        ]),\n                                      path\n                                    ]\n                                  ],\n                                  /* [] */0\n                                ]\n                              ]\n                            ];\n                    }\n                    else if (Caml_string.get(state[/* input */5], i$2) >= item[0] && Caml_string.get(state[/* input */5], i$2) <= item[1]) {\n                      var match$20 = loop(i$2 + 1 | 0, items$1[1], path, loopIndex + 1 | 0, isNegated);\n                      var children$6 = match$20[1];\n                      var contents$1 = $$String.sub(state[/* input */5], i$2, 1);\n                      var children$7 = label$2 ? /* :: */[\n                          /* tuple */[\n                            label$2[0],\n                            /* Leaf */Block.__(0, [\n                                /* tuple */[\n                                  \"\",\n                                  contents$1\n                                ],\n                                contents$1,\n                                /* tuple */[\n                                  i$2,\n                                  i$2 + 1 | 0\n                                ]\n                              ])\n                          ],\n                          children$6\n                        ] : children$6;\n                      return /* tuple */[\n                              match$20[0],\n                              children$7,\n                              match$20[2]\n                            ];\n                    }\n                    else {\n                      return /* tuple */[\n                              -1,\n                              /* [] */0,\n                              /* tuple */[\n                                i$2,\n                                /* :: */[\n                                  /* tuple */[\n                                    /* true */1,\n                                    /* :: */[\n                                      /* Item */Block.__(0, [\n                                          item,\n                                          loopIndex\n                                        ]),\n                                      path\n                                    ]\n                                  ],\n                                  /* [] */0\n                                ]\n                              ]\n                            ];\n                    }\n                    break;\n                default:\n                  _items = /* :: */[\n                    item[0],\n                    items$1[1]\n                  ];\n                  _i = i$2;\n                  continue ;\n                  \n              }\n            }\n          }\n          else {\n            return /* tuple */[\n                    i$2,\n                    /* [] */0,\n                    /* tuple */[\n                      -1,\n                      /* [] */0\n                    ]\n                  ];\n          }\n        };\n      };\n      var match$2 = +(numChoices === 1);\n      var subPath = match$2 !== 0 ? path : /* :: */[\n          /* Choice */Block.__(2, [\n              choiceIndex,\n              sub_name\n            ]),\n          path\n        ];\n      var match$3 = loop(i, match$1[2], subPath, 0, isNegated);\n      var i$prime = match$3[0];\n      var errs = mergeErrs(prevErrors, match$3[2]);\n      if (i$prime >= i) {\n        var name = /* tuple */[\n          rulename,\n          sub_name\n        ];\n        var loc = /* tuple */[\n          i,\n          i$prime\n        ];\n        var result_000 = leaf !== 0 ? /* Leaf */Block.__(0, [\n              name,\n              $$String.sub(state[/* input */5], i, i$prime - i | 0),\n              loc\n            ]) : /* Node */Block.__(1, [\n              name,\n              match$3[1],\n              loc\n            ]);\n        var result = /* tuple */[\n          result_000,\n          passThrough\n        ];\n        return /* tuple */[\n                i$prime,\n                result,\n                errs\n              ];\n      }\n      else {\n        _choiceIndex = choiceIndex + 1 | 0;\n        _prevErrors = errs;\n        _choices = choices$1[1];\n        continue ;\n        \n      }\n    }\n    else {\n      return /* tuple */[\n              -1,\n              emptyResult(i, rulename, isLexical),\n              prevErrors\n            ];\n    }\n  };\n}\n\nfunction initialState(input) {\n  return /* record */[\n          /* lrstack : [] */0,\n          /* memo */Hashtbl.create(/* None */0, 100),\n          /* heads */Hashtbl.create(/* None */0, 100),\n          /* cpos */0,\n          /* len */input.length,\n          /* input */input\n        ];\n}\n\nfunction parse$1(grammar, start, input) {\n  var state = initialState(input);\n  var match = apply_rule(grammar, state, start, 0, /* false */0, /* false */0, /* [] */0);\n  var errs = match[2];\n  var result = match[1][0];\n  var i = match[0];\n  if (i === -1) {\n    return /* Failure */Block.__(1, [\n              /* None */0,\n              /* tuple */[\n                0,\n                errs\n              ]\n            ]);\n  }\n  else if (i < state[/* len */4]) {\n    return /* Failure */Block.__(1, [\n              /* Some */[result],\n              /* tuple */[\n                i,\n                errs\n              ]\n            ]);\n  }\n  else {\n    return /* Success */Block.__(0, [result]);\n  }\n}\n\nvar P = 0;\n\nvar R = 0;\n\nvar RP = 0;\n\nexports.P                        = P;\nexports.R                        = R;\nexports.RP                       = RP;\nexports.StringSet                = StringSet;\nexports.show_ans                 = show_ans;\nexports.show_ansorlr             = show_ansorlr;\nexports.Found                    = Found;\nexports.emptyResult              = emptyResult;\nexports.unwrap                   = unwrap;\nexports.tfst                     = tfst;\nexports.skipWhite                = skipWhite;\nexports.skipALineComment         = skipALineComment;\nexports.skipABlockComment        = skipABlockComment;\nexports.optOr                    = optOr;\nexports.skipLineComments         = skipLineComments;\nexports.skipBlockComments        = skipBlockComments;\nexports.skipBlockAndLineComments = skipBlockAndLineComments;\nexports.mergeErrs                = mergeErrs;\nexports.greedy                   = greedy;\nexports.apply_rule               = apply_rule;\nexports.setup_lr                 = setup_lr;\nexports.lr_answer                = lr_answer;\nexports.recall                   = recall;\nexports.grow_lr                  = grow_lr;\nexports.initialState             = initialState;\nexports.parse                    = parse$1;\n/* StringSet Not a pure module */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./bs_build/runtime.js\n ** module id = 31\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./bs_build/runtime.js?");

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Bytes                   = __webpack_require__(19);\nvar Caml_obj                = __webpack_require__(8);\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar CamlinternalLazy        = __webpack_require__(33);\nvar Caml_sys                = __webpack_require__(36);\nvar Pervasives              = __webpack_require__(7);\nvar Block                   = __webpack_require__(1);\nvar Sys                     = __webpack_require__(22);\nvar Curry                   = __webpack_require__(2);\nvar Caml_array              = __webpack_require__(5);\nvar $$Array                 = __webpack_require__(37);\nvar Caml_string             = __webpack_require__(16);\nvar Caml_hash               = __webpack_require__(38);\nvar Random                  = __webpack_require__(40);\n\nfunction hash(x) {\n  return Caml_hash.caml_hash(10, 100, 0, x);\n}\n\nfunction hash_param(n1, n2, x) {\n  return Caml_hash.caml_hash(n1, n2, 0, x);\n}\n\nfunction seeded_hash(seed, x) {\n  return Caml_hash.caml_hash(10, 100, seed, x);\n}\n\nvar params;\n\ntry {\n  params = Caml_sys.caml_sys_getenv(\"OCAMLRUNPARAM\");\n}\ncatch (exn){\n  try {\n    params = Caml_sys.caml_sys_getenv(\"CAMLRUNPARAM\");\n  }\n  catch (exn$1){\n    params = \"\";\n  }\n}\n\nvar randomized_default = Bytes.contains(Caml_string.bytes_of_string(params), /* \"R\" */82);\n\nvar randomized = [randomized_default];\n\nfunction randomize() {\n  randomized[0] = /* true */1;\n  return /* () */0;\n}\n\nvar prng = Block.__(246, [function () {\n      return Curry._1(Random.State[/* make_self_init */1], /* () */0);\n    }]);\n\nfunction power_2_above(_x, n) {\n  while(true) {\n    var x = _x;\n    if (x >= n) {\n      return x;\n    }\n    else if ((x << 1) > Sys.max_array_length) {\n      return x;\n    }\n    else {\n      _x = (x << 1);\n      continue ;\n      \n    }\n  };\n}\n\nfunction create($staropt$star, initial_size) {\n  var random = $staropt$star ? $staropt$star[0] : randomized[0];\n  var s = power_2_above(16, initial_size);\n  var seed;\n  if (random) {\n    var tag = prng.tag | 0;\n    seed = Curry._1(Random.State[/* bits */3], tag === 250 ? prng[0] : (\n            tag === 246 ? CamlinternalLazy.force_lazy_block(prng) : prng\n          ));\n  }\n  else {\n    seed = 0;\n  }\n  return /* record */[\n          /* size */0,\n          /* data */Caml_array.caml_make_vect(s, /* Empty */0),\n          /* seed */seed,\n          /* initial_size */s\n        ];\n}\n\nfunction clear(h) {\n  h[/* size */0] = 0;\n  var len = h[/* data */1].length;\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    h[/* data */1][i] = /* Empty */0;\n  }\n  return /* () */0;\n}\n\nfunction reset(h) {\n  var len = h[/* data */1].length;\n  if (h.length < 4 || len === h[/* initial_size */3]) {\n    return clear(h);\n  }\n  else {\n    h[/* size */0] = 0;\n    h[/* data */1] = Caml_array.caml_make_vect(h[/* initial_size */3], /* Empty */0);\n    return /* () */0;\n  }\n}\n\nfunction copy(h) {\n  return /* record */[\n          /* size */h[/* size */0],\n          /* data */$$Array.copy(h[/* data */1]),\n          /* seed */h[/* seed */2],\n          /* initial_size */h[/* initial_size */3]\n        ];\n}\n\nfunction length(h) {\n  return h[/* size */0];\n}\n\nfunction resize(indexfun, h) {\n  var odata = h[/* data */1];\n  var osize = odata.length;\n  var nsize = (osize << 1);\n  if (nsize < Sys.max_array_length) {\n    var ndata = Caml_array.caml_make_vect(nsize, /* Empty */0);\n    h[/* data */1] = ndata;\n    var insert_bucket = function (param) {\n      if (param) {\n        var key = param[0];\n        insert_bucket(param[2]);\n        var nidx = Curry._2(indexfun, h, key);\n        ndata[nidx] = /* Cons */[\n          key,\n          param[1],\n          ndata[nidx]\n        ];\n        return /* () */0;\n      }\n      else {\n        return /* () */0;\n      }\n    };\n    for(var i = 0 ,i_finish = osize - 1 | 0; i <= i_finish; ++i){\n      insert_bucket(odata[i]);\n    }\n    return /* () */0;\n  }\n  else {\n    return 0;\n  }\n}\n\nfunction key_index(h, key) {\n  if (h.length >= 3) {\n    return Caml_hash.caml_hash(10, 100, h[/* seed */2], key) & (h[/* data */1].length - 1 | 0);\n  }\n  else {\n    return function () {\n              throw \"caml_hash_univ_param not implemented by bucklescript yet\\n\";\n            }() % h[/* data */1].length;\n  }\n}\n\nfunction add(h, key, info) {\n  var i = key_index(h, key);\n  var bucket_002 = h[/* data */1][i];\n  var bucket = /* Cons */[\n    key,\n    info,\n    bucket_002\n  ];\n  h[/* data */1][i] = bucket;\n  h[/* size */0] = h[/* size */0] + 1 | 0;\n  if (h[/* size */0] > (h[/* data */1].length << 1)) {\n    return resize(key_index, h);\n  }\n  else {\n    return 0;\n  }\n}\n\nfunction remove(h, key) {\n  var remove_bucket = function (param) {\n    if (param) {\n      var next = param[2];\n      var k = param[0];\n      if (Caml_obj.caml_compare(k, key)) {\n        return /* Cons */[\n                k,\n                param[1],\n                remove_bucket(next)\n              ];\n      }\n      else {\n        h[/* size */0] = h[/* size */0] - 1 | 0;\n        return next;\n      }\n    }\n    else {\n      return /* Empty */0;\n    }\n  };\n  var i = key_index(h, key);\n  h[/* data */1][i] = remove_bucket(h[/* data */1][i]);\n  return /* () */0;\n}\n\nfunction find(h, key) {\n  var match = h[/* data */1][key_index(h, key)];\n  if (match) {\n    var rest1 = match[2];\n    if (Caml_obj.caml_compare(key, match[0])) {\n      if (rest1) {\n        var rest2 = rest1[2];\n        if (Caml_obj.caml_compare(key, rest1[0])) {\n          if (rest2) {\n            if (Caml_obj.caml_compare(key, rest2[0])) {\n              var key$1 = key;\n              var _param = rest2[2];\n              while(true) {\n                var param = _param;\n                if (param) {\n                  if (Caml_obj.caml_compare(key$1, param[0])) {\n                    _param = param[2];\n                    continue ;\n                    \n                  }\n                  else {\n                    return param[1];\n                  }\n                }\n                else {\n                  throw Caml_builtin_exceptions.not_found;\n                }\n              };\n            }\n            else {\n              return rest2[1];\n            }\n          }\n          else {\n            throw Caml_builtin_exceptions.not_found;\n          }\n        }\n        else {\n          return rest1[1];\n        }\n      }\n      else {\n        throw Caml_builtin_exceptions.not_found;\n      }\n    }\n    else {\n      return match[1];\n    }\n  }\n  else {\n    throw Caml_builtin_exceptions.not_found;\n  }\n}\n\nfunction find_all(h, key) {\n  var find_in_bucket = function (_param) {\n    while(true) {\n      var param = _param;\n      if (param) {\n        var rest = param[2];\n        if (Caml_obj.caml_compare(param[0], key)) {\n          _param = rest;\n          continue ;\n          \n        }\n        else {\n          return /* :: */[\n                  param[1],\n                  find_in_bucket(rest)\n                ];\n        }\n      }\n      else {\n        return /* [] */0;\n      }\n    };\n  };\n  return find_in_bucket(h[/* data */1][key_index(h, key)]);\n}\n\nfunction replace(h, key, info) {\n  var replace_bucket = function (param) {\n    if (param) {\n      var next = param[2];\n      var k = param[0];\n      if (Caml_obj.caml_compare(k, key)) {\n        return /* Cons */[\n                k,\n                param[1],\n                replace_bucket(next)\n              ];\n      }\n      else {\n        return /* Cons */[\n                key,\n                info,\n                next\n              ];\n      }\n    }\n    else {\n      throw Caml_builtin_exceptions.not_found;\n    }\n  };\n  var i = key_index(h, key);\n  var l = h[/* data */1][i];\n  try {\n    h[/* data */1][i] = replace_bucket(l);\n    return /* () */0;\n  }\n  catch (exn){\n    if (exn === Caml_builtin_exceptions.not_found) {\n      h[/* data */1][i] = /* Cons */[\n        key,\n        info,\n        l\n      ];\n      h[/* size */0] = h[/* size */0] + 1 | 0;\n      if (h[/* size */0] > (h[/* data */1].length << 1)) {\n        return resize(key_index, h);\n      }\n      else {\n        return 0;\n      }\n    }\n    else {\n      throw exn;\n    }\n  }\n}\n\nfunction mem(h, key) {\n  var _param = h[/* data */1][key_index(h, key)];\n  while(true) {\n    var param = _param;\n    if (param) {\n      if (Caml_obj.caml_compare(param[0], key)) {\n        _param = param[2];\n        continue ;\n        \n      }\n      else {\n        return /* true */1;\n      }\n    }\n    else {\n      return /* false */0;\n    }\n  };\n}\n\nfunction iter(f, h) {\n  var do_bucket = function (_param) {\n    while(true) {\n      var param = _param;\n      if (param) {\n        Curry._2(f, param[0], param[1]);\n        _param = param[2];\n        continue ;\n        \n      }\n      else {\n        return /* () */0;\n      }\n    };\n  };\n  var d = h[/* data */1];\n  for(var i = 0 ,i_finish = d.length - 1 | 0; i <= i_finish; ++i){\n    do_bucket(d[i]);\n  }\n  return /* () */0;\n}\n\nfunction fold(f, h, init) {\n  var do_bucket = function (_b, _accu) {\n    while(true) {\n      var accu = _accu;\n      var b = _b;\n      if (b) {\n        _accu = Curry._3(f, b[0], b[1], accu);\n        _b = b[2];\n        continue ;\n        \n      }\n      else {\n        return accu;\n      }\n    };\n  };\n  var d = h[/* data */1];\n  var accu = init;\n  for(var i = 0 ,i_finish = d.length - 1 | 0; i <= i_finish; ++i){\n    accu = do_bucket(d[i], accu);\n  }\n  return accu;\n}\n\nfunction bucket_length(_accu, _param) {\n  while(true) {\n    var param = _param;\n    var accu = _accu;\n    if (param) {\n      _param = param[2];\n      _accu = accu + 1 | 0;\n      continue ;\n      \n    }\n    else {\n      return accu;\n    }\n  };\n}\n\nfunction stats(h) {\n  var mbl = $$Array.fold_left(function (m, b) {\n        return Pervasives.max(m, bucket_length(0, b));\n      }, 0, h[/* data */1]);\n  var histo = Caml_array.caml_make_vect(mbl + 1 | 0, 0);\n  $$Array.iter(function (b) {\n        var l = bucket_length(0, b);\n        histo[l] = histo[l] + 1 | 0;\n        return /* () */0;\n      }, h[/* data */1]);\n  return /* record */[\n          /* num_bindings */h[/* size */0],\n          /* num_buckets */h[/* data */1].length,\n          /* max_bucket_length */mbl,\n          /* bucket_histogram */histo\n        ];\n}\n\nfunction MakeSeeded(H) {\n  var key_index = function (h, key) {\n    return Curry._2(H[/* hash */1], h[/* seed */2], key) & (h[/* data */1].length - 1 | 0);\n  };\n  var add = function (h, key, info) {\n    var i = key_index(h, key);\n    var bucket_002 = h[/* data */1][i];\n    var bucket = /* Cons */[\n      key,\n      info,\n      bucket_002\n    ];\n    h[/* data */1][i] = bucket;\n    h[/* size */0] = h[/* size */0] + 1 | 0;\n    if (h[/* size */0] > (h[/* data */1].length << 1)) {\n      return resize(key_index, h);\n    }\n    else {\n      return 0;\n    }\n  };\n  var remove = function (h, key) {\n    var remove_bucket = function (param) {\n      if (param) {\n        var next = param[2];\n        var k = param[0];\n        if (Curry._2(H[/* equal */0], k, key)) {\n          h[/* size */0] = h[/* size */0] - 1 | 0;\n          return next;\n        }\n        else {\n          return /* Cons */[\n                  k,\n                  param[1],\n                  remove_bucket(next)\n                ];\n        }\n      }\n      else {\n        return /* Empty */0;\n      }\n    };\n    var i = key_index(h, key);\n    h[/* data */1][i] = remove_bucket(h[/* data */1][i]);\n    return /* () */0;\n  };\n  var find = function (h, key) {\n    var match = h[/* data */1][key_index(h, key)];\n    if (match) {\n      var rest1 = match[2];\n      if (Curry._2(H[/* equal */0], key, match[0])) {\n        return match[1];\n      }\n      else if (rest1) {\n        var rest2 = rest1[2];\n        if (Curry._2(H[/* equal */0], key, rest1[0])) {\n          return rest1[1];\n        }\n        else if (rest2) {\n          if (Curry._2(H[/* equal */0], key, rest2[0])) {\n            return rest2[1];\n          }\n          else {\n            var key$1 = key;\n            var _param = rest2[2];\n            while(true) {\n              var param = _param;\n              if (param) {\n                if (Curry._2(H[/* equal */0], key$1, param[0])) {\n                  return param[1];\n                }\n                else {\n                  _param = param[2];\n                  continue ;\n                  \n                }\n              }\n              else {\n                throw Caml_builtin_exceptions.not_found;\n              }\n            };\n          }\n        }\n        else {\n          throw Caml_builtin_exceptions.not_found;\n        }\n      }\n      else {\n        throw Caml_builtin_exceptions.not_found;\n      }\n    }\n    else {\n      throw Caml_builtin_exceptions.not_found;\n    }\n  };\n  var find_all = function (h, key) {\n    var find_in_bucket = function (_param) {\n      while(true) {\n        var param = _param;\n        if (param) {\n          var rest = param[2];\n          if (Curry._2(H[/* equal */0], param[0], key)) {\n            return /* :: */[\n                    param[1],\n                    find_in_bucket(rest)\n                  ];\n          }\n          else {\n            _param = rest;\n            continue ;\n            \n          }\n        }\n        else {\n          return /* [] */0;\n        }\n      };\n    };\n    return find_in_bucket(h[/* data */1][key_index(h, key)]);\n  };\n  var replace = function (h, key, info) {\n    var replace_bucket = function (param) {\n      if (param) {\n        var next = param[2];\n        var k = param[0];\n        if (Curry._2(H[/* equal */0], k, key)) {\n          return /* Cons */[\n                  key,\n                  info,\n                  next\n                ];\n        }\n        else {\n          return /* Cons */[\n                  k,\n                  param[1],\n                  replace_bucket(next)\n                ];\n        }\n      }\n      else {\n        throw Caml_builtin_exceptions.not_found;\n      }\n    };\n    var i = key_index(h, key);\n    var l = h[/* data */1][i];\n    try {\n      h[/* data */1][i] = replace_bucket(l);\n      return /* () */0;\n    }\n    catch (exn){\n      if (exn === Caml_builtin_exceptions.not_found) {\n        h[/* data */1][i] = /* Cons */[\n          key,\n          info,\n          l\n        ];\n        h[/* size */0] = h[/* size */0] + 1 | 0;\n        if (h[/* size */0] > (h[/* data */1].length << 1)) {\n          return resize(key_index, h);\n        }\n        else {\n          return 0;\n        }\n      }\n      else {\n        throw exn;\n      }\n    }\n  };\n  var mem = function (h, key) {\n    var _param = h[/* data */1][key_index(h, key)];\n    while(true) {\n      var param = _param;\n      if (param) {\n        if (Curry._2(H[/* equal */0], param[0], key)) {\n          return /* true */1;\n        }\n        else {\n          _param = param[2];\n          continue ;\n          \n        }\n      }\n      else {\n        return /* false */0;\n      }\n    };\n  };\n  return /* module */[\n          /* create */create,\n          /* clear */clear,\n          /* reset */reset,\n          /* copy */copy,\n          /* add */add,\n          /* remove */remove,\n          /* find */find,\n          /* find_all */find_all,\n          /* replace */replace,\n          /* mem */mem,\n          /* iter */iter,\n          /* fold */fold,\n          /* length */length,\n          /* stats */stats\n        ];\n}\n\nfunction Make(H) {\n  var equal = H[/* equal */0];\n  var key_index = function (h, key) {\n    return Curry._1(H[/* hash */1], key) & (h[/* data */1].length - 1 | 0);\n  };\n  var add = function (h, key, info) {\n    var i = key_index(h, key);\n    var bucket_002 = h[/* data */1][i];\n    var bucket = /* Cons */[\n      key,\n      info,\n      bucket_002\n    ];\n    h[/* data */1][i] = bucket;\n    h[/* size */0] = h[/* size */0] + 1 | 0;\n    if (h[/* size */0] > (h[/* data */1].length << 1)) {\n      return resize(key_index, h);\n    }\n    else {\n      return 0;\n    }\n  };\n  var remove = function (h, key) {\n    var remove_bucket = function (param) {\n      if (param) {\n        var next = param[2];\n        var k = param[0];\n        if (Curry._2(equal, k, key)) {\n          h[/* size */0] = h[/* size */0] - 1 | 0;\n          return next;\n        }\n        else {\n          return /* Cons */[\n                  k,\n                  param[1],\n                  remove_bucket(next)\n                ];\n        }\n      }\n      else {\n        return /* Empty */0;\n      }\n    };\n    var i = key_index(h, key);\n    h[/* data */1][i] = remove_bucket(h[/* data */1][i]);\n    return /* () */0;\n  };\n  var find = function (h, key) {\n    var match = h[/* data */1][key_index(h, key)];\n    if (match) {\n      var rest1 = match[2];\n      if (Curry._2(equal, key, match[0])) {\n        return match[1];\n      }\n      else if (rest1) {\n        var rest2 = rest1[2];\n        if (Curry._2(equal, key, rest1[0])) {\n          return rest1[1];\n        }\n        else if (rest2) {\n          if (Curry._2(equal, key, rest2[0])) {\n            return rest2[1];\n          }\n          else {\n            var key$1 = key;\n            var _param = rest2[2];\n            while(true) {\n              var param = _param;\n              if (param) {\n                if (Curry._2(equal, key$1, param[0])) {\n                  return param[1];\n                }\n                else {\n                  _param = param[2];\n                  continue ;\n                  \n                }\n              }\n              else {\n                throw Caml_builtin_exceptions.not_found;\n              }\n            };\n          }\n        }\n        else {\n          throw Caml_builtin_exceptions.not_found;\n        }\n      }\n      else {\n        throw Caml_builtin_exceptions.not_found;\n      }\n    }\n    else {\n      throw Caml_builtin_exceptions.not_found;\n    }\n  };\n  var find_all = function (h, key) {\n    var find_in_bucket = function (_param) {\n      while(true) {\n        var param = _param;\n        if (param) {\n          var rest = param[2];\n          if (Curry._2(equal, param[0], key)) {\n            return /* :: */[\n                    param[1],\n                    find_in_bucket(rest)\n                  ];\n          }\n          else {\n            _param = rest;\n            continue ;\n            \n          }\n        }\n        else {\n          return /* [] */0;\n        }\n      };\n    };\n    return find_in_bucket(h[/* data */1][key_index(h, key)]);\n  };\n  var replace = function (h, key, info) {\n    var replace_bucket = function (param) {\n      if (param) {\n        var next = param[2];\n        var k = param[0];\n        if (Curry._2(equal, k, key)) {\n          return /* Cons */[\n                  key,\n                  info,\n                  next\n                ];\n        }\n        else {\n          return /* Cons */[\n                  k,\n                  param[1],\n                  replace_bucket(next)\n                ];\n        }\n      }\n      else {\n        throw Caml_builtin_exceptions.not_found;\n      }\n    };\n    var i = key_index(h, key);\n    var l = h[/* data */1][i];\n    try {\n      h[/* data */1][i] = replace_bucket(l);\n      return /* () */0;\n    }\n    catch (exn){\n      if (exn === Caml_builtin_exceptions.not_found) {\n        h[/* data */1][i] = /* Cons */[\n          key,\n          info,\n          l\n        ];\n        h[/* size */0] = h[/* size */0] + 1 | 0;\n        if (h[/* size */0] > (h[/* data */1].length << 1)) {\n          return resize(key_index, h);\n        }\n        else {\n          return 0;\n        }\n      }\n      else {\n        throw exn;\n      }\n    }\n  };\n  var mem = function (h, key) {\n    var _param = h[/* data */1][key_index(h, key)];\n    while(true) {\n      var param = _param;\n      if (param) {\n        if (Curry._2(equal, param[0], key)) {\n          return /* true */1;\n        }\n        else {\n          _param = param[2];\n          continue ;\n          \n        }\n      }\n      else {\n        return /* false */0;\n      }\n    };\n  };\n  var create$1 = function (sz) {\n    return create(/* Some */[/* false */0], sz);\n  };\n  return /* module */[\n          /* create */create$1,\n          /* clear */clear,\n          /* reset */reset,\n          /* copy */copy,\n          /* add */add,\n          /* remove */remove,\n          /* find */find,\n          /* find_all */find_all,\n          /* replace */replace,\n          /* mem */mem,\n          /* iter */iter,\n          /* fold */fold,\n          /* length */length,\n          /* stats */stats\n        ];\n}\n\nvar seeded_hash_param = Caml_hash.caml_hash\n\nexports.create            = create;\nexports.clear             = clear;\nexports.reset             = reset;\nexports.copy              = copy;\nexports.add               = add;\nexports.find              = find;\nexports.find_all          = find_all;\nexports.mem               = mem;\nexports.remove            = remove;\nexports.replace           = replace;\nexports.iter              = iter;\nexports.fold              = fold;\nexports.length            = length;\nexports.randomize         = randomize;\nexports.stats             = stats;\nexports.Make              = Make;\nexports.MakeSeeded        = MakeSeeded;\nexports.hash              = hash;\nexports.seeded_hash       = seeded_hash;\nexports.hash_param        = hash_param;\nexports.seeded_hash_param = seeded_hash_param;\n/* randomized_default Not a pure module */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/hashtbl.js\n ** module id = 32\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/hashtbl.js?");

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Obj             = __webpack_require__(34);\nvar Caml_exceptions = __webpack_require__(11);\nvar Curry           = __webpack_require__(2);\n\nvar Undefined = Caml_exceptions.create(\"CamlinternalLazy.Undefined\");\n\nfunction raise_undefined() {\n  throw Undefined;\n}\n\nfunction force_lazy_block(blk) {\n  var closure = blk[0];\n  blk[0] = raise_undefined;\n  try {\n    var result = Curry._1(closure, /* () */0);\n    blk[0] = result;\n    blk.tag = Obj.forward_tag;\n    return result;\n  }\n  catch (e){\n    blk[0] = function () {\n      throw e;\n    };\n    throw e;\n  }\n}\n\nfunction force_val_lazy_block(blk) {\n  var closure = blk[0];\n  blk[0] = raise_undefined;\n  var result = Curry._1(closure, /* () */0);\n  blk[0] = result;\n  blk.tag = Obj.forward_tag;\n  return result;\n}\n\nfunction force(lzv) {\n  var t = lzv.tag | 0;\n  if (t === Obj.forward_tag) {\n    return lzv[0];\n  }\n  else if (t !== Obj.lazy_tag) {\n    return lzv;\n  }\n  else {\n    return force_lazy_block(lzv);\n  }\n}\n\nfunction force_val(lzv) {\n  var t = lzv.tag | 0;\n  if (t === Obj.forward_tag) {\n    return lzv[0];\n  }\n  else if (t !== Obj.lazy_tag) {\n    return lzv;\n  }\n  else {\n    return force_val_lazy_block(lzv);\n  }\n}\n\nexports.Undefined            = Undefined;\nexports.force_lazy_block     = force_lazy_block;\nexports.force_val_lazy_block = force_val_lazy_block;\nexports.force                = force;\nexports.force_val            = force_val;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/camlinternalLazy.js\n ** module id = 33\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/camlinternalLazy.js?");

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Marshal                 = __webpack_require__(35);\n\nfunction double_field(x, i) {\n  return x[i];\n}\n\nfunction set_double_field(x, i, v) {\n  x[i] = v;\n  return /* () */0;\n}\n\nfunction marshal() {\n  return function () {\n            throw \"caml_output_value_to_string not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction unmarshal(str, pos) {\n  return /* tuple */[\n          Marshal.from_bytes(str, pos),\n          pos + Marshal.total_size(str, pos) | 0\n        ];\n}\n\nfunction extension_slot(x) {\n  var slot = x.length !== undefined && (x.tag | 0) !== 248 && x.length >= 1 ? x[0] : x;\n  var name;\n  if (slot.length !== undefined && slot.tag === 248) {\n    name = slot[0];\n  }\n  else {\n    throw Caml_builtin_exceptions.not_found;\n  }\n  if (name.tag === 252) {\n    return slot;\n  }\n  else {\n    throw Caml_builtin_exceptions.not_found;\n  }\n}\n\nfunction extension_name(x) {\n  try {\n    var slot = extension_slot(x);\n    return slot[0];\n  }\n  catch (exn){\n    if (exn === Caml_builtin_exceptions.not_found) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"Obj.extension_name\"\n          ];\n    }\n    else {\n      throw exn;\n    }\n  }\n}\n\nfunction extension_id(x) {\n  try {\n    var slot = extension_slot(x);\n    return slot[1];\n  }\n  catch (exn){\n    if (exn === Caml_builtin_exceptions.not_found) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"Obj.extension_id\"\n          ];\n    }\n    else {\n      throw exn;\n    }\n  }\n}\n\nfunction extension_slot$1(x) {\n  try {\n    return extension_slot(x);\n  }\n  catch (exn){\n    if (exn === Caml_builtin_exceptions.not_found) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"Obj.extension_slot\"\n          ];\n    }\n    else {\n      throw exn;\n    }\n  }\n}\n\nvar first_non_constant_constructor_tag = 0;\n\nvar last_non_constant_constructor_tag = 245;\n\nvar lazy_tag = 246;\n\nvar closure_tag = 247;\n\nvar object_tag = 248;\n\nvar infix_tag = 249;\n\nvar forward_tag = 250;\n\nvar no_scan_tag = 251;\n\nvar abstract_tag = 251;\n\nvar string_tag = 252;\n\nvar double_tag = 253;\n\nvar double_array_tag = 254;\n\nvar custom_tag = 255;\n\nvar final_tag = 255;\n\nvar int_tag = 1000;\n\nvar out_of_heap_tag = 1001;\n\nvar unaligned_tag = 1002;\n\nexports.double_field                       = double_field;\nexports.set_double_field                   = set_double_field;\nexports.first_non_constant_constructor_tag = first_non_constant_constructor_tag;\nexports.last_non_constant_constructor_tag  = last_non_constant_constructor_tag;\nexports.lazy_tag                           = lazy_tag;\nexports.closure_tag                        = closure_tag;\nexports.object_tag                         = object_tag;\nexports.infix_tag                          = infix_tag;\nexports.forward_tag                        = forward_tag;\nexports.no_scan_tag                        = no_scan_tag;\nexports.abstract_tag                       = abstract_tag;\nexports.string_tag                         = string_tag;\nexports.double_tag                         = double_tag;\nexports.double_array_tag                   = double_array_tag;\nexports.custom_tag                         = custom_tag;\nexports.final_tag                          = final_tag;\nexports.int_tag                            = int_tag;\nexports.out_of_heap_tag                    = out_of_heap_tag;\nexports.unaligned_tag                      = unaligned_tag;\nexports.extension_name                     = extension_name;\nexports.extension_id                       = extension_id;\nexports.extension_slot                     = extension_slot$1;\nexports.marshal                            = marshal;\nexports.unmarshal                          = unmarshal;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/obj.js\n ** module id = 34\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/obj.js?");

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Caml_string             = __webpack_require__(16);\n\nfunction to_buffer(buff, ofs, len, _, _$1) {\n  if (ofs < 0 || len < 0 || ofs > (buff.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Marshal.to_buffer: substring out of bounds\"\n        ];\n  }\n  else {\n    return function () {\n              throw \"caml_output_value_to_buffer not implemented by bucklescript yet\\n\";\n            }();\n  }\n}\n\nfunction data_size(buff, ofs) {\n  if (ofs < 0 || ofs > (buff.length - 20 | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Marshal.data_size\"\n        ];\n  }\n  else {\n    return function () {\n              throw \"caml_marshal_data_size not implemented by bucklescript yet\\n\";\n            }();\n  }\n}\n\nfunction total_size(buff, ofs) {\n  return 20 + data_size(buff, ofs) | 0;\n}\n\nfunction from_bytes(buff, ofs) {\n  if (ofs < 0 || ofs > (buff.length - 20 | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Marshal.from_bytes\"\n        ];\n  }\n  else {\n    var len = function () {\n        throw \"caml_marshal_data_size not implemented by bucklescript yet\\n\";\n      }();\n    if (ofs > (buff.length - (20 + len | 0) | 0)) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"Marshal.from_bytes\"\n          ];\n    }\n    else {\n      return function () {\n                throw \"caml_input_value_from_string not implemented by bucklescript yet\\n\";\n              }();\n    }\n  }\n}\n\nfunction from_string(buff, ofs) {\n  return from_bytes(Caml_string.bytes_of_string(buff), ofs);\n}\n\nfunction to_channel(_, _$1, _$2) {\n  return function () {\n            throw \"caml_output_value not implemented by bucklescript yet\\n\";\n          }();\n}\n\nfunction from_channel() {\n  return function () {\n            throw \"caml_input_value not implemented by bucklescript yet\\n\";\n          }();\n}\n\nvar header_size = 20;\n\nexports.to_channel   = to_channel;\nexports.to_buffer    = to_buffer;\nexports.from_channel = from_channel;\nexports.from_bytes   = from_bytes;\nexports.from_string  = from_string;\nexports.header_size  = header_size;\nexports.data_size    = data_size;\nexports.total_size   = total_size;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/marshal.js\n ** module id = 35\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/marshal.js?");

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(process) {'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\n\nfunction caml_raise_not_found() {\n  throw Caml_builtin_exceptions.not_found;\n}\n\n\nfunction $$caml_sys_getenv(n) {\n    //nodejs env\n    if (typeof process !== 'undefined'\n        && process.env\n        && process.env[n] != undefined){\n        return process.env[n]\n    }\n    else{ \n     caml_raise_not_found()\n    };\n  }\n\n;\n\n\nfunction $$date(){\n  return (+new Date())\n};\n\n\n;\n\nvar caml_initial_time = $$date() * 0.001;\n\nfunction caml_sys_time() {\n  return ($$date() - caml_initial_time) * 0.001;\n}\n\nfunction caml_sys_random_seed() {\n  return /* array */[(($$date() | 0) ^ 4294967295) * Math.random() | 0];\n}\n\nfunction caml_sys_system_command() {\n  return 127;\n}\n\nfunction caml_sys_getcwd() {\n  return \"/\";\n}\n\nfunction caml_sys_is_directory() {\n  throw [\n        Caml_builtin_exceptions.failure,\n        \"caml_sys_is_directory not implemented\"\n      ];\n}\n\nfunction caml_sys_file_exists() {\n  throw [\n        Caml_builtin_exceptions.failure,\n        \"caml_sys_file_exists not implemented\"\n      ];\n}\n\nfunction caml_sys_getenv(prim) {\n  return $$caml_sys_getenv(prim);\n}\n\nexports.caml_raise_not_found    = caml_raise_not_found;\nexports.caml_sys_getenv         = caml_sys_getenv;\nexports.caml_sys_time           = caml_sys_time;\nexports.caml_sys_random_seed    = caml_sys_random_seed;\nexports.caml_sys_system_command = caml_sys_system_command;\nexports.caml_sys_getcwd         = caml_sys_getcwd;\nexports.caml_sys_is_directory   = caml_sys_is_directory;\nexports.caml_sys_file_exists    = caml_sys_file_exists;\n/*  Not a pure module */\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/caml_sys.js\n ** module id = 36\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/caml_sys.js?");

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Caml_exceptions         = __webpack_require__(11);\nvar Curry                   = __webpack_require__(2);\nvar Caml_array              = __webpack_require__(5);\n\nfunction init(l, f) {\n  if (l) {\n    if (l < 0) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"Array.init\"\n          ];\n    }\n    else {\n      var res = Caml_array.caml_make_vect(l, Curry._1(f, 0));\n      for(var i = 1 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n        res[i] = Curry._1(f, i);\n      }\n      return res;\n    }\n  }\n  else {\n    return /* array */[];\n  }\n}\n\nfunction make_matrix(sx, sy, init) {\n  var res = Caml_array.caml_make_vect(sx, /* array */[]);\n  for(var x = 0 ,x_finish = sx - 1 | 0; x <= x_finish; ++x){\n    res[x] = Caml_array.caml_make_vect(sy, init);\n  }\n  return res;\n}\n\nfunction copy(a) {\n  var l = a.length;\n  if (l) {\n    return Caml_array.caml_array_sub(a, 0, l);\n  }\n  else {\n    return /* array */[];\n  }\n}\n\nfunction append(a1, a2) {\n  var l1 = a1.length;\n  if (l1) {\n    if (a2.length) {\n      return a1.concat(a2);\n    }\n    else {\n      return Caml_array.caml_array_sub(a1, 0, l1);\n    }\n  }\n  else {\n    return copy(a2);\n  }\n}\n\nfunction sub(a, ofs, len) {\n  if (len < 0 || ofs > (a.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Array.sub\"\n        ];\n  }\n  else {\n    return Caml_array.caml_array_sub(a, ofs, len);\n  }\n}\n\nfunction fill(a, ofs, len, v) {\n  if (ofs < 0 || len < 0 || ofs > (a.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Array.fill\"\n        ];\n  }\n  else {\n    for(var i = ofs ,i_finish = (ofs + len | 0) - 1 | 0; i <= i_finish; ++i){\n      a[i] = v;\n    }\n    return /* () */0;\n  }\n}\n\nfunction blit(a1, ofs1, a2, ofs2, len) {\n  if (len < 0 || ofs1 < 0 || ofs1 > (a1.length - len | 0) || ofs2 < 0 || ofs2 > (a2.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Array.blit\"\n        ];\n  }\n  else {\n    return Caml_array.caml_array_blit(a1, ofs1, a2, ofs2, len);\n  }\n}\n\nfunction iter(f, a) {\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    Curry._1(f, a[i]);\n  }\n  return /* () */0;\n}\n\nfunction map(f, a) {\n  var l = a.length;\n  if (l) {\n    var r = Caml_array.caml_make_vect(l, Curry._1(f, a[0]));\n    for(var i = 1 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n      r[i] = Curry._1(f, a[i]);\n    }\n    return r;\n  }\n  else {\n    return /* array */[];\n  }\n}\n\nfunction iteri(f, a) {\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    Curry._2(f, i, a[i]);\n  }\n  return /* () */0;\n}\n\nfunction mapi(f, a) {\n  var l = a.length;\n  if (l) {\n    var r = Caml_array.caml_make_vect(l, Curry._2(f, 0, a[0]));\n    for(var i = 1 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n      r[i] = Curry._2(f, i, a[i]);\n    }\n    return r;\n  }\n  else {\n    return /* array */[];\n  }\n}\n\nfunction to_list(a) {\n  var _i = a.length - 1 | 0;\n  var _res = /* [] */0;\n  while(true) {\n    var res = _res;\n    var i = _i;\n    if (i < 0) {\n      return res;\n    }\n    else {\n      _res = /* :: */[\n        a[i],\n        res\n      ];\n      _i = i - 1 | 0;\n      continue ;\n      \n    }\n  };\n}\n\nfunction list_length(_accu, _param) {\n  while(true) {\n    var param = _param;\n    var accu = _accu;\n    if (param) {\n      _param = param[1];\n      _accu = accu + 1 | 0;\n      continue ;\n      \n    }\n    else {\n      return accu;\n    }\n  };\n}\n\nfunction of_list(l) {\n  if (l) {\n    var a = Caml_array.caml_make_vect(list_length(0, l), l[0]);\n    var _i = 1;\n    var _param = l[1];\n    while(true) {\n      var param = _param;\n      var i = _i;\n      if (param) {\n        a[i] = param[0];\n        _param = param[1];\n        _i = i + 1 | 0;\n        continue ;\n        \n      }\n      else {\n        return a;\n      }\n    };\n  }\n  else {\n    return /* array */[];\n  }\n}\n\nfunction fold_left(f, x, a) {\n  var r = x;\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    r = Curry._2(f, r, a[i]);\n  }\n  return r;\n}\n\nfunction fold_right(f, a, x) {\n  var r = x;\n  for(var i = a.length - 1 | 0; i >= 0; --i){\n    r = Curry._2(f, a[i], r);\n  }\n  return r;\n}\n\nvar Bottom = Caml_exceptions.create(\"Array.Bottom\");\n\nfunction sort(cmp, a) {\n  var maxson = function (l, i) {\n    var i31 = ((i + i | 0) + i | 0) + 1 | 0;\n    var x = i31;\n    if ((i31 + 2 | 0) < l) {\n      if (Curry._2(cmp, a[i31], a[i31 + 1 | 0]) < 0) {\n        x = i31 + 1 | 0;\n      }\n      if (Curry._2(cmp, a[x], a[i31 + 2 | 0]) < 0) {\n        x = i31 + 2 | 0;\n      }\n      return x;\n    }\n    else if ((i31 + 1 | 0) < l && Curry._2(cmp, a[i31], a[i31 + 1 | 0]) < 0) {\n      return i31 + 1 | 0;\n    }\n    else if (i31 < l) {\n      return i31;\n    }\n    else {\n      throw [\n            Bottom,\n            i\n          ];\n    }\n  };\n  var trickle = function (l, i, e) {\n    try {\n      var l$1 = l;\n      var _i = i;\n      var e$1 = e;\n      while(true) {\n        var i$1 = _i;\n        var j = maxson(l$1, i$1);\n        if (Curry._2(cmp, a[j], e$1) > 0) {\n          a[i$1] = a[j];\n          _i = j;\n          continue ;\n          \n        }\n        else {\n          a[i$1] = e$1;\n          return /* () */0;\n        }\n      };\n    }\n    catch (exn){\n      if (exn[0] === Bottom) {\n        a[exn[1]] = e;\n        return /* () */0;\n      }\n      else {\n        throw exn;\n      }\n    }\n  };\n  var bubble = function (l, i) {\n    try {\n      var l$1 = l;\n      var _i = i;\n      while(true) {\n        var i$1 = _i;\n        var j = maxson(l$1, i$1);\n        a[i$1] = a[j];\n        _i = j;\n        continue ;\n        \n      };\n    }\n    catch (exn){\n      if (exn[0] === Bottom) {\n        return exn[1];\n      }\n      else {\n        throw exn;\n      }\n    }\n  };\n  var trickleup = function (_i, e) {\n    while(true) {\n      var i = _i;\n      var father = (i - 1 | 0) / 3 | 0;\n      if (i === father) {\n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              [\n                \"array.ml\",\n                168,\n                4\n              ]\n            ];\n      }\n      if (Curry._2(cmp, a[father], e) < 0) {\n        a[i] = a[father];\n        if (father > 0) {\n          _i = father;\n          continue ;\n          \n        }\n        else {\n          a[0] = e;\n          return /* () */0;\n        }\n      }\n      else {\n        a[i] = e;\n        return /* () */0;\n      }\n    };\n  };\n  var l = a.length;\n  for(var i = ((l + 1 | 0) / 3 | 0) - 1 | 0; i >= 0; --i){\n    trickle(l, i, a[i]);\n  }\n  for(var i$1 = l - 1 | 0; i$1 >= 2; --i$1){\n    var e = a[i$1];\n    a[i$1] = a[0];\n    trickleup(bubble(i$1, 0), e);\n  }\n  if (l > 1) {\n    var e$1 = a[1];\n    a[1] = a[0];\n    a[0] = e$1;\n    return /* () */0;\n  }\n  else {\n    return 0;\n  }\n}\n\nfunction stable_sort(cmp, a) {\n  var merge = function (src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs) {\n    var src1r = src1ofs + src1len | 0;\n    var src2r = src2ofs + src2len | 0;\n    var _i1 = src1ofs;\n    var _s1 = a[src1ofs];\n    var _i2 = src2ofs;\n    var _s2 = src2[src2ofs];\n    var _d = dstofs;\n    while(true) {\n      var d = _d;\n      var s2 = _s2;\n      var i2 = _i2;\n      var s1 = _s1;\n      var i1 = _i1;\n      if (Curry._2(cmp, s1, s2) <= 0) {\n        dst[d] = s1;\n        var i1$1 = i1 + 1 | 0;\n        if (i1$1 < src1r) {\n          _d = d + 1 | 0;\n          _s1 = a[i1$1];\n          _i1 = i1$1;\n          continue ;\n          \n        }\n        else {\n          return blit(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);\n        }\n      }\n      else {\n        dst[d] = s2;\n        var i2$1 = i2 + 1 | 0;\n        if (i2$1 < src2r) {\n          _d = d + 1 | 0;\n          _s2 = src2[i2$1];\n          _i2 = i2$1;\n          continue ;\n          \n        }\n        else {\n          return blit(a, i1, dst, d + 1 | 0, src1r - i1 | 0);\n        }\n      }\n    };\n  };\n  var isortto = function (srcofs, dst, dstofs, len) {\n    for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n      var e = a[srcofs + i | 0];\n      var j = (dstofs + i | 0) - 1 | 0;\n      while(j >= dstofs && Curry._2(cmp, dst[j], e) > 0) {\n        dst[j + 1 | 0] = dst[j];\n        j = j - 1 | 0;\n      };\n      dst[j + 1 | 0] = e;\n    }\n    return /* () */0;\n  };\n  var sortto = function (srcofs, dst, dstofs, len) {\n    if (len <= 5) {\n      return isortto(srcofs, dst, dstofs, len);\n    }\n    else {\n      var l1 = len / 2 | 0;\n      var l2 = len - l1 | 0;\n      sortto(srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);\n      sortto(srcofs, a, srcofs + l2 | 0, l1);\n      return merge(srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs);\n    }\n  };\n  var l = a.length;\n  if (l <= 5) {\n    return isortto(0, a, 0, l);\n  }\n  else {\n    var l1 = l / 2 | 0;\n    var l2 = l - l1 | 0;\n    var t = Caml_array.caml_make_vect(l2, a[0]);\n    sortto(l1, t, 0, l2);\n    sortto(0, a, l2, l1);\n    return merge(l2, l1, t, 0, l2, a, 0);\n  }\n}\n\nvar create_matrix = make_matrix;\n\nvar concat = Caml_array.caml_array_concat\n\nvar fast_sort = stable_sort;\n\nexports.init          = init;\nexports.make_matrix   = make_matrix;\nexports.create_matrix = create_matrix;\nexports.append        = append;\nexports.concat        = concat;\nexports.sub           = sub;\nexports.copy          = copy;\nexports.fill          = fill;\nexports.blit          = blit;\nexports.to_list       = to_list;\nexports.of_list       = of_list;\nexports.iter          = iter;\nexports.map           = map;\nexports.iteri         = iteri;\nexports.mapi          = mapi;\nexports.fold_left     = fold_left;\nexports.fold_right    = fold_right;\nexports.sort          = sort;\nexports.stable_sort   = stable_sort;\nexports.fast_sort     = fast_sort;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/array.js\n ** module id = 37\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/array.js?");

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Caml_int32              = __webpack_require__(14);\nvar Caml_queue              = __webpack_require__(39);\n\nfunction rotl32(x, n) {\n  return (x << n) | (x >>> (32 - n | 0));\n}\n\nfunction mix(h, d) {\n  var d$1 = d;\n  d$1 = Caml_int32.imul(d$1, 3432918353);\n  d$1 = rotl32(d$1, 15);\n  d$1 = Caml_int32.imul(d$1, 461845907);\n  var h$1 = h ^ d$1;\n  h$1 = rotl32(h$1, 13);\n  return (h$1 + (h$1 << 2) | 0) + 3864292196 | 0;\n}\n\nfunction final_mix(h) {\n  var h$1 = h ^ (h >>> 16);\n  h$1 = Caml_int32.imul(h$1, 2246822507);\n  h$1 = h$1 ^ (h$1 >>> 13);\n  h$1 = Caml_int32.imul(h$1, 3266489909);\n  return h$1 ^ (h$1 >>> 16);\n}\n\nfunction caml_hash_mix_string(h, s) {\n  var len = s.length;\n  var block = (len / 4 | 0) - 1 | 0;\n  var hash = h;\n  for(var i = 0; i <= block; ++i){\n    var j = (i << 2);\n    var w = s.charCodeAt(j) | (s.charCodeAt(j + 1 | 0) << 8) | (s.charCodeAt(j + 2 | 0) << 16) | (s.charCodeAt(j + 3 | 0) << 24);\n    hash = mix(hash, w);\n  }\n  var modulo = len & 3;\n  if (modulo !== 0) {\n    var w$1 = modulo === 3 ? (s.charCodeAt(len - 1 | 0) << 16) | (s.charCodeAt(len - 2 | 0) << 8) | s.charCodeAt(len - 3 | 0) : (\n        modulo === 2 ? (s.charCodeAt(len - 1 | 0) << 8) | s.charCodeAt(len - 2 | 0) : s.charCodeAt(len - 1 | 0)\n      );\n    hash = mix(hash, w$1);\n  }\n  hash = hash ^ len;\n  return hash;\n}\n\nfunction caml_hash(count, _, seed, obj) {\n  var hash = seed;\n  if (typeof obj === \"number\") {\n    var u = obj | 0;\n    hash = mix(hash, (u + u | 0) + 1 | 0);\n    return final_mix(hash);\n  }\n  else if (typeof obj === \"string\") {\n    hash = caml_hash_mix_string(hash, obj);\n    return final_mix(hash);\n  }\n  else {\n    var queue = /* record */[\n      /* length */0,\n      /* tail : None */0\n    ];\n    var num = count;\n    Caml_queue.push(obj, queue);\n    num = num - 1 | 0;\n    while(queue[/* length */0] !== 0 && num > 0) {\n      var obj$1 = Caml_queue.unsafe_pop(queue);\n      if (typeof obj$1 === \"number\") {\n        var u$1 = obj$1 | 0;\n        hash = mix(hash, (u$1 + u$1 | 0) + 1 | 0);\n        num = num - 1 | 0;\n      }\n      else if (typeof obj$1 === \"string\") {\n        hash = caml_hash_mix_string(hash, obj$1);\n        num = num - 1 | 0;\n      }\n      else if (typeof obj$1 !== \"boolean\") {\n        if (typeof obj$1 !== \"undefined\") {\n          if (typeof obj$1 === \"symbol\") {\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  [\n                    \"caml_hash.ml\",\n                    134,\n                    8\n                  ]\n                ];\n          }\n          else if (typeof obj$1 !== \"function\") {\n            var size = obj$1.length;\n            if (size !== undefined) {\n              var obj_tag = obj$1.tag | 0;\n              var tag = (size << 10) | obj_tag;\n              if (tag === 248) {\n                hash = mix(hash, obj$1[1]);\n              }\n              else {\n                hash = mix(hash, tag);\n                var v = size - 1 | 0;\n                var block = v < num ? v : num;\n                for(var i = 0; i <= block; ++i){\n                  Caml_queue.push(obj$1[i], queue);\n                }\n              }\n            }\n            \n          }\n          \n        }\n        \n      }\n      \n    };\n    return final_mix(hash);\n  }\n}\n\nexports.caml_hash = caml_hash;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/caml_hash.js\n ** module id = 38\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/caml_hash.js?");

/***/ },
/* 39 */
/***/ function(module, exports) {

	eval("'use strict';\n\n\nfunction create() {\n  return /* record */[\n          /* length */0,\n          /* tail : None */0\n        ];\n}\n\nfunction push(x, q) {\n  if (q[/* length */0]) {\n    var tail = q[/* tail */1];\n    var head = tail[/* next */1];\n    var cell = /* record */[\n      /* content */x,\n      /* next */head\n    ];\n    q[/* length */0] = q[/* length */0] + 1 | 0;\n    tail[/* next */1] = cell;\n    q[/* tail */1] = cell;\n    return /* () */0;\n  }\n  else {\n    var cell$1 = [];\n    cell$1[0] = x;\n    cell$1[1] = cell$1;\n    q[/* length */0] = 1;\n    q[/* tail */1] = cell$1;\n    return /* () */0;\n  }\n}\n\nfunction unsafe_pop(q) {\n  q[/* length */0] = q[/* length */0] - 1 | 0;\n  var tail = q[/* tail */1];\n  var head = tail[/* next */1];\n  if (head === tail) {\n    q[/* tail */1] = /* None */0;\n  }\n  else {\n    tail[/* next */1] = head[/* next */1];\n  }\n  return head[/* content */0];\n}\n\nfunction is_empty(q) {\n  return +(q[/* length */0] === 0);\n}\n\nexports.create     = create;\nexports.push       = push;\nexports.unsafe_pop = unsafe_pop;\nexports.is_empty   = is_empty;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/caml_queue.js\n ** module id = 39\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/caml_queue.js?");

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_int64              = __webpack_require__(13);\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Caml_sys                = __webpack_require__(36);\nvar Pervasives              = __webpack_require__(7);\nvar Nativeint               = __webpack_require__(41);\nvar Int32                   = __webpack_require__(42);\nvar Digest                  = __webpack_require__(43);\nvar Curry                   = __webpack_require__(2);\nvar Int64                   = __webpack_require__(45);\nvar Caml_array              = __webpack_require__(5);\nvar $$Array                 = __webpack_require__(37);\nvar Caml_string             = __webpack_require__(16);\n\nfunction assign(st1, st2) {\n  $$Array.blit(st2[/* st */0], 0, st1[/* st */0], 0, 55);\n  st1[/* idx */1] = st2[/* idx */1];\n  return /* () */0;\n}\n\nfunction full_init(s, seed) {\n  var combine = function (accu, x) {\n    return Digest.string(accu + x);\n  };\n  var extract = function (d) {\n    return ((Caml_string.get(d, 0) + (Caml_string.get(d, 1) << 8) | 0) + (Caml_string.get(d, 2) << 16) | 0) + (Caml_string.get(d, 3) << 24) | 0;\n  };\n  var seed$1 = seed.length ? seed : /* int array */[0];\n  var l = seed$1.length;\n  for(var i = 0; i <= 54; ++i){\n    s[/* st */0][i] = i;\n  }\n  var accu = \"x\";\n  for(var i$1 = 0 ,i_finish = 54 + Pervasives.max(55, l) | 0; i$1 <= i_finish; ++i$1){\n    var j = i$1 % 55;\n    var k = i$1 % l;\n    accu = combine(accu, seed$1[k]);\n    s[/* st */0][j] = (s[/* st */0][j] ^ extract(accu)) & 1073741823;\n  }\n  s[/* idx */1] = 0;\n  return /* () */0;\n}\n\nfunction make(seed) {\n  var result = /* record */[\n    /* st */Caml_array.caml_make_vect(55, 0),\n    /* idx */0\n  ];\n  full_init(result, seed);\n  return result;\n}\n\nfunction make_self_init() {\n  return make(Caml_sys.caml_sys_random_seed(/* () */0));\n}\n\nfunction copy(s) {\n  var result = /* record */[\n    /* st */Caml_array.caml_make_vect(55, 0),\n    /* idx */0\n  ];\n  assign(result, s);\n  return result;\n}\n\nfunction bits(s) {\n  s[/* idx */1] = (s[/* idx */1] + 1 | 0) % 55;\n  var curval = s[/* st */0][s[/* idx */1]];\n  var newval = s[/* st */0][(s[/* idx */1] + 24 | 0) % 55] + (curval ^ (curval >>> 25) & 31) | 0;\n  var newval30 = newval & 1073741823;\n  s[/* st */0][s[/* idx */1]] = newval30;\n  return newval30;\n}\n\nfunction $$int(s, bound) {\n  if (bound > 1073741823 || bound <= 0) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Random.int\"\n        ];\n  }\n  else {\n    var s$1 = s;\n    var n = bound;\n    while(true) {\n      var r = bits(s$1);\n      var v = r % n;\n      if ((r - v | 0) > ((1073741823 - n | 0) + 1 | 0)) {\n        continue ;\n        \n      }\n      else {\n        return v;\n      }\n    };\n  }\n}\n\nfunction int32(s, bound) {\n  if (bound <= 0) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Random.int32\"\n        ];\n  }\n  else {\n    var s$1 = s;\n    var n = bound;\n    while(true) {\n      var b1 = bits(s$1);\n      var b2 = ((bits(s$1) & 1) << 30);\n      var r = b1 | b2;\n      var v = r % n;\n      if ((r - v | 0) > ((Int32.max_int - n | 0) + 1 | 0)) {\n        continue ;\n        \n      }\n      else {\n        return v;\n      }\n    };\n  }\n}\n\nfunction int64(s, bound) {\n  if (Caml_int64.le(bound, /* int64 */[\n          /* hi */0,\n          /* lo */0\n        ])) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Random.int64\"\n        ];\n  }\n  else {\n    var s$1 = s;\n    var n = bound;\n    while(true) {\n      var b1 = Caml_int64.of_int32(bits(s$1));\n      var b2 = Caml_int64.lsl_(Caml_int64.of_int32(bits(s$1)), 30);\n      var b3 = Caml_int64.lsl_(Caml_int64.of_int32(bits(s$1) & 7), 60);\n      var r_000 = /* hi */b1[0] | /* hi */b2[0] | b3[0];\n      var r_001 = /* lo */((b1[1] | b2[1] | b3[1]) >>> 0);\n      var r = /* int64 */[\n        r_000,\n        r_001\n      ];\n      var v = Caml_int64.mod_(r, n);\n      if (Caml_int64.gt(Caml_int64.sub(r, v), Caml_int64.add(Caml_int64.sub(Int64.max_int, n), /* int64 */[\n                  /* hi */0,\n                  /* lo */1\n                ]))) {\n        continue ;\n        \n      }\n      else {\n        return v;\n      }\n    };\n  }\n}\n\nvar nativeint = Nativeint.size === 32 ? int32 : function (s, bound) {\n    return int64(s, Caml_int64.of_int32(bound))[1] | 0;\n  };\n\nfunction rawfloat(s) {\n  var r1 = bits(s);\n  var r2 = bits(s);\n  return (r1 / 1073741824.0 + r2) / 1073741824.0;\n}\n\nfunction $$float(s, bound) {\n  return rawfloat(s) * bound;\n}\n\nfunction bool(s) {\n  return +((bits(s) & 1) === 0);\n}\n\nvar $$default = /* record */[\n  /* st : array */[\n    987910699,\n    495797812,\n    364182224,\n    414272206,\n    318284740,\n    990407751,\n    383018966,\n    270373319,\n    840823159,\n    24560019,\n    536292337,\n    512266505,\n    189156120,\n    730249596,\n    143776328,\n    51606627,\n    140166561,\n    366354223,\n    1003410265,\n    700563762,\n    981890670,\n    913149062,\n    526082594,\n    1021425055,\n    784300257,\n    667753350,\n    630144451,\n    949649812,\n    48546892,\n    415514493,\n    258888527,\n    511570777,\n    89983870,\n    283659902,\n    308386020,\n    242688715,\n    482270760,\n    865188196,\n    1027664170,\n    207196989,\n    193777847,\n    619708188,\n    671350186,\n    149669678,\n    257044018,\n    87658204,\n    558145612,\n    183450813,\n    28133145,\n    901332182,\n    710253903,\n    510646120,\n    652377910,\n    409934019,\n    801085050\n  ],\n  /* idx */0\n];\n\nfunction bits$1() {\n  return bits($$default);\n}\n\nfunction $$int$1(bound) {\n  return $$int($$default, bound);\n}\n\nfunction int32$1(bound) {\n  return int32($$default, bound);\n}\n\nfunction nativeint$1(bound) {\n  return Curry._2(nativeint, $$default, bound);\n}\n\nfunction int64$1(bound) {\n  return int64($$default, bound);\n}\n\nfunction $$float$1(scale) {\n  return rawfloat($$default) * scale;\n}\n\nfunction bool$1() {\n  return bool($$default);\n}\n\nfunction full_init$1(seed) {\n  return full_init($$default, seed);\n}\n\nfunction init(seed) {\n  return full_init($$default, /* int array */[seed]);\n}\n\nfunction self_init() {\n  return full_init$1(Caml_sys.caml_sys_random_seed(/* () */0));\n}\n\nfunction get_state() {\n  return copy($$default);\n}\n\nfunction set_state(s) {\n  return assign($$default, s);\n}\n\nvar State = [\n  make,\n  make_self_init,\n  copy,\n  bits,\n  $$int,\n  int32,\n  nativeint,\n  int64,\n  $$float,\n  bool\n];\n\nexports.init      = init;\nexports.full_init = full_init$1;\nexports.self_init = self_init;\nexports.bits      = bits$1;\nexports.$$int     = $$int$1;\nexports.int32     = int32$1;\nexports.nativeint = nativeint$1;\nexports.int64     = int64$1;\nexports.$$float   = $$float$1;\nexports.bool      = bool$1;\nexports.State     = State;\nexports.get_state = get_state;\nexports.set_state = set_state;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/random.js\n ** module id = 40\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/random.js?");

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_obj    = __webpack_require__(8);\nvar Caml_format = __webpack_require__(12);\nvar Sys         = __webpack_require__(22);\n\nfunction succ(n) {\n  return n + 1;\n}\n\nfunction pred(n) {\n  return n - 1;\n}\n\nfunction abs(n) {\n  if (n >= 0) {\n    return n;\n  }\n  else {\n    return -n;\n  }\n}\n\nvar min_int = -9007199254740991;\n\nvar max_int = 9007199254740991;\n\nfunction lognot(n) {\n  return n ^ -1;\n}\n\nfunction to_string(n) {\n  return Caml_format.caml_nativeint_format(\"%d\", n);\n}\n\nvar compare = Caml_obj.caml_nativeint_compare\n\nvar zero = 0;\n\nvar one = 1;\n\nvar minus_one = -1;\n\nvar size = Sys.word_size;\n\nexports.zero      = zero;\nexports.one       = one;\nexports.minus_one = minus_one;\nexports.succ      = succ;\nexports.pred      = pred;\nexports.abs       = abs;\nexports.size      = size;\nexports.max_int   = max_int;\nexports.min_int   = min_int;\nexports.lognot    = lognot;\nexports.to_string = to_string;\nexports.compare   = compare;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/nativeint.js\n ** module id = 41\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/nativeint.js?");

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_obj    = __webpack_require__(8);\nvar Caml_format = __webpack_require__(12);\n\nfunction succ(n) {\n  return n + 1 | 0;\n}\n\nfunction pred(n) {\n  return n - 1 | 0;\n}\n\nfunction abs(n) {\n  if (n >= 0) {\n    return n;\n  }\n  else {\n    return -n | 0;\n  }\n}\n\nfunction lognot(n) {\n  return n ^ -1;\n}\n\nfunction to_string(n) {\n  return Caml_format.caml_int32_format(\"%d\", n);\n}\n\nvar compare = Caml_obj.caml_int32_compare\n\nvar zero = 0;\n\nvar one = 1;\n\nvar minus_one = -1;\n\nvar max_int = 2147483647;\n\nvar min_int = -2147483648;\n\nexports.zero      = zero;\nexports.one       = one;\nexports.minus_one = minus_one;\nexports.succ      = succ;\nexports.pred      = pred;\nexports.abs       = abs;\nexports.max_int   = max_int;\nexports.min_int   = min_int;\nexports.lognot    = lognot;\nexports.to_string = to_string;\nexports.compare   = compare;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/int32.js\n ** module id = 42\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/int32.js?");

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Pervasives              = __webpack_require__(7);\nvar Char                    = __webpack_require__(20);\nvar Caml_md5                = __webpack_require__(44);\nvar $$String                = __webpack_require__(23);\nvar Caml_string             = __webpack_require__(16);\n\nfunction string(str) {\n  return Caml_md5.caml_md5_string(str, 0, str.length);\n}\n\nfunction bytes(b) {\n  return string(Caml_string.bytes_to_string(b));\n}\n\nfunction substring(str, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (str.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Digest.substring\"\n        ];\n  }\n  else {\n    return Caml_md5.caml_md5_string(str, ofs, len);\n  }\n}\n\nfunction subbytes(b, ofs, len) {\n  return substring(Caml_string.bytes_to_string(b), ofs, len);\n}\n\nfunction file(filename) {\n  Pervasives.open_in_bin(filename);\n  var exit = 0;\n  var d;\n  try {\n    d = function () {\n        throw \"caml_md5_chan not implemented by bucklescript yet\\n\";\n      }();\n    exit = 1;\n  }\n  catch (e){\n    (function () {\n          throw \"caml_ml_close_channel not implemented by bucklescript yet\\n\";\n        }());\n    throw e;\n  }\n  if (exit === 1) {\n    (function () {\n          throw \"caml_ml_close_channel not implemented by bucklescript yet\\n\";\n        }());\n    return d;\n  }\n  \n}\n\nvar output = Pervasives.output_string\n\nfunction input(chan) {\n  return Pervasives.really_input_string(chan, 16);\n}\n\nfunction char_hex(n) {\n  return n + (\n          n < 10 ? /* \"0\" */48 : 87\n        ) | 0;\n}\n\nfunction to_hex(d) {\n  var result = new Array(32);\n  for(var i = 0; i <= 15; ++i){\n    var x = Caml_string.get(d, i);\n    result[(i << 1)] = char_hex((x >>> 4));\n    result[(i << 1) + 1 | 0] = char_hex(x & 15);\n  }\n  return Caml_string.bytes_to_string(result);\n}\n\nfunction from_hex(s) {\n  if (s.length !== 32) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Digest.from_hex\"\n        ];\n  }\n  var digit = function (c) {\n    if (c >= 65) {\n      if (c >= 97) {\n        if (c >= 103) {\n          throw [\n                Caml_builtin_exceptions.invalid_argument,\n                \"Digest.from_hex\"\n              ];\n        }\n        else {\n          return (c - /* \"a\" */97 | 0) + 10 | 0;\n        }\n      }\n      else if (c >= 71) {\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              \"Digest.from_hex\"\n            ];\n      }\n      else {\n        return (c - /* \"A\" */65 | 0) + 10 | 0;\n      }\n    }\n    else if (c > 57 || c < 48) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"Digest.from_hex\"\n          ];\n    }\n    else {\n      return c - /* \"0\" */48 | 0;\n    }\n  };\n  var $$byte = function (i) {\n    return (digit(Caml_string.get(s, i)) << 4) + digit(Caml_string.get(s, i + 1 | 0)) | 0;\n  };\n  var result = new Array(16);\n  for(var i = 0; i <= 15; ++i){\n    result[i] = Char.chr($$byte((i << 1)));\n  }\n  return Caml_string.bytes_to_string(result);\n}\n\nvar compare = $$String.compare;\n\nexports.compare   = compare;\nexports.string    = string;\nexports.bytes     = bytes;\nexports.substring = substring;\nexports.subbytes  = subbytes;\nexports.file      = file;\nexports.output    = output;\nexports.input     = input;\nexports.to_hex    = to_hex;\nexports.from_hex  = from_hex;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/digest.js\n ** module id = 43\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/digest.js?");

/***/ },
/* 44 */
/***/ function(module, exports) {

	eval("'use strict';\n\n\nfunction cmn(q, a, b, x, s, t) {\n  var a$1 = ((a + q | 0) + x | 0) + t | 0;\n  return ((a$1 << s) | (a$1 >>> (32 - s | 0)) | 0) + b | 0;\n}\n\nfunction f(a, b, c, d, x, s, t) {\n  return cmn(b & c | (b ^ -1) & d, a, b, x, s, t);\n}\n\nfunction g(a, b, c, d, x, s, t) {\n  return cmn(b & d | c & (d ^ -1), a, b, x, s, t);\n}\n\nfunction h(a, b, c, d, x, s, t) {\n  return cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction i(a, b, c, d, x, s, t) {\n  return cmn(c ^ (b | d ^ -1), a, b, x, s, t);\n}\n\nfunction cycle(x, k) {\n  var a = x[0];\n  var b = x[1];\n  var c = x[2];\n  var d = x[3];\n  a = f(a, b, c, d, k[0], 7, -680876936);\n  d = f(d, a, b, c, k[1], 12, -389564586);\n  c = f(c, d, a, b, k[2], 17, 606105819);\n  b = f(b, c, d, a, k[3], 22, -1044525330);\n  a = f(a, b, c, d, k[4], 7, -176418897);\n  d = f(d, a, b, c, k[5], 12, 1200080426);\n  c = f(c, d, a, b, k[6], 17, -1473231341);\n  b = f(b, c, d, a, k[7], 22, -45705983);\n  a = f(a, b, c, d, k[8], 7, 1770035416);\n  d = f(d, a, b, c, k[9], 12, -1958414417);\n  c = f(c, d, a, b, k[10], 17, -42063);\n  b = f(b, c, d, a, k[11], 22, -1990404162);\n  a = f(a, b, c, d, k[12], 7, 1804603682);\n  d = f(d, a, b, c, k[13], 12, -40341101);\n  c = f(c, d, a, b, k[14], 17, -1502002290);\n  b = f(b, c, d, a, k[15], 22, 1236535329);\n  a = g(a, b, c, d, k[1], 5, -165796510);\n  d = g(d, a, b, c, k[6], 9, -1069501632);\n  c = g(c, d, a, b, k[11], 14, 643717713);\n  b = g(b, c, d, a, k[0], 20, -373897302);\n  a = g(a, b, c, d, k[5], 5, -701558691);\n  d = g(d, a, b, c, k[10], 9, 38016083);\n  c = g(c, d, a, b, k[15], 14, -660478335);\n  b = g(b, c, d, a, k[4], 20, -405537848);\n  a = g(a, b, c, d, k[9], 5, 568446438);\n  d = g(d, a, b, c, k[14], 9, -1019803690);\n  c = g(c, d, a, b, k[3], 14, -187363961);\n  b = g(b, c, d, a, k[8], 20, 1163531501);\n  a = g(a, b, c, d, k[13], 5, -1444681467);\n  d = g(d, a, b, c, k[2], 9, -51403784);\n  c = g(c, d, a, b, k[7], 14, 1735328473);\n  b = g(b, c, d, a, k[12], 20, -1926607734);\n  a = h(a, b, c, d, k[5], 4, -378558);\n  d = h(d, a, b, c, k[8], 11, -2022574463);\n  c = h(c, d, a, b, k[11], 16, 1839030562);\n  b = h(b, c, d, a, k[14], 23, -35309556);\n  a = h(a, b, c, d, k[1], 4, -1530992060);\n  d = h(d, a, b, c, k[4], 11, 1272893353);\n  c = h(c, d, a, b, k[7], 16, -155497632);\n  b = h(b, c, d, a, k[10], 23, -1094730640);\n  a = h(a, b, c, d, k[13], 4, 681279174);\n  d = h(d, a, b, c, k[0], 11, -358537222);\n  c = h(c, d, a, b, k[3], 16, -722521979);\n  b = h(b, c, d, a, k[6], 23, 76029189);\n  a = h(a, b, c, d, k[9], 4, -640364487);\n  d = h(d, a, b, c, k[12], 11, -421815835);\n  c = h(c, d, a, b, k[15], 16, 530742520);\n  b = h(b, c, d, a, k[2], 23, -995338651);\n  a = i(a, b, c, d, k[0], 6, -198630844);\n  d = i(d, a, b, c, k[7], 10, 1126891415);\n  c = i(c, d, a, b, k[14], 15, -1416354905);\n  b = i(b, c, d, a, k[5], 21, -57434055);\n  a = i(a, b, c, d, k[12], 6, 1700485571);\n  d = i(d, a, b, c, k[3], 10, -1894986606);\n  c = i(c, d, a, b, k[10], 15, -1051523);\n  b = i(b, c, d, a, k[1], 21, -2054922799);\n  a = i(a, b, c, d, k[8], 6, 1873313359);\n  d = i(d, a, b, c, k[15], 10, -30611744);\n  c = i(c, d, a, b, k[6], 15, -1560198380);\n  b = i(b, c, d, a, k[13], 21, 1309151649);\n  a = i(a, b, c, d, k[4], 6, -145523070);\n  d = i(d, a, b, c, k[11], 10, -1120210379);\n  c = i(c, d, a, b, k[2], 15, 718787259);\n  b = i(b, c, d, a, k[9], 21, -343485551);\n  x[0] = a + x[0] | 0;\n  x[1] = b + x[1] | 0;\n  x[2] = c + x[2] | 0;\n  x[3] = d + x[3] | 0;\n  return /* () */0;\n}\n\nvar state = /* array */[\n  1732584193,\n  -271733879,\n  -1732584194,\n  271733878\n];\n\nvar md5blk = /* array */[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n];\n\nfunction caml_md5_string(s, start, len) {\n  var s$1 = s.slice(start, len);\n  var n = s$1.length;\n  state[0] = 1732584193;\n  state[1] = -271733879;\n  state[2] = -1732584194;\n  state[3] = 271733878;\n  for(var i = 0; i <= 15; ++i){\n    md5blk[i] = 0;\n  }\n  var i_end = n / 64 | 0;\n  for(var i$1 = 1; i$1 <= i_end; ++i$1){\n    for(var j = 0; j <= 15; ++j){\n      var k = ((i$1 << 6) - 64 | 0) + (j << 2) | 0;\n      md5blk[j] = ((s$1.charCodeAt(k) + (s$1.charCodeAt(k + 1 | 0) << 8) | 0) + (s$1.charCodeAt(k + 2 | 0) << 16) | 0) + (s$1.charCodeAt(k + 3 | 0) << 24) | 0;\n    }\n    cycle(state, md5blk);\n  }\n  var s_tail = s$1.slice((i_end << 6));\n  for(var kk = 0; kk <= 15; ++kk){\n    md5blk[kk] = 0;\n  }\n  var i_end$1 = s_tail.length - 1 | 0;\n  for(var i$2 = 0; i$2 <= i_end$1; ++i$2){\n    md5blk[i$2 / 4 | 0] = md5blk[i$2 / 4 | 0] | (s_tail.charCodeAt(i$2) << (i$2 % 4 << 3));\n  }\n  var i$3 = i_end$1 + 1 | 0;\n  md5blk[i$3 / 4 | 0] = md5blk[i$3 / 4 | 0] | (128 << (i$3 % 4 << 3));\n  if (i$3 > 55) {\n    cycle(state, md5blk);\n    for(var i$4 = 0; i$4 <= 15; ++i$4){\n      md5blk[i$4] = 0;\n    }\n  }\n  md5blk[14] = (n << 3);\n  cycle(state, md5blk);\n  return String.fromCharCode(state[0] & 255, (state[0] >> 8) & 255, (state[0] >> 16) & 255, (state[0] >> 24) & 255, state[1] & 255, (state[1] >> 8) & 255, (state[1] >> 16) & 255, (state[1] >> 24) & 255, state[2] & 255, (state[2] >> 8) & 255, (state[2] >> 16) & 255, (state[2] >> 24) & 255, state[3] & 255, (state[3] >> 8) & 255, (state[3] >> 16) & 255, (state[3] >> 24) & 255);\n}\n\nexports.caml_md5_string = caml_md5_string;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/caml_md5.js\n ** module id = 44\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/caml_md5.js?");

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_int64  = __webpack_require__(13);\nvar Caml_format = __webpack_require__(12);\n\nfunction succ(n) {\n  return Caml_int64.add(n, /* int64 */[\n              /* hi */0,\n              /* lo */1\n            ]);\n}\n\nfunction pred(n) {\n  return Caml_int64.sub(n, /* int64 */[\n              /* hi */0,\n              /* lo */1\n            ]);\n}\n\nfunction abs(n) {\n  if (Caml_int64.ge(n, /* int64 */[\n          /* hi */0,\n          /* lo */0\n        ])) {\n    return n;\n  }\n  else {\n    return Caml_int64.neg(n);\n  }\n}\n\nfunction lognot(n) {\n  return /* int64 */[\n          /* hi */n[0] ^ /* hi */-1,\n          /* lo */((n[1] ^ /* lo */4294967295) >>> 0)\n        ];\n}\n\nfunction to_string(n) {\n  return Caml_format.caml_int64_format(\"%d\", n);\n}\n\nvar compare = Caml_int64.compare\n\nvar zero = /* int64 */[\n  /* hi */0,\n  /* lo */0\n];\n\nvar one = /* int64 */[\n  /* hi */0,\n  /* lo */1\n];\n\nvar minus_one = /* int64 */[\n  /* hi */-1,\n  /* lo */4294967295\n];\n\nvar max_int = /* int64 */[\n  /* hi */2147483647,\n  /* lo */4294967295\n];\n\nvar min_int = /* int64 */[\n  /* hi */-2147483648,\n  /* lo */0\n];\n\nexports.zero      = zero;\nexports.one       = one;\nexports.minus_one = minus_one;\nexports.succ      = succ;\nexports.pred      = pred;\nexports.abs       = abs;\nexports.max_int   = max_int;\nexports.min_int   = min_int;\nexports.lognot    = lognot;\nexports.to_string = to_string;\nexports.compare   = compare;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/int64.js\n ** module id = 45\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/int64.js?");

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	eval("// Generated by BUCKLESCRIPT VERSION 1.0.1 , PLEASE EDIT WITH CARE\n'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Pervasives              = __webpack_require__(7);\nvar Block                   = __webpack_require__(1);\nvar Curry                   = __webpack_require__(2);\nvar Printf                  = __webpack_require__(6);\nvar $$String                = __webpack_require__(23);\nvar Caml_string             = __webpack_require__(16);\nvar List                    = __webpack_require__(21);\n\nvar Parsing = /* module */[];\n\nfunction unwrapOr(a, b) {\n  if (a) {\n    return a[0];\n  }\n  else {\n    return b;\n  }\n}\n\nvar Path = /* module */[];\n\nfunction errorText(param) {\n  var rule = param[1];\n  if (typeof rule === \"number\") {\n    switch (rule) {\n      case 0 : \n          return \"End of Input\";\n      case 1 : \n          return \"Expected a newline (with optional comments)\";\n      default:\n        return \"Unknown problem\";\n    }\n  }\n  else {\n    switch (rule.tag | 0) {\n      case 0 : \n          return \"Star\";\n      case 1 : \n          return \"Plus\";\n      case 2 : \n          return \"Optional\";\n      case 3 : \n          return \"Any\";\n      case 10 : \n          return rule[0];\n      case 11 : \n          return 'Expected \"' + ($$String.escaped(rule[0]) + '\"');\n      case 12 : \n          return Curry._2(Printf.sprintf(/* Format */[\n                          /* String_literal */Block.__(11, [\n                              \"Expected \",\n                              /* Char */Block.__(0, [/* String_literal */Block.__(11, [\n                                      \"..\",\n                                      /* Char */Block.__(0, [/* End_of_format */0])\n                                    ])])\n                            ]),\n                          \"Expected %c..%c\"\n                        ]), rule[0], rule[1]);\n      default:\n        return \"Unknown problem\";\n    }\n  }\n}\n\nfunction errorPathItemText(isNot, pathItem) {\n  switch (pathItem.tag | 0) {\n    case 0 : \n        return Pervasives.string_of_int(pathItem[1]) + (\":\" + errorText(/* tuple */[\n                      isNot,\n                      pathItem[0]\n                    ]));\n    case 1 : \n        return \"*\" + Pervasives.string_of_int(pathItem[0]);\n    case 2 : \n        return Pervasives.string_of_int(pathItem[0]) + (\":\" + pathItem[1]);\n    \n  }\n}\n\nfunction errorPathText(isNot, _path, _collect) {\n  while(true) {\n    var collect = _collect;\n    var path = _path;\n    if (path) {\n      _collect = /* :: */[\n        errorPathItemText(isNot, path[0]),\n        collect\n      ];\n      _path = path[1];\n      continue ;\n      \n    }\n    else {\n      return collect;\n    }\n  };\n}\n\nfunction lastLineLength(txt, pos) {\n  if (pos >= txt.length) {\n    return txt.length;\n  }\n  else {\n    try {\n      var atNewline = +(Caml_string.get(txt, pos) === /* \"\\n\" */10);\n      var mpos = atNewline !== 0 ? pos - 1 | 0 : pos;\n      var lastPos = $$String.rindex_from(txt, mpos, /* \"\\n\" */10);\n      return (pos - lastPos | 0) - 1 | 0;\n    }\n    catch (exn){\n      if (exn === Caml_builtin_exceptions.not_found) {\n        return pos;\n      }\n      else {\n        throw exn;\n      }\n    }\n  }\n}\n\nfunction leftPad(base, num, _) {\n  var res = \"\";\n  for(var i = 0; i <= num; ++i){\n    res = base + res;\n  }\n  return res;\n}\n\nfunction slice(_lst, _start) {\n  while(true) {\n    var start = _start;\n    var lst = _lst;\n    if (start !== 0) {\n      if (lst) {\n        _start = start - 1 | 0;\n        _lst = lst[1];\n        continue ;\n        \n      }\n      else {\n        throw [\n              Caml_builtin_exceptions.failure,\n              \"Invalid slice\"\n            ];\n      }\n    }\n    else {\n      return lst;\n    }\n  };\n}\n\nfunction errorsText(errors) {\n  return $$String.concat(\"\", List.map(function (param) {\n                  var parts = errorPathText(param[0], param[1], /* [] */0);\n                  var count = List.length(parts);\n                  var parts$1 = count < 5 ? parts : /* :: */[\n                      \"...\",\n                      slice(parts, count - 5 | 0)\n                    ];\n                  return Curry._1(Printf.sprintf(/* Format */[\n                                  /* String */Block.__(2, [\n                                      /* No_padding */0,\n                                      /* Char_literal */Block.__(12, [\n                                          /* \"\\n\" */10,\n                                          /* End_of_format */0\n                                        ])\n                                    ]),\n                                  \"%s\\n\"\n                                ]), $$String.concat(\" > \", parts$1));\n                }, errors));\n}\n\nfunction genErrorText(text, param) {\n  var pos = param[0];\n  var match;\n  if (pos <= 0) {\n    match = /* tuple */[\n      text,\n      0\n    ];\n  }\n  else {\n    var $js;\n    try {\n      $js = $$String.index_from(text, pos, /* \"\\n\" */10);\n    }\n    catch (exn){\n      if (exn === Caml_builtin_exceptions.not_found) {\n        $js = text.length;\n      }\n      else {\n        throw exn;\n      }\n    }\n    match = /* tuple */[\n      $$String.sub(text, 0, $js),\n      lastLineLength(text, pos) - 1 | 0\n    ];\n  }\n  return Curry._2(Printf.sprintf(/* Format */[\n                  /* String */Block.__(2, [\n                      /* No_padding */0,\n                      /* Char_literal */Block.__(12, [\n                          /* \"\\n\" */10,\n                          /* String */Block.__(2, [\n                              /* No_padding */0,\n                              /* String_literal */Block.__(11, [\n                                  \"^\\n\",\n                                  /* End_of_format */0\n                                ])\n                            ])\n                        ])\n                    ]),\n                  \"%s\\n%s^\\n\"\n                ]), match[0], leftPad(\"-\", match[1], \"\")) + errorsText(param[1]);\n}\n\nvar $$Error = /* module */[\n  /* errorText */errorText,\n  /* errorPathItemText */errorPathItemText,\n  /* errorPathText */errorPathText,\n  /* lastLineLength */lastLineLength,\n  /* leftPad */leftPad,\n  /* slice */slice,\n  /* errorsText */errorsText,\n  /* genErrorText */genErrorText\n];\n\nvar Result = /* module */[];\n\nexports.Parsing  = Parsing;\nexports.unwrapOr = unwrapOr;\nexports.Path     = Path;\nexports.$$Error  = $$Error;\nexports.Result   = Result;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./bs_build/packTypes.js\n ** module id = 46\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./bs_build/packTypes.js?");

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Caml_builtin_exceptions = __webpack_require__(4);\nvar Curry                   = __webpack_require__(2);\nvar List                    = __webpack_require__(21);\n\nfunction Make(funarg) {\n  var height = function (param) {\n    if (param) {\n      return param[3];\n    }\n    else {\n      return 0;\n    }\n  };\n  var create = function (l, v, r) {\n    var hl = l ? l[3] : 0;\n    var hr = r ? r[3] : 0;\n    return /* Node */[\n            l,\n            v,\n            r,\n            hl >= hr ? hl + 1 | 0 : hr + 1 | 0\n          ];\n  };\n  var bal = function (l, v, r) {\n    var hl = l ? l[3] : 0;\n    var hr = r ? r[3] : 0;\n    if (hl > (hr + 2 | 0)) {\n      if (l) {\n        var lr = l[2];\n        var lv = l[1];\n        var ll = l[0];\n        if (height(ll) >= height(lr)) {\n          return create(ll, lv, create(lr, v, r));\n        }\n        else if (lr) {\n          return create(create(ll, lv, lr[0]), lr[1], create(lr[2], v, r));\n        }\n        else {\n          throw [\n                Caml_builtin_exceptions.invalid_argument,\n                \"Set.bal\"\n              ];\n        }\n      }\n      else {\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              \"Set.bal\"\n            ];\n      }\n    }\n    else if (hr > (hl + 2 | 0)) {\n      if (r) {\n        var rr = r[2];\n        var rv = r[1];\n        var rl = r[0];\n        if (height(rr) >= height(rl)) {\n          return create(create(l, v, rl), rv, rr);\n        }\n        else if (rl) {\n          return create(create(l, v, rl[0]), rl[1], create(rl[2], rv, rr));\n        }\n        else {\n          throw [\n                Caml_builtin_exceptions.invalid_argument,\n                \"Set.bal\"\n              ];\n        }\n      }\n      else {\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              \"Set.bal\"\n            ];\n      }\n    }\n    else {\n      return /* Node */[\n              l,\n              v,\n              r,\n              hl >= hr ? hl + 1 | 0 : hr + 1 | 0\n            ];\n    }\n  };\n  var add = function (x, t) {\n    if (t) {\n      var r = t[2];\n      var v = t[1];\n      var l = t[0];\n      var c = Curry._2(funarg[/* compare */0], x, v);\n      if (c) {\n        if (c < 0) {\n          return bal(add(x, l), v, r);\n        }\n        else {\n          return bal(l, v, add(x, r));\n        }\n      }\n      else {\n        return t;\n      }\n    }\n    else {\n      return /* Node */[\n              /* Empty */0,\n              x,\n              /* Empty */0,\n              1\n            ];\n    }\n  };\n  var singleton = function (x) {\n    return /* Node */[\n            /* Empty */0,\n            x,\n            /* Empty */0,\n            1\n          ];\n  };\n  var add_min_element = function (v, param) {\n    if (param) {\n      return bal(add_min_element(v, param[0]), param[1], param[2]);\n    }\n    else {\n      return singleton(v);\n    }\n  };\n  var add_max_element = function (v, param) {\n    if (param) {\n      return bal(param[0], param[1], add_max_element(v, param[2]));\n    }\n    else {\n      return singleton(v);\n    }\n  };\n  var join = function (l, v, r) {\n    if (l) {\n      if (r) {\n        var rh = r[3];\n        var lh = l[3];\n        if (lh > (rh + 2 | 0)) {\n          return bal(l[0], l[1], join(l[2], v, r));\n        }\n        else if (rh > (lh + 2 | 0)) {\n          return bal(join(l, v, r[0]), r[1], r[2]);\n        }\n        else {\n          return create(l, v, r);\n        }\n      }\n      else {\n        return add_max_element(v, l);\n      }\n    }\n    else {\n      return add_min_element(v, r);\n    }\n  };\n  var min_elt = function (_param) {\n    while(true) {\n      var param = _param;\n      if (param) {\n        var l = param[0];\n        if (l) {\n          _param = l;\n          continue ;\n          \n        }\n        else {\n          return param[1];\n        }\n      }\n      else {\n        throw Caml_builtin_exceptions.not_found;\n      }\n    };\n  };\n  var max_elt = function (_param) {\n    while(true) {\n      var param = _param;\n      if (param) {\n        var r = param[2];\n        if (r) {\n          _param = r;\n          continue ;\n          \n        }\n        else {\n          return param[1];\n        }\n      }\n      else {\n        throw Caml_builtin_exceptions.not_found;\n      }\n    };\n  };\n  var remove_min_elt = function (param) {\n    if (param) {\n      var l = param[0];\n      if (l) {\n        return bal(remove_min_elt(l), param[1], param[2]);\n      }\n      else {\n        return param[2];\n      }\n    }\n    else {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"Set.remove_min_elt\"\n          ];\n    }\n  };\n  var concat = function (t1, t2) {\n    if (t1) {\n      if (t2) {\n        return join(t1, min_elt(t2), remove_min_elt(t2));\n      }\n      else {\n        return t1;\n      }\n    }\n    else {\n      return t2;\n    }\n  };\n  var split = function (x, param) {\n    if (param) {\n      var r = param[2];\n      var v = param[1];\n      var l = param[0];\n      var c = Curry._2(funarg[/* compare */0], x, v);\n      if (c) {\n        if (c < 0) {\n          var match = split(x, l);\n          return /* tuple */[\n                  match[0],\n                  match[1],\n                  join(match[2], v, r)\n                ];\n        }\n        else {\n          var match$1 = split(x, r);\n          return /* tuple */[\n                  join(l, v, match$1[0]),\n                  match$1[1],\n                  match$1[2]\n                ];\n        }\n      }\n      else {\n        return /* tuple */[\n                l,\n                /* true */1,\n                r\n              ];\n      }\n    }\n    else {\n      return /* tuple */[\n              /* Empty */0,\n              /* false */0,\n              /* Empty */0\n            ];\n    }\n  };\n  var is_empty = function (param) {\n    if (param) {\n      return /* false */0;\n    }\n    else {\n      return /* true */1;\n    }\n  };\n  var mem = function (x, _param) {\n    while(true) {\n      var param = _param;\n      if (param) {\n        var c = Curry._2(funarg[/* compare */0], x, param[1]);\n        if (c) {\n          _param = c < 0 ? param[0] : param[2];\n          continue ;\n          \n        }\n        else {\n          return /* true */1;\n        }\n      }\n      else {\n        return /* false */0;\n      }\n    };\n  };\n  var remove = function (x, param) {\n    if (param) {\n      var r = param[2];\n      var v = param[1];\n      var l = param[0];\n      var c = Curry._2(funarg[/* compare */0], x, v);\n      if (c) {\n        if (c < 0) {\n          return bal(remove(x, l), v, r);\n        }\n        else {\n          return bal(l, v, remove(x, r));\n        }\n      }\n      else {\n        var t1 = l;\n        var t2 = r;\n        if (t1) {\n          if (t2) {\n            return bal(t1, min_elt(t2), remove_min_elt(t2));\n          }\n          else {\n            return t1;\n          }\n        }\n        else {\n          return t2;\n        }\n      }\n    }\n    else {\n      return /* Empty */0;\n    }\n  };\n  var union = function (s1, s2) {\n    if (s1) {\n      if (s2) {\n        var h2 = s2[3];\n        var v2 = s2[1];\n        var h1 = s1[3];\n        var v1 = s1[1];\n        if (h1 >= h2) {\n          if (h2 === 1) {\n            return add(v2, s1);\n          }\n          else {\n            var match = split(v1, s2);\n            return join(union(s1[0], match[0]), v1, union(s1[2], match[2]));\n          }\n        }\n        else if (h1 === 1) {\n          return add(v1, s2);\n        }\n        else {\n          var match$1 = split(v2, s1);\n          return join(union(match$1[0], s2[0]), v2, union(match$1[2], s2[2]));\n        }\n      }\n      else {\n        return s1;\n      }\n    }\n    else {\n      return s2;\n    }\n  };\n  var inter = function (s1, s2) {\n    if (s1) {\n      if (s2) {\n        var r1 = s1[2];\n        var v1 = s1[1];\n        var l1 = s1[0];\n        var match = split(v1, s2);\n        var l2 = match[0];\n        if (match[1] !== 0) {\n          return join(inter(l1, l2), v1, inter(r1, match[2]));\n        }\n        else {\n          return concat(inter(l1, l2), inter(r1, match[2]));\n        }\n      }\n      else {\n        return /* Empty */0;\n      }\n    }\n    else {\n      return /* Empty */0;\n    }\n  };\n  var diff = function (s1, s2) {\n    if (s1) {\n      if (s2) {\n        var r1 = s1[2];\n        var v1 = s1[1];\n        var l1 = s1[0];\n        var match = split(v1, s2);\n        var l2 = match[0];\n        if (match[1] !== 0) {\n          return concat(diff(l1, l2), diff(r1, match[2]));\n        }\n        else {\n          return join(diff(l1, l2), v1, diff(r1, match[2]));\n        }\n      }\n      else {\n        return s1;\n      }\n    }\n    else {\n      return /* Empty */0;\n    }\n  };\n  var cons_enum = function (_s, _e) {\n    while(true) {\n      var e = _e;\n      var s = _s;\n      if (s) {\n        _e = /* More */[\n          s[1],\n          s[2],\n          e\n        ];\n        _s = s[0];\n        continue ;\n        \n      }\n      else {\n        return e;\n      }\n    };\n  };\n  var compare = function (s1, s2) {\n    var _e1 = cons_enum(s1, /* End */0);\n    var _e2 = cons_enum(s2, /* End */0);\n    while(true) {\n      var e2 = _e2;\n      var e1 = _e1;\n      if (e1) {\n        if (e2) {\n          var c = Curry._2(funarg[/* compare */0], e1[0], e2[0]);\n          if (c !== 0) {\n            return c;\n          }\n          else {\n            _e2 = cons_enum(e2[1], e2[2]);\n            _e1 = cons_enum(e1[1], e1[2]);\n            continue ;\n            \n          }\n        }\n        else {\n          return 1;\n        }\n      }\n      else if (e2) {\n        return -1;\n      }\n      else {\n        return 0;\n      }\n    };\n  };\n  var equal = function (s1, s2) {\n    return +(compare(s1, s2) === 0);\n  };\n  var subset = function (_s1, _s2) {\n    while(true) {\n      var s2 = _s2;\n      var s1 = _s1;\n      if (s1) {\n        if (s2) {\n          var r2 = s2[2];\n          var l2 = s2[0];\n          var r1 = s1[2];\n          var v1 = s1[1];\n          var l1 = s1[0];\n          var c = Curry._2(funarg[/* compare */0], v1, s2[1]);\n          if (c) {\n            if (c < 0) {\n              if (subset(/* Node */[\n                      l1,\n                      v1,\n                      /* Empty */0,\n                      0\n                    ], l2)) {\n                _s1 = r1;\n                continue ;\n                \n              }\n              else {\n                return /* false */0;\n              }\n            }\n            else if (subset(/* Node */[\n                    /* Empty */0,\n                    v1,\n                    r1,\n                    0\n                  ], r2)) {\n              _s1 = l1;\n              continue ;\n              \n            }\n            else {\n              return /* false */0;\n            }\n          }\n          else if (subset(l1, l2)) {\n            _s2 = r2;\n            _s1 = r1;\n            continue ;\n            \n          }\n          else {\n            return /* false */0;\n          }\n        }\n        else {\n          return /* false */0;\n        }\n      }\n      else {\n        return /* true */1;\n      }\n    };\n  };\n  var iter = function (f, _param) {\n    while(true) {\n      var param = _param;\n      if (param) {\n        iter(f, param[0]);\n        Curry._1(f, param[1]);\n        _param = param[2];\n        continue ;\n        \n      }\n      else {\n        return /* () */0;\n      }\n    };\n  };\n  var fold = function (f, _s, _accu) {\n    while(true) {\n      var accu = _accu;\n      var s = _s;\n      if (s) {\n        _accu = Curry._2(f, s[1], fold(f, s[0], accu));\n        _s = s[2];\n        continue ;\n        \n      }\n      else {\n        return accu;\n      }\n    };\n  };\n  var for_all = function (p, _param) {\n    while(true) {\n      var param = _param;\n      if (param) {\n        if (Curry._1(p, param[1])) {\n          if (for_all(p, param[0])) {\n            _param = param[2];\n            continue ;\n            \n          }\n          else {\n            return /* false */0;\n          }\n        }\n        else {\n          return /* false */0;\n        }\n      }\n      else {\n        return /* true */1;\n      }\n    };\n  };\n  var exists = function (p, _param) {\n    while(true) {\n      var param = _param;\n      if (param) {\n        if (Curry._1(p, param[1])) {\n          return /* true */1;\n        }\n        else if (exists(p, param[0])) {\n          return /* true */1;\n        }\n        else {\n          _param = param[2];\n          continue ;\n          \n        }\n      }\n      else {\n        return /* false */0;\n      }\n    };\n  };\n  var filter = function (p, param) {\n    if (param) {\n      var v = param[1];\n      var l$prime = filter(p, param[0]);\n      var pv = Curry._1(p, v);\n      var r$prime = filter(p, param[2]);\n      if (pv) {\n        return join(l$prime, v, r$prime);\n      }\n      else {\n        return concat(l$prime, r$prime);\n      }\n    }\n    else {\n      return /* Empty */0;\n    }\n  };\n  var partition = function (p, param) {\n    if (param) {\n      var v = param[1];\n      var match = partition(p, param[0]);\n      var lf = match[1];\n      var lt = match[0];\n      var pv = Curry._1(p, v);\n      var match$1 = partition(p, param[2]);\n      var rf = match$1[1];\n      var rt = match$1[0];\n      if (pv) {\n        return /* tuple */[\n                join(lt, v, rt),\n                concat(lf, rf)\n              ];\n      }\n      else {\n        return /* tuple */[\n                concat(lt, rt),\n                join(lf, v, rf)\n              ];\n      }\n    }\n    else {\n      return /* tuple */[\n              /* Empty */0,\n              /* Empty */0\n            ];\n    }\n  };\n  var cardinal = function (param) {\n    if (param) {\n      return (cardinal(param[0]) + 1 | 0) + cardinal(param[2]) | 0;\n    }\n    else {\n      return 0;\n    }\n  };\n  var elements_aux = function (_accu, _param) {\n    while(true) {\n      var param = _param;\n      var accu = _accu;\n      if (param) {\n        _param = param[0];\n        _accu = /* :: */[\n          param[1],\n          elements_aux(accu, param[2])\n        ];\n        continue ;\n        \n      }\n      else {\n        return accu;\n      }\n    };\n  };\n  var elements = function (s) {\n    return elements_aux(/* [] */0, s);\n  };\n  var find = function (x, _param) {\n    while(true) {\n      var param = _param;\n      if (param) {\n        var v = param[1];\n        var c = Curry._2(funarg[/* compare */0], x, v);\n        if (c) {\n          _param = c < 0 ? param[0] : param[2];\n          continue ;\n          \n        }\n        else {\n          return v;\n        }\n      }\n      else {\n        throw Caml_builtin_exceptions.not_found;\n      }\n    };\n  };\n  var of_list = function (l) {\n    if (l) {\n      var match = l[1];\n      var x0 = l[0];\n      if (match) {\n        var match$1 = match[1];\n        var x1 = match[0];\n        if (match$1) {\n          var match$2 = match$1[1];\n          var x2 = match$1[0];\n          if (match$2) {\n            var match$3 = match$2[1];\n            var x3 = match$2[0];\n            if (match$3) {\n              if (match$3[1]) {\n                var l$1 = List.sort_uniq(funarg[/* compare */0], l);\n                var sub = function (n, l) {\n                  var exit = 0;\n                  if (n > 3 || n < 0) {\n                    exit = 1;\n                  }\n                  else {\n                    switch (n) {\n                      case 0 : \n                          return /* tuple */[\n                                  /* Empty */0,\n                                  l\n                                ];\n                      case 1 : \n                          if (l) {\n                            return /* tuple */[\n                                    /* Node */[\n                                      /* Empty */0,\n                                      l[0],\n                                      /* Empty */0,\n                                      1\n                                    ],\n                                    l[1]\n                                  ];\n                          }\n                          else {\n                            exit = 1;\n                          }\n                          break;\n                      case 2 : \n                          if (l) {\n                            var match = l[1];\n                            if (match) {\n                              return /* tuple */[\n                                      /* Node */[\n                                        /* Node */[\n                                          /* Empty */0,\n                                          l[0],\n                                          /* Empty */0,\n                                          1\n                                        ],\n                                        match[0],\n                                        /* Empty */0,\n                                        2\n                                      ],\n                                      match[1]\n                                    ];\n                            }\n                            else {\n                              exit = 1;\n                            }\n                          }\n                          else {\n                            exit = 1;\n                          }\n                          break;\n                      case 3 : \n                          if (l) {\n                            var match$1 = l[1];\n                            if (match$1) {\n                              var match$2 = match$1[1];\n                              if (match$2) {\n                                return /* tuple */[\n                                        /* Node */[\n                                          /* Node */[\n                                            /* Empty */0,\n                                            l[0],\n                                            /* Empty */0,\n                                            1\n                                          ],\n                                          match$1[0],\n                                          /* Node */[\n                                            /* Empty */0,\n                                            match$2[0],\n                                            /* Empty */0,\n                                            1\n                                          ],\n                                          2\n                                        ],\n                                        match$2[1]\n                                      ];\n                              }\n                              else {\n                                exit = 1;\n                              }\n                            }\n                            else {\n                              exit = 1;\n                            }\n                          }\n                          else {\n                            exit = 1;\n                          }\n                          break;\n                      \n                    }\n                  }\n                  if (exit === 1) {\n                    var nl = n / 2 | 0;\n                    var match$3 = sub(nl, l);\n                    var l$1 = match$3[1];\n                    if (l$1) {\n                      var match$4 = sub((n - nl | 0) - 1 | 0, l$1[1]);\n                      return /* tuple */[\n                              create(match$3[0], l$1[0], match$4[0]),\n                              match$4[1]\n                            ];\n                    }\n                    else {\n                      throw [\n                            Caml_builtin_exceptions.assert_failure,\n                            [\n                              \"set.ml\",\n                              372,\n                              18\n                            ]\n                          ];\n                    }\n                  }\n                  \n                };\n                return sub(List.length(l$1), l$1)[0];\n              }\n              else {\n                return add(match$3[0], add(x3, add(x2, add(x1, singleton(x0)))));\n              }\n            }\n            else {\n              return add(x3, add(x2, add(x1, singleton(x0))));\n            }\n          }\n          else {\n            return add(x2, add(x1, singleton(x0)));\n          }\n        }\n        else {\n          return add(x1, singleton(x0));\n        }\n      }\n      else {\n        return singleton(x0);\n      }\n    }\n    else {\n      return /* Empty */0;\n    }\n  };\n  return [\n          /* Empty */0,\n          is_empty,\n          mem,\n          add,\n          singleton,\n          remove,\n          union,\n          inter,\n          diff,\n          compare,\n          equal,\n          subset,\n          iter,\n          fold,\n          for_all,\n          exists,\n          filter,\n          partition,\n          cardinal,\n          elements,\n          min_elt,\n          max_elt,\n          min_elt,\n          split,\n          find,\n          of_list\n        ];\n}\n\nexports.Make = Make;\n/* No side effect */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/bs-platform/lib/js/set.js\n ** module id = 47\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/bs-platform/lib/js/set.js?");

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	eval("// Generated by BUCKLESCRIPT VERSION 1.0.1 , PLEASE EDIT WITH CARE\n'use strict';\n\nvar Pervasives  = __webpack_require__(7);\nvar Caml_format = __webpack_require__(12);\nvar Block       = __webpack_require__(1);\nvar Scanf       = __webpack_require__(28);\nvar ResultUtils = __webpack_require__(27);\nvar Curry       = __webpack_require__(2);\nvar Printf      = __webpack_require__(6);\nvar $$String    = __webpack_require__(23);\nvar Caml_string = __webpack_require__(16);\nvar List        = __webpack_require__(21);\n\nfunction parseString(contents) {\n  return Scanf.unescaped($$String.sub(contents, 1, contents.length - 2 | 0));\n}\n\nfunction parseDecorator(children) {\n  var name = ResultUtils.unwrap(ResultUtils.getContentsByLabel(children, \"name\"));\n  var args = ResultUtils.getChildren(children, function (child) {\n        if (child[0] === \"args\") {\n          var match = child[1];\n          if (match.tag) {\n            var match$1 = match[0];\n            if (match$1[0] === \"decarg\") {\n              var children = match[1];\n              var $js;\n              switch (match$1[1]) {\n                case \"bool\" : \n                    var match$2 = +(ResultUtils.unwrap(ResultUtils.getContentsByType(children, \"bool\")) === \"true\");\n                    $js = /* Bool */Block.__(0, [match$2 !== 0 ? /* true */1 : /* false */0]);\n                    break;\n                case \"number\" : \n                    $js = /* Number */Block.__(2, [Caml_format.caml_int_of_string(ResultUtils.unwrap(ResultUtils.getContentsByType(children, \"number\")))]);\n                    break;\n                case \"string\" : \n                    $js = /* String */Block.__(1, [parseString(ResultUtils.unwrap(ResultUtils.getContentsByType(children, \"string\")))]);\n                    break;\n                default:\n                  $js = Pervasives.failwith(\"unexpected arg type\");\n              }\n              return /* Some */[$js];\n            }\n            else {\n              return /* None */0;\n            }\n          }\n          else {\n            return /* None */0;\n          }\n        }\n        else {\n          return /* None */0;\n        }\n      });\n  return /* tuple */[\n          name,\n          args\n        ];\n}\n\nfunction optOr(orr, opt) {\n  if (opt) {\n    return opt[0];\n  }\n  else {\n    return orr;\n  }\n}\n\nfunction getFlag(children) {\n  return ResultUtils.getChild(children, function (child) {\n              if (child[0] === \"flag\") {\n                var match = child[1];\n                if (match.tag) {\n                  return /* Some */[match[0][1]];\n                }\n                else {\n                  return Pervasives.failwith(\"Flag expected to be non-leaf\");\n                }\n              }\n              else {\n                return /* None */0;\n              }\n            });\n}\n\nfunction unescapeString(txt) {\n  try {\n    var match = +(txt.length === 1);\n    if (match !== 0) {\n      return txt;\n    }\n    else {\n      return Scanf.unescaped(txt);\n    }\n  }\n  catch (exn){\n    if (exn[0] === Scanf.Scan_failure) {\n      return Pervasives.failwith(\"Unescape fail --\" + (txt + \"--\"));\n    }\n    else {\n      throw exn;\n    }\n  }\n}\n\nfunction unescapeChar(txt) {\n  var match = +(txt.length === 1);\n  return Caml_string.get(match !== 0 ? txt : unescapeString(txt), 0);\n}\n\nfunction isSome(x) {\n  if (x) {\n    return /* true */1;\n  }\n  else {\n    return /* false */0;\n  }\n}\n\nfunction getSuffix(children) {\n  return ResultUtils.getChild(children, function (child) {\n              if (child[0] === \"suffix\") {\n                var match = child[1];\n                if (match.tag) {\n                  return /* Some */[match[0][1]];\n                }\n                else {\n                  return Pervasives.failwith(\"Suffix expected to be non-leaf\");\n                }\n              }\n              else {\n                return /* None */0;\n              }\n            });\n}\n\nfunction unwrapString(txt) {\n  return unescapeString($$String.sub(txt, 1, txt.length - 2 | 0));\n}\n\nfunction parseInner(label, param) {\n  var children = param[1];\n  if (param[0][1] === \"nested\") {\n    if (isSome(label)) {\n      Pervasives.failwith(\"groups can't have labels: \" + ResultUtils.unwrap(label));\n    }\n    return /* Group */Block.__(6, [ResultUtils.getChildren(children, function (param) {\n                    var child = param[1];\n                    if (param[0] === \"nested\") {\n                      if (child.tag) {\n                        return /* Some */[parseItem(child[1])];\n                      }\n                      else {\n                        return Pervasives.failwith(\"Nested child expected to be non-leaf\");\n                      }\n                    }\n                    else {\n                      return /* None */0;\n                    }\n                  })]);\n  }\n  else {\n    return ResultUtils.unwrap(ResultUtils.getChild(children, function (param) {\n                    var child = param[1];\n                    if (child.tag) {\n                      switch (child[0][0]) {\n                        case \"char\" : \n                            return ResultUtils.getChild(child[1], function (param) {\n                                        var child = param[1];\n                                        if (!child.tag && child[0][0] === \"single\") {\n                                          return /* Some */[/* Terminal */Block.__(11, [\n                                                      unescapeString(child[1]),\n                                                      label\n                                                    ])];\n                                        }\n                                        else {\n                                          return /* None */0;\n                                        }\n                                      });\n                        case \"char_range\" : \n                            var children = child[1];\n                            var start = ResultUtils.unwrap(ResultUtils.getContentsByLabel(children, \"start\"));\n                            var send = ResultUtils.unwrap(ResultUtils.getContentsByLabel(children, \"end\"));\n                            return /* Some */[/* Chars */Block.__(12, [\n                                        unescapeChar(start),\n                                        unescapeChar(send),\n                                        label\n                                      ])];\n                        default:\n                          return /* None */0;\n                      }\n                    }\n                    else {\n                      switch (child[0][0]) {\n                        case \"ident\" : \n                            var contents = child[1];\n                            switch (contents) {\n                              case \"EOF\" : \n                                  return /* Some */[/* EOF */0];\n                              case \"EOL\" : \n                                  return /* Some */[/* CommentEOL */1];\n                              case \"any\" : \n                                  return /* Some */[/* Any */Block.__(3, [label])];\n                              default:\n                                return /* Some */[/* NonTerminal */Block.__(10, [\n                                            contents,\n                                            label\n                                          ])];\n                            }\n                            break;\n                        case \"string\" : \n                            return /* Some */[/* Terminal */Block.__(11, [\n                                        unwrapString(child[1]),\n                                        label\n                                      ])];\n                        default:\n                          return /* None */0;\n                      }\n                    }\n                  }));\n  }\n}\n\nfunction parseItem(children) {\n  var neg = ResultUtils.getPresenceByLabel(children, \"neg\");\n  var lexify = ResultUtils.getPresenceByLabel(children, \"lexify\");\n  var noSpaceAfter = ResultUtils.getPresenceByLabel(children, \"noSpaceAfter\");\n  var noSpaceBefore = ResultUtils.getPresenceByLabel(children, \"noSpaceBefore\");\n  var suffix = getSuffix(children);\n  getFlag(children);\n  var label = ResultUtils.getContentsByLabel(children, \"name\");\n  var inner = parseInner(label, ResultUtils.unwrap(ResultUtils.getNodeByLabel(children, \"inner\")));\n  var inner$1 = noSpaceAfter !== 0 ? /* NoSpaceAfter */Block.__(4, [inner]) : inner;\n  var inner$2 = noSpaceBefore !== 0 ? /* NoSpaceBefore */Block.__(5, [inner$1]) : inner$1;\n  var inner$3;\n  if (suffix) {\n    switch (suffix[0]) {\n      case \"opt\" : \n          inner$3 = /* Optional */Block.__(2, [inner$2]);\n          break;\n      case \"plus\" : \n          inner$3 = /* Plus */Block.__(1, [inner$2]);\n          break;\n      case \"star\" : \n          inner$3 = /* Star */Block.__(0, [inner$2]);\n          break;\n      default:\n        inner$3 = Pervasives.failwith(\"unexpected suffix\");\n    }\n  }\n  else {\n    inner$3 = inner$2;\n  }\n  var inner$4 = neg !== 0 ? /* Not */Block.__(8, [inner$3]) : inner$3;\n  if (lexify !== 0) {\n    return /* Lexify */Block.__(9, [inner$4]);\n  }\n  else {\n    return inner$4;\n  }\n}\n\nfunction parseChoice(children) {\n  var name = optOr(\"\", ResultUtils.getContentsByLabel(children, \"name\"));\n  var comment = optOr(\"\", ResultUtils.getContentsByLabel(children, \"comment\"));\n  var children$1 = ResultUtils.getChildren(children, function (param) {\n        var child = param[1];\n        if (!child.tag || child[0][0] !== \"Item\") {\n          return /* None */0;\n        }\n        else {\n          return /* Some */[parseItem(child[1])];\n        }\n      });\n  return /* tuple */[\n          name,\n          comment,\n          children$1\n        ];\n}\n\nfunction parseRule(children) {\n  var name = ResultUtils.unwrap(ResultUtils.getContentsByLabel(children, \"name\"));\n  var match = List.fold_left(function (flags, child) {\n        if (child[0] === \"decorators\") {\n          var match = child[1];\n          if (match.tag) {\n            var leaf = flags[2];\n            var pass = flags[1];\n            var white = flags[0];\n            var match$1 = parseDecorator(match[1]);\n            var name = match$1[0];\n            var exit = 0;\n            switch (name) {\n              case \"ignoreNewlines\" : \n                  var match$2 = match$1[1];\n                  if (match$2) {\n                    var match$3 = match$2[0];\n                    switch (match$3.tag | 0) {\n                      case 0 : \n                          if (match$2[1]) {\n                            exit = 1;\n                          }\n                          else {\n                            return /* tuple */[\n                                    match$3[0] !== 0 ? /* Yes */0 : /* No */1,\n                                    pass,\n                                    leaf\n                                  ];\n                          }\n                          break;\n                      case 1 : \n                      case 2 : \n                          exit = 1;\n                          break;\n                      \n                    }\n                  }\n                  else {\n                    return /* tuple */[\n                            /* Yes */0,\n                            pass,\n                            leaf\n                          ];\n                  }\n                  break;\n              case \"leaf\" : \n                  if (match$1[1]) {\n                    exit = 1;\n                  }\n                  else {\n                    return /* tuple */[\n                            white,\n                            pass,\n                            /* true */1\n                          ];\n                  }\n                  break;\n              case \"blockComment\" : \n              case \"lineComment\" : \n                  return flags;\n              case \"passThrough\" : \n                  if (match$1[1]) {\n                    exit = 1;\n                  }\n                  else {\n                    return /* tuple */[\n                            white,\n                            /* true */1,\n                            leaf\n                          ];\n                  }\n                  break;\n              default:\n                exit = 1;\n            }\n            if (exit === 1) {\n              Curry._1(Printf.eprintf(/* Format */[\n                        /* String_literal */Block.__(11, [\n                            \"Ignoring decorator \",\n                            /* String */Block.__(2, [\n                                /* No_padding */0,\n                                /* Char_literal */Block.__(12, [\n                                    /* \"\\n\" */10,\n                                    /* End_of_format */0\n                                  ])\n                              ])\n                          ]),\n                        \"Ignoring decorator %s\\n\"\n                      ]), name);\n              return flags;\n            }\n            \n          }\n          else {\n            return flags;\n          }\n        }\n        else {\n          return flags;\n        }\n      }, /* tuple */[\n        /* Inherit */2,\n        /* false */0,\n        /* false */0\n      ], children);\n  return /* tuple */[\n          name,\n          /* record */[\n            /* passThrough */match[1],\n            /* ignoreNewlines */match[0],\n            /* leaf */match[2],\n            /* choices */ResultUtils.getChildren(children, function (param) {\n                  var child = param[1];\n                  if (!child.tag || child[0][0] !== \"Choice\") {\n                    return /* None */0;\n                  }\n                  else {\n                    return /* Some */[parseChoice(child[1])];\n                  }\n                })\n          ]\n        ];\n}\n\nfunction getToplevelDecorators(children) {\n  return List.fold_left(function (decs, child) {\n              if (child[0] === \"decorators\") {\n                var match = child[1];\n                if (match.tag) {\n                  var match$1 = parseDecorator(match[1]);\n                  switch (match$1[0]) {\n                    case \"blockComment\" : \n                        var match$2 = match$1[1];\n                        if (match$2) {\n                          var match$3 = match$2[0];\n                          switch (match$3.tag | 0) {\n                            case 1 : \n                                var match$4 = match$2[1];\n                                if (match$4) {\n                                  var match$5 = match$4[0];\n                                  switch (match$5.tag | 0) {\n                                    case 1 : \n                                        if (match$4[1]) {\n                                          return decs;\n                                        }\n                                        else {\n                                          return /* tuple */[\n                                                  decs[0],\n                                                  /* Some */[/* tuple */[\n                                                      match$3[0],\n                                                      match$5[0]\n                                                    ]]\n                                                ];\n                                        }\n                                    case 0 : \n                                    case 2 : \n                                        return decs;\n                                    \n                                  }\n                                }\n                                else {\n                                  return decs;\n                                }\n                                break;\n                            case 0 : \n                            case 2 : \n                                return decs;\n                            \n                          }\n                        }\n                        else {\n                          return decs;\n                        }\n                        break;\n                    case \"lineComment\" : \n                        var match$6 = match$1[1];\n                        if (match$6) {\n                          var match$7 = match$6[0];\n                          switch (match$7.tag | 0) {\n                            case 1 : \n                                if (match$6[1]) {\n                                  return decs;\n                                }\n                                else {\n                                  return /* tuple */[\n                                          /* Some */[match$7[0]],\n                                          decs[1]\n                                        ];\n                                }\n                            case 0 : \n                            case 2 : \n                                return decs;\n                            \n                          }\n                        }\n                        else {\n                          return decs;\n                        }\n                        break;\n                    default:\n                      return decs;\n                  }\n                }\n                else {\n                  return decs;\n                }\n              }\n              else {\n                return decs;\n              }\n            }, /* tuple */[\n              /* None */0,\n              /* None */0\n            ], children);\n}\n\nfunction convert(result) {\n  if (result.tag) {\n    if (result[0][0] === \"Start\") {\n      var children = result[1];\n      var rules = ResultUtils.getChildren(children, function (param) {\n            var child = param[1];\n            if (!child.tag || child[0][0] !== \"Rule\") {\n              return /* None */0;\n            }\n            else {\n              return /* Some */[parseRule(child[1])];\n            }\n          });\n      var match = optOr(/* tuple */[\n            /* None */0,\n            /* None */0\n          ], ResultUtils.getChild(children, function (param) {\n                var child = param[1];\n                if (!child.tag || child[0][0] !== \"Rule\") {\n                  return /* None */0;\n                }\n                else {\n                  return /* Some */[getToplevelDecorators(child[1])];\n                }\n              }));\n      return /* record */[\n              /* lineComment */match[0],\n              /* blockComment */match[1],\n              /* rules */rules\n            ];\n    }\n    else {\n      return Pervasives.failwith(\"Base must be of type `start`\");\n    }\n  }\n  else {\n    return Pervasives.failwith(\"Base must be of type `start`\");\n  }\n}\n\nvar P = 0;\n\nvar RU = 0;\n\nexports.P                     = P;\nexports.RU                    = RU;\nexports.parseString           = parseString;\nexports.parseDecorator        = parseDecorator;\nexports.optOr                 = optOr;\nexports.getFlag               = getFlag;\nexports.unescapeString        = unescapeString;\nexports.unescapeChar          = unescapeChar;\nexports.isSome                = isSome;\nexports.getSuffix             = getSuffix;\nexports.unwrapString          = unwrapString;\nexports.parseInner            = parseInner;\nexports.parseItem             = parseItem;\nexports.parseChoice           = parseChoice;\nexports.parseRule             = parseRule;\nexports.getToplevelDecorators = getToplevelDecorators;\nexports.convert               = convert;\n/* Scanf Not a pure module */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./bs_build/grammarOfGrammar.js\n ** module id = 48\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./bs_build/grammarOfGrammar.js?");

/***/ }
/******/ ]);