JsLike {
Exp
  = Expressions

Expression
  = Seq
  | SwitchExp
  | TupleExpression
  | LetExp
  | Wrapped
  | FunExp
  | Binexp
  | IfExp
  | FnCall
  | AttrAccess
  | MemberAccess
  | WithType
  | Literal
  | ~reserve ident
// was gonna have Macro here

reserve
  = "if"
  | "switch"
  | "case"
  | "nil"
  | "fun"
  | "let"

Expressions
  = (Expression # expbreak)* Expression?

WithType
  = Expression ":" TypeExpression

TypeExpression
  = TupleType
  | GenericedType
  | FunctionType
  | "(" TypeExpression ")" -- wrapped
  | ident

FunctionType
  = TypeExpression "->" TypeExpression

ArgLabel
  = "::" ident "?"?

SwitchExp
  = "switch" Expression "{" SwitchCase* "}"
  
SwitchCase
  = "case" SwitchPattern ("when" Expression)? "->" ExpOrBlock

SwitchPattern
  = Literal
  | ident
  | "{" (SMapPattern ",")* SMapPattern? "}" -- map
  | "[" (SwitchPattern ",")* SwitchPattern? "]" -- list
  | "(" (SwitchPattern ",")* SwitchPattern? ")" -- tuple

SMapPattern
  = ident ":" SwitchPattern -- full
  | ident -- punned

ExpOrBlock
  = Expression
  | "{" Expressions "}" -- block

FunExp
  = "fun" Args "=>" ExpOrBlock

Args
  = ArgPattern -- single
  | "(" (ArgPattern ",")* ArgPattern? ")" -- multiple

ArgPattern
  = ident
  | "{" (MapPattern ",")* MapPattern? "}" -- map
  | "[" (ArgPattern ",")* ArgPattern? "]" -- list
  | "(" (ArgPattern ",")* ArgPattern? ")" -- tuple

TupleExpression
  = "(" Expression "," Expression ("," Expression)* ","? ")"

Wrapped
  = "(" Expression ")"

MapPattern
  = ident ":" ArgPattern -- full
  | ident -- punned

TupleType
  = "(" TypeExpression "," TypeExpression ("," TypeExpression)* ","? ")"

TypeCommas = (TypeExpression ",")* TypeExpression?

GenericedType
  = TypeExpression "<" TypeCommas ">"

MemberAccess
  = Expression "." ident

expbreak
  = ";"
  | "\n"

Literal
  = number
  | hexnum
  | string
  | keyword
  | comment
  | nil
  | bool
  | arg
  | char

reserved
  = "if"
  | "while"
  | "for"
  | "fun"
  | "let"
  | "switch"
  | "case"

FnCall
  = Expression "(" CommadExpressions ")"

AttrAccess
  = Expression "[" Expression "]"

IfExp
  = "if" Expression "{" Expressions "}" ("else" "{" Expressions "}")?

LetExp
  = "let" ArgPattern (":" TypeExpression)? "=" Expression

comment
  = ";" (~ "\n" any)+

nil
  = "nil"

bool
  = "true" -- true
  | "false" -- false

MapPair
  = ident ":" Expression -- full
  | ident -- punned

Seq
  = "[|" CommadExpressions "|]" -- array
  | "[" CommadExpressions "]" -- list
  | "{" (MapPair ",")* MapPair? "}" -- map

CommadExpressions
  = (Expression ",")* Expression?

Macro
  = "'" Expression -- quoted
  | "@" Expression -- deref
  | "^" Expression Expression -- with_meta
  | "`" Expression -- syntax_quote
  | "~" Expression -- unquote
  | "#^" Expression Expression -- other_meta
  | "#'" Expression -- var
  | "#(" Expression+ ")" -- fn
  | "#{" Expression+ "}" -- set
  | "#\"" strchar "\"" -- regex
  | "#_" Expression -- discard
  | "#?" Expression -- conditional

char
  = "\\" any
  
arg
  = "%" digit -- named
  | "%" ~identchar -- anon


string
  = "\"" strchar* "\""

strchar
  = "\\" any -- escaped
  | ~ "\"" any

keyword
  = ":" identchar+

ident
  = ~digit identchar identchar* ~identchar

Binexp
  = Expression binop Expression

binop
  = "<"
  | ">"
  | "=="
  | "==="
  | "!="
  | "!=="
  | "+"
  | "-"
  | "*"
  | "|>"

identstart
  = letter
  | "#".."&"
  | "*".."/"
  | "<".."@"
  | "^"
  | "_"

identchar
  = letter
  | "'"
  | "0".."9"
  | "^"
  | "-"
  | "?"
  | "_"

number  (a number)
  = digit* "." digit+ ~identchar  -- fract
  | digit+ ~identchar             -- whole

hexnum
  = "0x" hexal+

hexal
  = "a-f"
  | "A-F"
  | digit
}